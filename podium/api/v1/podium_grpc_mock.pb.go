// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: podium/api/v1/podium.proto

package podium_api_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPodiumClient is a mock of PodiumClient interface.
type MockPodiumClient struct {
	ctrl     *gomock.Controller
	recorder *MockPodiumClientMockRecorder
}

// MockPodiumClientMockRecorder is the mock recorder for MockPodiumClient.
type MockPodiumClientMockRecorder struct {
	mock *MockPodiumClient
}

// NewMockPodiumClient creates a new mock instance.
func NewMockPodiumClient(ctrl *gomock.Controller) *MockPodiumClient {
	mock := &MockPodiumClient{ctrl: ctrl}
	mock.recorder = &MockPodiumClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodiumClient) EXPECT() *MockPodiumClientMockRecorder {
	return m.recorder
}

// BulkUpsertScores mocks base method.
func (m *MockPodiumClient) BulkUpsertScores(ctx context.Context, in *BulkUpsertScoresRequest, opts ...grpc.CallOption) (*BulkUpsertScoresResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkUpsertScores", varargs...)
	ret0, _ := ret[0].(*BulkUpsertScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpsertScores indicates an expected call of BulkUpsertScores.
func (mr *MockPodiumClientMockRecorder) BulkUpsertScores(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsertScores", reflect.TypeOf((*MockPodiumClient)(nil).BulkUpsertScores), varargs...)
}

// GetAroundMember mocks base method.
func (m *MockPodiumClient) GetAroundMember(ctx context.Context, in *GetAroundMemberRequest, opts ...grpc.CallOption) (*GetAroundMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAroundMember", varargs...)
	ret0, _ := ret[0].(*GetAroundMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAroundMember indicates an expected call of GetAroundMember.
func (mr *MockPodiumClientMockRecorder) GetAroundMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAroundMember", reflect.TypeOf((*MockPodiumClient)(nil).GetAroundMember), varargs...)
}

// GetAroundScore mocks base method.
func (m *MockPodiumClient) GetAroundScore(ctx context.Context, in *GetAroundScoreRequest, opts ...grpc.CallOption) (*GetAroundScoreResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAroundScore", varargs...)
	ret0, _ := ret[0].(*GetAroundScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAroundScore indicates an expected call of GetAroundScore.
func (mr *MockPodiumClientMockRecorder) GetAroundScore(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAroundScore", reflect.TypeOf((*MockPodiumClient)(nil).GetAroundScore), varargs...)
}

// GetMember mocks base method.
func (m *MockPodiumClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMember", varargs...)
	ret0, _ := ret[0].(*GetMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockPodiumClientMockRecorder) GetMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockPodiumClient)(nil).GetMember), varargs...)
}

// GetMembers mocks base method.
func (m *MockPodiumClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembers", varargs...)
	ret0, _ := ret[0].(*GetMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockPodiumClientMockRecorder) GetMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockPodiumClient)(nil).GetMembers), varargs...)
}

// GetRank mocks base method.
func (m *MockPodiumClient) GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRank", varargs...)
	ret0, _ := ret[0].(*GetRankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRank indicates an expected call of GetRank.
func (mr *MockPodiumClientMockRecorder) GetRank(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRank", reflect.TypeOf((*MockPodiumClient)(nil).GetRank), varargs...)
}

// GetRankMultiLeaderboards mocks base method.
func (m *MockPodiumClient) GetRankMultiLeaderboards(ctx context.Context, in *GetRankMultiLeaderboardsRequest, opts ...grpc.CallOption) (*GetRankMultiLeaderboardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRankMultiLeaderboards", varargs...)
	ret0, _ := ret[0].(*GetRankMultiLeaderboardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRankMultiLeaderboards indicates an expected call of GetRankMultiLeaderboards.
func (mr *MockPodiumClientMockRecorder) GetRankMultiLeaderboards(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankMultiLeaderboards", reflect.TypeOf((*MockPodiumClient)(nil).GetRankMultiLeaderboards), varargs...)
}

// GetTopMembers mocks base method.
func (m *MockPodiumClient) GetTopMembers(ctx context.Context, in *GetTopMembersRequest, opts ...grpc.CallOption) (*GetTopMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopMembers", varargs...)
	ret0, _ := ret[0].(*GetTopMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopMembers indicates an expected call of GetTopMembers.
func (mr *MockPodiumClientMockRecorder) GetTopMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopMembers", reflect.TypeOf((*MockPodiumClient)(nil).GetTopMembers), varargs...)
}

// GetTopPercentage mocks base method.
func (m *MockPodiumClient) GetTopPercentage(ctx context.Context, in *GetTopPercentageRequest, opts ...grpc.CallOption) (*GetTopPercentageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopPercentage", varargs...)
	ret0, _ := ret[0].(*GetTopPercentageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPercentage indicates an expected call of GetTopPercentage.
func (mr *MockPodiumClientMockRecorder) GetTopPercentage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPercentage", reflect.TypeOf((*MockPodiumClient)(nil).GetTopPercentage), varargs...)
}

// HealthCheck mocks base method.
func (m *MockPodiumClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(*HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockPodiumClientMockRecorder) HealthCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockPodiumClient)(nil).HealthCheck), varargs...)
}

// IncrementScore mocks base method.
func (m *MockPodiumClient) IncrementScore(ctx context.Context, in *IncrementScoreRequest, opts ...grpc.CallOption) (*IncrementScoreResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncrementScore", varargs...)
	ret0, _ := ret[0].(*IncrementScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementScore indicates an expected call of IncrementScore.
func (mr *MockPodiumClientMockRecorder) IncrementScore(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementScore", reflect.TypeOf((*MockPodiumClient)(nil).IncrementScore), varargs...)
}

// RemoveLeaderboard mocks base method.
func (m *MockPodiumClient) RemoveLeaderboard(ctx context.Context, in *RemoveLeaderboardRequest, opts ...grpc.CallOption) (*RemoveLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveLeaderboard", varargs...)
	ret0, _ := ret[0].(*RemoveLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLeaderboard indicates an expected call of RemoveLeaderboard.
func (mr *MockPodiumClientMockRecorder) RemoveLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLeaderboard", reflect.TypeOf((*MockPodiumClient)(nil).RemoveLeaderboard), varargs...)
}

// RemoveMember mocks base method.
func (m *MockPodiumClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveMember", varargs...)
	ret0, _ := ret[0].(*RemoveMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockPodiumClientMockRecorder) RemoveMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockPodiumClient)(nil).RemoveMember), varargs...)
}

// RemoveMembers mocks base method.
func (m *MockPodiumClient) RemoveMembers(ctx context.Context, in *RemoveMembersRequest, opts ...grpc.CallOption) (*RemoveMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveMembers", varargs...)
	ret0, _ := ret[0].(*RemoveMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMembers indicates an expected call of RemoveMembers.
func (mr *MockPodiumClientMockRecorder) RemoveMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMembers", reflect.TypeOf((*MockPodiumClient)(nil).RemoveMembers), varargs...)
}

// Status mocks base method.
func (m *MockPodiumClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockPodiumClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockPodiumClient)(nil).Status), varargs...)
}

// TotalMembers mocks base method.
func (m *MockPodiumClient) TotalMembers(ctx context.Context, in *TotalMembersRequest, opts ...grpc.CallOption) (*TotalMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TotalMembers", varargs...)
	ret0, _ := ret[0].(*TotalMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalMembers indicates an expected call of TotalMembers.
func (mr *MockPodiumClientMockRecorder) TotalMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalMembers", reflect.TypeOf((*MockPodiumClient)(nil).TotalMembers), varargs...)
}

// UpsertScore mocks base method.
func (m *MockPodiumClient) UpsertScore(ctx context.Context, in *UpsertScoreRequest, opts ...grpc.CallOption) (*UpsertScoreResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertScore", varargs...)
	ret0, _ := ret[0].(*UpsertScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScore indicates an expected call of UpsertScore.
func (mr *MockPodiumClientMockRecorder) UpsertScore(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScore", reflect.TypeOf((*MockPodiumClient)(nil).UpsertScore), varargs...)
}

// UpsertScoreMultiLeaderboards mocks base method.
func (m *MockPodiumClient) UpsertScoreMultiLeaderboards(ctx context.Context, in *UpsertScoreMultiLeaderboardsRequest, opts ...grpc.CallOption) (*UpsertScoreMultiLeaderboardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertScoreMultiLeaderboards", varargs...)
	ret0, _ := ret[0].(*UpsertScoreMultiLeaderboardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScoreMultiLeaderboards indicates an expected call of UpsertScoreMultiLeaderboards.
func (mr *MockPodiumClientMockRecorder) UpsertScoreMultiLeaderboards(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScoreMultiLeaderboards", reflect.TypeOf((*MockPodiumClient)(nil).UpsertScoreMultiLeaderboards), varargs...)
}

// MockPodiumServer is a mock of PodiumServer interface.
type MockPodiumServer struct {
	ctrl     *gomock.Controller
	recorder *MockPodiumServerMockRecorder
}

// MockPodiumServerMockRecorder is the mock recorder for MockPodiumServer.
type MockPodiumServerMockRecorder struct {
	mock *MockPodiumServer
}

// NewMockPodiumServer creates a new mock instance.
func NewMockPodiumServer(ctrl *gomock.Controller) *MockPodiumServer {
	mock := &MockPodiumServer{ctrl: ctrl}
	mock.recorder = &MockPodiumServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodiumServer) EXPECT() *MockPodiumServerMockRecorder {
	return m.recorder
}

// BulkUpsertScores mocks base method.
func (m *MockPodiumServer) BulkUpsertScores(ctx context.Context, in *BulkUpsertScoresRequest) (*BulkUpsertScoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsertScores", ctx, in)
	ret0, _ := ret[0].(*BulkUpsertScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpsertScores indicates an expected call of BulkUpsertScores.
func (mr *MockPodiumServerMockRecorder) BulkUpsertScores(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsertScores", reflect.TypeOf((*MockPodiumServer)(nil).BulkUpsertScores), ctx, in)
}

// GetAroundMember mocks base method.
func (m *MockPodiumServer) GetAroundMember(ctx context.Context, in *GetAroundMemberRequest) (*GetAroundMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAroundMember", ctx, in)
	ret0, _ := ret[0].(*GetAroundMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAroundMember indicates an expected call of GetAroundMember.
func (mr *MockPodiumServerMockRecorder) GetAroundMember(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAroundMember", reflect.TypeOf((*MockPodiumServer)(nil).GetAroundMember), ctx, in)
}

// GetAroundScore mocks base method.
func (m *MockPodiumServer) GetAroundScore(ctx context.Context, in *GetAroundScoreRequest) (*GetAroundScoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAroundScore", ctx, in)
	ret0, _ := ret[0].(*GetAroundScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAroundScore indicates an expected call of GetAroundScore.
func (mr *MockPodiumServerMockRecorder) GetAroundScore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAroundScore", reflect.TypeOf((*MockPodiumServer)(nil).GetAroundScore), ctx, in)
}

// GetMember mocks base method.
func (m *MockPodiumServer) GetMember(ctx context.Context, in *GetMemberRequest) (*GetMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", ctx, in)
	ret0, _ := ret[0].(*GetMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockPodiumServerMockRecorder) GetMember(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockPodiumServer)(nil).GetMember), ctx, in)
}

// GetMembers mocks base method.
func (m *MockPodiumServer) GetMembers(ctx context.Context, in *GetMembersRequest) (*GetMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", ctx, in)
	ret0, _ := ret[0].(*GetMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockPodiumServerMockRecorder) GetMembers(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockPodiumServer)(nil).GetMembers), ctx, in)
}

// GetRank mocks base method.
func (m *MockPodiumServer) GetRank(ctx context.Context, in *GetRankRequest) (*GetRankResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRank", ctx, in)
	ret0, _ := ret[0].(*GetRankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRank indicates an expected call of GetRank.
func (mr *MockPodiumServerMockRecorder) GetRank(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRank", reflect.TypeOf((*MockPodiumServer)(nil).GetRank), ctx, in)
}

// GetRankMultiLeaderboards mocks base method.
func (m *MockPodiumServer) GetRankMultiLeaderboards(ctx context.Context, in *GetRankMultiLeaderboardsRequest) (*GetRankMultiLeaderboardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRankMultiLeaderboards", ctx, in)
	ret0, _ := ret[0].(*GetRankMultiLeaderboardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRankMultiLeaderboards indicates an expected call of GetRankMultiLeaderboards.
func (mr *MockPodiumServerMockRecorder) GetRankMultiLeaderboards(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankMultiLeaderboards", reflect.TypeOf((*MockPodiumServer)(nil).GetRankMultiLeaderboards), ctx, in)
}

// GetTopMembers mocks base method.
func (m *MockPodiumServer) GetTopMembers(ctx context.Context, in *GetTopMembersRequest) (*GetTopMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopMembers", ctx, in)
	ret0, _ := ret[0].(*GetTopMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopMembers indicates an expected call of GetTopMembers.
func (mr *MockPodiumServerMockRecorder) GetTopMembers(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopMembers", reflect.TypeOf((*MockPodiumServer)(nil).GetTopMembers), ctx, in)
}

// GetTopPercentage mocks base method.
func (m *MockPodiumServer) GetTopPercentage(ctx context.Context, in *GetTopPercentageRequest) (*GetTopPercentageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPercentage", ctx, in)
	ret0, _ := ret[0].(*GetTopPercentageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPercentage indicates an expected call of GetTopPercentage.
func (mr *MockPodiumServerMockRecorder) GetTopPercentage(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPercentage", reflect.TypeOf((*MockPodiumServer)(nil).GetTopPercentage), ctx, in)
}

// HealthCheck mocks base method.
func (m *MockPodiumServer) HealthCheck(ctx context.Context, in *HealthCheckRequest) (*HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx, in)
	ret0, _ := ret[0].(*HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockPodiumServerMockRecorder) HealthCheck(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockPodiumServer)(nil).HealthCheck), ctx, in)
}

// IncrementScore mocks base method.
func (m *MockPodiumServer) IncrementScore(ctx context.Context, in *IncrementScoreRequest) (*IncrementScoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementScore", ctx, in)
	ret0, _ := ret[0].(*IncrementScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementScore indicates an expected call of IncrementScore.
func (mr *MockPodiumServerMockRecorder) IncrementScore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementScore", reflect.TypeOf((*MockPodiumServer)(nil).IncrementScore), ctx, in)
}

// RemoveLeaderboard mocks base method.
func (m *MockPodiumServer) RemoveLeaderboard(ctx context.Context, in *RemoveLeaderboardRequest) (*RemoveLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLeaderboard", ctx, in)
	ret0, _ := ret[0].(*RemoveLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLeaderboard indicates an expected call of RemoveLeaderboard.
func (mr *MockPodiumServerMockRecorder) RemoveLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLeaderboard", reflect.TypeOf((*MockPodiumServer)(nil).RemoveLeaderboard), ctx, in)
}

// RemoveMember mocks base method.
func (m *MockPodiumServer) RemoveMember(ctx context.Context, in *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, in)
	ret0, _ := ret[0].(*RemoveMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockPodiumServerMockRecorder) RemoveMember(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockPodiumServer)(nil).RemoveMember), ctx, in)
}

// RemoveMembers mocks base method.
func (m *MockPodiumServer) RemoveMembers(ctx context.Context, in *RemoveMembersRequest) (*RemoveMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMembers", ctx, in)
	ret0, _ := ret[0].(*RemoveMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMembers indicates an expected call of RemoveMembers.
func (mr *MockPodiumServerMockRecorder) RemoveMembers(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMembers", reflect.TypeOf((*MockPodiumServer)(nil).RemoveMembers), ctx, in)
}

// Status mocks base method.
func (m *MockPodiumServer) Status(ctx context.Context, in *emptypb.Empty) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, in)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockPodiumServerMockRecorder) Status(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockPodiumServer)(nil).Status), ctx, in)
}

// TotalMembers mocks base method.
func (m *MockPodiumServer) TotalMembers(ctx context.Context, in *TotalMembersRequest) (*TotalMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalMembers", ctx, in)
	ret0, _ := ret[0].(*TotalMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalMembers indicates an expected call of TotalMembers.
func (mr *MockPodiumServerMockRecorder) TotalMembers(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalMembers", reflect.TypeOf((*MockPodiumServer)(nil).TotalMembers), ctx, in)
}

// UpsertScore mocks base method.
func (m *MockPodiumServer) UpsertScore(ctx context.Context, in *UpsertScoreRequest) (*UpsertScoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScore", ctx, in)
	ret0, _ := ret[0].(*UpsertScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScore indicates an expected call of UpsertScore.
func (mr *MockPodiumServerMockRecorder) UpsertScore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScore", reflect.TypeOf((*MockPodiumServer)(nil).UpsertScore), ctx, in)
}

// UpsertScoreMultiLeaderboards mocks base method.
func (m *MockPodiumServer) UpsertScoreMultiLeaderboards(ctx context.Context, in *UpsertScoreMultiLeaderboardsRequest) (*UpsertScoreMultiLeaderboardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScoreMultiLeaderboards", ctx, in)
	ret0, _ := ret[0].(*UpsertScoreMultiLeaderboardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScoreMultiLeaderboards indicates an expected call of UpsertScoreMultiLeaderboards.
func (mr *MockPodiumServerMockRecorder) UpsertScoreMultiLeaderboards(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScoreMultiLeaderboards", reflect.TypeOf((*MockPodiumServer)(nil).UpsertScoreMultiLeaderboards), ctx, in)
}
