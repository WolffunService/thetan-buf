// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: proto/BattleEnd.proto

package coreproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BattleEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    string     `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	GameMode   GameMode   `protobuf:"varint,2,opt,name=gameMode,proto3,enum=core.proto.GameMode" json:"gameMode,omitempty"`
	InGameMode InGameMode `protobuf:"varint,3,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
	// battleEndResult :
	IsMvp               bool                   `protobuf:"varint,4,opt,name=isMvp,proto3" json:"isMvp,omitempty"`
	Rank                int32                  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	HasTripleKill       bool                   `protobuf:"varint,6,opt,name=hasTripleKill,proto3" json:"hasTripleKill,omitempty"`
	HasMegaKill         bool                   `protobuf:"varint,7,opt,name=hasMegaKill,proto3" json:"hasMegaKill,omitempty"`
	PlayerBattleEndData []*PlayerBattleEndData `protobuf:"bytes,8,rep,name=playerBattleEndData,proto3" json:"playerBattleEndData,omitempty"`
}

func (x *BattleEndRequest) Reset() {
	*x = BattleEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_BattleEnd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleEndRequest) ProtoMessage() {}

func (x *BattleEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_BattleEnd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleEndRequest.ProtoReflect.Descriptor instead.
func (*BattleEndRequest) Descriptor() ([]byte, []int) {
	return file_proto_BattleEnd_proto_rawDescGZIP(), []int{0}
}

func (x *BattleEndRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *BattleEndRequest) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_RANKED
}

func (x *BattleEndRequest) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

func (x *BattleEndRequest) GetIsMvp() bool {
	if x != nil {
		return x.IsMvp
	}
	return false
}

func (x *BattleEndRequest) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *BattleEndRequest) GetHasTripleKill() bool {
	if x != nil {
		return x.HasTripleKill
	}
	return false
}

func (x *BattleEndRequest) GetHasMegaKill() bool {
	if x != nil {
		return x.HasMegaKill
	}
	return false
}

func (x *BattleEndRequest) GetPlayerBattleEndData() []*PlayerBattleEndData {
	if x != nil {
		return x.PlayerBattleEndData
	}
	return nil
}

type BattleLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId             string                 `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	PlayerId            string                 `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	TimeSubmit          int64                  `protobuf:"varint,3,opt,name=timeSubmit,proto3" json:"timeSubmit,omitempty"`
	OperationSystem     string                 `protobuf:"bytes,4,opt,name=operationSystem,proto3" json:"operationSystem,omitempty"`
	AppVersion          string                 `protobuf:"bytes,5,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	IsPlayAgain         bool                   `protobuf:"varint,6,opt,name=isPlayAgain,proto3" json:"isPlayAgain,omitempty"`
	MapId               int32                  `protobuf:"varint,7,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Team1Score          int32                  `protobuf:"varint,8,opt,name=team1Score,proto3" json:"team1Score,omitempty"`
	Team2Score          int32                  `protobuf:"varint,9,opt,name=team2Score,proto3" json:"team2Score,omitempty"`
	TrophyReward        int32                  `protobuf:"varint,10,opt,name=trophyReward,proto3" json:"trophyReward,omitempty"`
	ThetanCoin          float32                `protobuf:"fixed32,11,opt,name=thetanCoin,proto3" json:"thetanCoin,omitempty"`
	PowerPoint          int32                  `protobuf:"varint,12,opt,name=powerPoint,proto3" json:"powerPoint,omitempty"`
	Exp                 int32                  `protobuf:"varint,13,opt,name=exp,proto3" json:"exp,omitempty"`
	PlayerBattleEndData []*PlayerBattleEndData `protobuf:"bytes,14,rep,name=playerBattleEndData,proto3" json:"playerBattleEndData,omitempty"`
}

func (x *BattleLogMsg) Reset() {
	*x = BattleLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_BattleEnd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleLogMsg) ProtoMessage() {}

func (x *BattleLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_BattleEnd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleLogMsg.ProtoReflect.Descriptor instead.
func (*BattleLogMsg) Descriptor() ([]byte, []int) {
	return file_proto_BattleEnd_proto_rawDescGZIP(), []int{1}
}

func (x *BattleLogMsg) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *BattleLogMsg) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BattleLogMsg) GetTimeSubmit() int64 {
	if x != nil {
		return x.TimeSubmit
	}
	return 0
}

func (x *BattleLogMsg) GetOperationSystem() string {
	if x != nil {
		return x.OperationSystem
	}
	return ""
}

func (x *BattleLogMsg) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *BattleLogMsg) GetIsPlayAgain() bool {
	if x != nil {
		return x.IsPlayAgain
	}
	return false
}

func (x *BattleLogMsg) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *BattleLogMsg) GetTeam1Score() int32 {
	if x != nil {
		return x.Team1Score
	}
	return 0
}

func (x *BattleLogMsg) GetTeam2Score() int32 {
	if x != nil {
		return x.Team2Score
	}
	return 0
}

func (x *BattleLogMsg) GetTrophyReward() int32 {
	if x != nil {
		return x.TrophyReward
	}
	return 0
}

func (x *BattleLogMsg) GetThetanCoin() float32 {
	if x != nil {
		return x.ThetanCoin
	}
	return 0
}

func (x *BattleLogMsg) GetPowerPoint() int32 {
	if x != nil {
		return x.PowerPoint
	}
	return 0
}

func (x *BattleLogMsg) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *BattleLogMsg) GetPlayerBattleEndData() []*PlayerBattleEndData {
	if x != nil {
		return x.PlayerBattleEndData
	}
	return nil
}

type PlayerBattleEndData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId             string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	TeamId               int32  `protobuf:"varint,2,opt,name=teamId,proto3" json:"teamId,omitempty"`
	BattleStatus         int32  `protobuf:"varint,3,opt,name=battleStatus,proto3" json:"battleStatus,omitempty"`
	Score                int32  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Rank                 int32  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	HeroId               string `protobuf:"bytes,6,opt,name=heroId,proto3" json:"heroId,omitempty"`
	HeroTypeId           int32  `protobuf:"varint,7,opt,name=heroTypeId,proto3" json:"heroTypeId,omitempty"`
	Skill1               int32  `protobuf:"varint,8,opt,name=skill1,proto3" json:"skill1,omitempty"`
	Skill2               int32  `protobuf:"varint,9,opt,name=skill2,proto3" json:"skill2,omitempty"`
	Kill                 int32  `protobuf:"varint,10,opt,name=kill,proto3" json:"kill,omitempty"`
	Death                int32  `protobuf:"varint,11,opt,name=death,proto3" json:"death,omitempty"`
	Assist               int32  `protobuf:"varint,12,opt,name=assist,proto3" json:"assist,omitempty"`
	HeroDmgIn            int32  `protobuf:"varint,13,opt,name=heroDmgIn,proto3" json:"heroDmgIn,omitempty"`
	HeroDmgOut           int32  `protobuf:"varint,14,opt,name=heroDmgOut,proto3" json:"heroDmgOut,omitempty"`
	HeroSpeed            int32  `protobuf:"varint,15,opt,name=heroSpeed,proto3" json:"heroSpeed,omitempty"`
	Skill1Dmg            int32  `protobuf:"varint,16,opt,name=skill1Dmg,proto3" json:"skill1Dmg,omitempty"`
	Skill1Use            int32  `protobuf:"varint,17,opt,name=skill1Use,proto3" json:"skill1Use,omitempty"`
	Skill2Dmg            int32  `protobuf:"varint,18,opt,name=skill2Dmg,proto3" json:"skill2Dmg,omitempty"`
	Skill2Use            int32  `protobuf:"varint,19,opt,name=skill2Use,proto3" json:"skill2Use,omitempty"`
	FuryUse              int32  `protobuf:"varint,20,opt,name=furyUse,proto3" json:"furyUse,omitempty"`
	FuryDamage           int32  `protobuf:"varint,21,opt,name=furyDamage,proto3" json:"furyDamage,omitempty"`
	BattleResult         int32  `protobuf:"varint,22,opt,name=battleResult,proto3" json:"battleResult,omitempty"`
	MVP                  bool   `protobuf:"varint,23,opt,name=mVP,proto3" json:"mVP,omitempty"`
	SerialKiller         bool   `protobuf:"varint,24,opt,name=serialKiller,proto3" json:"serialKiller,omitempty"`
	TeamMVP              bool   `protobuf:"varint,25,opt,name=teamMVP,proto3" json:"teamMVP,omitempty"`
	Nanny                bool   `protobuf:"varint,26,opt,name=nanny,proto3" json:"nanny,omitempty"`
	DoubleKill           int32  `protobuf:"varint,27,opt,name=doubleKill,proto3" json:"doubleKill,omitempty"`
	TripleKill           int32  `protobuf:"varint,28,opt,name=tripleKill,proto3" json:"tripleKill,omitempty"`
	MegaKill             int32  `protobuf:"varint,29,opt,name=megaKill,proto3" json:"megaKill,omitempty"`
	BoxDestroyed         int32  `protobuf:"varint,30,opt,name=boxDestroyed,proto3" json:"boxDestroyed,omitempty"`
	GiantBoxDestroyed    int32  `protobuf:"varint,31,opt,name=giantBoxDestroyed,proto3" json:"giantBoxDestroyed,omitempty"`
	DeathMatchScore      int32  `protobuf:"varint,32,opt,name=deathMatchScore,proto3" json:"deathMatchScore,omitempty"`
	DeathMatchMinusScore int32  `protobuf:"varint,33,opt,name=deathMatchMinusScore,proto3" json:"deathMatchMinusScore,omitempty"`
	Star                 int32  `protobuf:"varint,34,opt,name=star,proto3" json:"star,omitempty"`
	KeepingTimeSuperStar int32  `protobuf:"varint,35,opt,name=keepingTimeSuperStar,proto3" json:"keepingTimeSuperStar,omitempty"`
	RobotSummonTime      int32  `protobuf:"varint,36,opt,name=robotSummonTime,proto3" json:"robotSummonTime,omitempty"`
	TowerDamage          int32  `protobuf:"varint,37,opt,name=towerDamage,proto3" json:"towerDamage,omitempty"`
	BatteryPickupTime    int32  `protobuf:"varint,38,opt,name=batteryPickupTime,proto3" json:"batteryPickupTime,omitempty"`
	IsSpecialEvent       bool   `protobuf:"varint,39,opt,name=isSpecialEvent,proto3" json:"isSpecialEvent,omitempty"`
	Brain                string `protobuf:"bytes,40,opt,name=brain,proto3" json:"brain,omitempty"`
	HeroLevelExp         int32  `protobuf:"varint,41,opt,name=HeroLevelExp,proto3" json:"HeroLevelExp,omitempty"`
}

func (x *PlayerBattleEndData) Reset() {
	*x = PlayerBattleEndData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_BattleEnd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBattleEndData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBattleEndData) ProtoMessage() {}

func (x *PlayerBattleEndData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_BattleEnd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBattleEndData.ProtoReflect.Descriptor instead.
func (*PlayerBattleEndData) Descriptor() ([]byte, []int) {
	return file_proto_BattleEnd_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerBattleEndData) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerBattleEndData) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *PlayerBattleEndData) GetBattleStatus() int32 {
	if x != nil {
		return x.BattleStatus
	}
	return 0
}

func (x *PlayerBattleEndData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerBattleEndData) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PlayerBattleEndData) GetHeroId() string {
	if x != nil {
		return x.HeroId
	}
	return ""
}

func (x *PlayerBattleEndData) GetHeroTypeId() int32 {
	if x != nil {
		return x.HeroTypeId
	}
	return 0
}

func (x *PlayerBattleEndData) GetSkill1() int32 {
	if x != nil {
		return x.Skill1
	}
	return 0
}

func (x *PlayerBattleEndData) GetSkill2() int32 {
	if x != nil {
		return x.Skill2
	}
	return 0
}

func (x *PlayerBattleEndData) GetKill() int32 {
	if x != nil {
		return x.Kill
	}
	return 0
}

func (x *PlayerBattleEndData) GetDeath() int32 {
	if x != nil {
		return x.Death
	}
	return 0
}

func (x *PlayerBattleEndData) GetAssist() int32 {
	if x != nil {
		return x.Assist
	}
	return 0
}

func (x *PlayerBattleEndData) GetHeroDmgIn() int32 {
	if x != nil {
		return x.HeroDmgIn
	}
	return 0
}

func (x *PlayerBattleEndData) GetHeroDmgOut() int32 {
	if x != nil {
		return x.HeroDmgOut
	}
	return 0
}

func (x *PlayerBattleEndData) GetHeroSpeed() int32 {
	if x != nil {
		return x.HeroSpeed
	}
	return 0
}

func (x *PlayerBattleEndData) GetSkill1Dmg() int32 {
	if x != nil {
		return x.Skill1Dmg
	}
	return 0
}

func (x *PlayerBattleEndData) GetSkill1Use() int32 {
	if x != nil {
		return x.Skill1Use
	}
	return 0
}

func (x *PlayerBattleEndData) GetSkill2Dmg() int32 {
	if x != nil {
		return x.Skill2Dmg
	}
	return 0
}

func (x *PlayerBattleEndData) GetSkill2Use() int32 {
	if x != nil {
		return x.Skill2Use
	}
	return 0
}

func (x *PlayerBattleEndData) GetFuryUse() int32 {
	if x != nil {
		return x.FuryUse
	}
	return 0
}

func (x *PlayerBattleEndData) GetFuryDamage() int32 {
	if x != nil {
		return x.FuryDamage
	}
	return 0
}

func (x *PlayerBattleEndData) GetBattleResult() int32 {
	if x != nil {
		return x.BattleResult
	}
	return 0
}

func (x *PlayerBattleEndData) GetMVP() bool {
	if x != nil {
		return x.MVP
	}
	return false
}

func (x *PlayerBattleEndData) GetSerialKiller() bool {
	if x != nil {
		return x.SerialKiller
	}
	return false
}

func (x *PlayerBattleEndData) GetTeamMVP() bool {
	if x != nil {
		return x.TeamMVP
	}
	return false
}

func (x *PlayerBattleEndData) GetNanny() bool {
	if x != nil {
		return x.Nanny
	}
	return false
}

func (x *PlayerBattleEndData) GetDoubleKill() int32 {
	if x != nil {
		return x.DoubleKill
	}
	return 0
}

func (x *PlayerBattleEndData) GetTripleKill() int32 {
	if x != nil {
		return x.TripleKill
	}
	return 0
}

func (x *PlayerBattleEndData) GetMegaKill() int32 {
	if x != nil {
		return x.MegaKill
	}
	return 0
}

func (x *PlayerBattleEndData) GetBoxDestroyed() int32 {
	if x != nil {
		return x.BoxDestroyed
	}
	return 0
}

func (x *PlayerBattleEndData) GetGiantBoxDestroyed() int32 {
	if x != nil {
		return x.GiantBoxDestroyed
	}
	return 0
}

func (x *PlayerBattleEndData) GetDeathMatchScore() int32 {
	if x != nil {
		return x.DeathMatchScore
	}
	return 0
}

func (x *PlayerBattleEndData) GetDeathMatchMinusScore() int32 {
	if x != nil {
		return x.DeathMatchMinusScore
	}
	return 0
}

func (x *PlayerBattleEndData) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *PlayerBattleEndData) GetKeepingTimeSuperStar() int32 {
	if x != nil {
		return x.KeepingTimeSuperStar
	}
	return 0
}

func (x *PlayerBattleEndData) GetRobotSummonTime() int32 {
	if x != nil {
		return x.RobotSummonTime
	}
	return 0
}

func (x *PlayerBattleEndData) GetTowerDamage() int32 {
	if x != nil {
		return x.TowerDamage
	}
	return 0
}

func (x *PlayerBattleEndData) GetBatteryPickupTime() int32 {
	if x != nil {
		return x.BatteryPickupTime
	}
	return 0
}

func (x *PlayerBattleEndData) GetIsSpecialEvent() bool {
	if x != nil {
		return x.IsSpecialEvent
	}
	return false
}

func (x *PlayerBattleEndData) GetBrain() string {
	if x != nil {
		return x.Brain
	}
	return ""
}

func (x *PlayerBattleEndData) GetHeroLevelExp() int32 {
	if x != nil {
		return x.HeroLevelExp
	}
	return 0
}

var File_proto_BattleEnd_proto protoreflect.FileDescriptor

var file_proto_BattleEnd_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4d, 0x76, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4d, 0x76, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61,
	0x73, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x67, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x67, 0x61, 0x4b, 0x69,
	0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xef, 0x03, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x41, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x78, 0x70, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x89, 0x0a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x72,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68,
	0x65, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x31, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x65, 0x72, 0x6f, 0x44, 0x6d, 0x67, 0x49, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x68, 0x65, 0x72, 0x6f, 0x44, 0x6d, 0x67, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x72,
	0x6f, 0x44, 0x6d, 0x67, 0x4f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68,
	0x65, 0x72, 0x6f, 0x44, 0x6d, 0x67, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x72,
	0x6f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65,
	0x72, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x31, 0x44, 0x6d, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x31, 0x44, 0x6d, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x55,
	0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31,
	0x55, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x44, 0x6d, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x44, 0x6d,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x55, 0x73, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x55, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x75, 0x72, 0x79, 0x55, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x75, 0x72, 0x79, 0x55, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x72,
	0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x75, 0x72, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x56, 0x50, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x56, 0x50, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x56, 0x50, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x56, 0x50, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x61,
	0x6e, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6c,
	0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4b,
	0x69, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c,
	0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b,
	0x69, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x67, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x67, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x78, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x67, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x45, 0x78, 0x70, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_BattleEnd_proto_rawDescOnce sync.Once
	file_proto_BattleEnd_proto_rawDescData = file_proto_BattleEnd_proto_rawDesc
)

func file_proto_BattleEnd_proto_rawDescGZIP() []byte {
	file_proto_BattleEnd_proto_rawDescOnce.Do(func() {
		file_proto_BattleEnd_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_BattleEnd_proto_rawDescData)
	})
	return file_proto_BattleEnd_proto_rawDescData
}

var file_proto_BattleEnd_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_BattleEnd_proto_goTypes = []interface{}{
	(*BattleEndRequest)(nil),    // 0: core.proto.BattleEndRequest
	(*BattleLogMsg)(nil),        // 1: core.proto.BattleLogMsg
	(*PlayerBattleEndData)(nil), // 2: core.proto.PlayerBattleEndData
	(GameMode)(0),               // 3: core.proto.GameMode
	(InGameMode)(0),             // 4: core.proto.InGameMode
}
var file_proto_BattleEnd_proto_depIdxs = []int32{
	3, // 0: core.proto.BattleEndRequest.gameMode:type_name -> core.proto.GameMode
	4, // 1: core.proto.BattleEndRequest.inGameMode:type_name -> core.proto.InGameMode
	2, // 2: core.proto.BattleEndRequest.playerBattleEndData:type_name -> core.proto.PlayerBattleEndData
	2, // 3: core.proto.BattleLogMsg.playerBattleEndData:type_name -> core.proto.PlayerBattleEndData
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_BattleEnd_proto_init() }
func file_proto_BattleEnd_proto_init() {
	if File_proto_BattleEnd_proto != nil {
		return
	}
	file_proto_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_BattleEnd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_BattleEnd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_BattleEnd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBattleEndData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_BattleEnd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_BattleEnd_proto_goTypes,
		DependencyIndexes: file_proto_BattleEnd_proto_depIdxs,
		MessageInfos:      file_proto_BattleEnd_proto_msgTypes,
	}.Build()
	File_proto_BattleEnd_proto = out.File
	file_proto_BattleEnd_proto_rawDesc = nil
	file_proto_BattleEnd_proto_goTypes = nil
	file_proto_BattleEnd_proto_depIdxs = nil
}
