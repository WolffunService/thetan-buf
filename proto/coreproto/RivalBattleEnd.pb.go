// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: proto/RivalBattleEnd.proto

package coreproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId        int32   `protobuf:"varint,1,opt,name=roundId,proto3" json:"roundId,omitempty"`
	MapId          int32   `protobuf:"varint,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	DifficultLevel int32   `protobuf:"varint,3,opt,name=difficultLevel,proto3" json:"difficultLevel,omitempty"`
	TimeInRound    float64 `protobuf:"fixed64,4,opt,name=timeInRound,proto3" json:"timeInRound,omitempty"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RivalBattleEnd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RivalBattleEnd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_proto_RivalBattleEnd_proto_rawDescGZIP(), []int{0}
}

func (x *RoundInfo) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundInfo) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *RoundInfo) GetDifficultLevel() int32 {
	if x != nil {
		return x.DifficultLevel
	}
	return 0
}

func (x *RoundInfo) GetTimeInRound() float64 {
	if x != nil {
		return x.TimeInRound
	}
	return 0
}

type RivalBattleEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId             string                      `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	GameMode            GameMode                    `protobuf:"varint,2,opt,name=gameMode,proto3,enum=core.proto.GameMode" json:"gameMode,omitempty"`
	InGameMode          InGameMode                  `protobuf:"varint,3,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
	IsMvp               bool                        `protobuf:"varint,4,opt,name=isMvp,proto3" json:"isMvp,omitempty"`
	Rank                int32                       `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	HasTripleKill       bool                        `protobuf:"varint,6,opt,name=hasTripleKill,proto3" json:"hasTripleKill,omitempty"`
	HasMegaKill         bool                        `protobuf:"varint,7,opt,name=hasMegaKill,proto3" json:"hasMegaKill,omitempty"`
	PlayerBattleEndData []*RivalPlayerBattleEndData `protobuf:"bytes,8,rep,name=playerBattleEndData,proto3" json:"playerBattleEndData,omitempty"`
}

func (x *RivalBattleEndRequest) Reset() {
	*x = RivalBattleEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RivalBattleEnd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RivalBattleEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivalBattleEndRequest) ProtoMessage() {}

func (x *RivalBattleEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RivalBattleEnd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivalBattleEndRequest.ProtoReflect.Descriptor instead.
func (*RivalBattleEndRequest) Descriptor() ([]byte, []int) {
	return file_proto_RivalBattleEnd_proto_rawDescGZIP(), []int{1}
}

func (x *RivalBattleEndRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *RivalBattleEndRequest) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_RANKED
}

func (x *RivalBattleEndRequest) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

func (x *RivalBattleEndRequest) GetIsMvp() bool {
	if x != nil {
		return x.IsMvp
	}
	return false
}

func (x *RivalBattleEndRequest) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RivalBattleEndRequest) GetHasTripleKill() bool {
	if x != nil {
		return x.HasTripleKill
	}
	return false
}

func (x *RivalBattleEndRequest) GetHasMegaKill() bool {
	if x != nil {
		return x.HasMegaKill
	}
	return false
}

func (x *RivalBattleEndRequest) GetPlayerBattleEndData() []*RivalPlayerBattleEndData {
	if x != nil {
		return x.PlayerBattleEndData
	}
	return nil
}

type RivalBattleLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId             string                      `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	PlayerId            string                      `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	TimeSubmit          int64                       `protobuf:"varint,3,opt,name=timeSubmit,proto3" json:"timeSubmit,omitempty"`
	OperationSystem     string                      `protobuf:"bytes,4,opt,name=operationSystem,proto3" json:"operationSystem,omitempty"`
	AppVersion          string                      `protobuf:"bytes,5,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	TrophyReward        int32                       `protobuf:"varint,6,opt,name=trophyReward,proto3" json:"trophyReward,omitempty"`
	Exp                 int32                       `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`
	PlayerBattleEndData []*RivalPlayerBattleEndData `protobuf:"bytes,8,rep,name=playerBattleEndData,proto3" json:"playerBattleEndData,omitempty"`
	ListRoundInfo       []*RoundInfo                `protobuf:"bytes,9,rep,name=ListRoundInfo,proto3" json:"ListRoundInfo,omitempty"`
	Country             string                      `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	Battle              int32                       `protobuf:"varint,11,opt,name=battle,proto3" json:"battle,omitempty"`
	TimeInBattle        int64                       `protobuf:"varint,12,opt,name=timeInBattle,proto3" json:"timeInBattle,omitempty"`
	TrophyRank          int32                       `protobuf:"varint,13,opt,name=trophyRank,proto3" json:"trophyRank,omitempty"`
	UserRanking         int32                       `protobuf:"varint,14,opt,name=userRanking,proto3" json:"userRanking,omitempty"`
}

func (x *RivalBattleLogMsg) Reset() {
	*x = RivalBattleLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RivalBattleEnd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RivalBattleLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivalBattleLogMsg) ProtoMessage() {}

func (x *RivalBattleLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RivalBattleEnd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivalBattleLogMsg.ProtoReflect.Descriptor instead.
func (*RivalBattleLogMsg) Descriptor() ([]byte, []int) {
	return file_proto_RivalBattleEnd_proto_rawDescGZIP(), []int{2}
}

func (x *RivalBattleLogMsg) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *RivalBattleLogMsg) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *RivalBattleLogMsg) GetTimeSubmit() int64 {
	if x != nil {
		return x.TimeSubmit
	}
	return 0
}

func (x *RivalBattleLogMsg) GetOperationSystem() string {
	if x != nil {
		return x.OperationSystem
	}
	return ""
}

func (x *RivalBattleLogMsg) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *RivalBattleLogMsg) GetTrophyReward() int32 {
	if x != nil {
		return x.TrophyReward
	}
	return 0
}

func (x *RivalBattleLogMsg) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *RivalBattleLogMsg) GetPlayerBattleEndData() []*RivalPlayerBattleEndData {
	if x != nil {
		return x.PlayerBattleEndData
	}
	return nil
}

func (x *RivalBattleLogMsg) GetListRoundInfo() []*RoundInfo {
	if x != nil {
		return x.ListRoundInfo
	}
	return nil
}

func (x *RivalBattleLogMsg) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RivalBattleLogMsg) GetBattle() int32 {
	if x != nil {
		return x.Battle
	}
	return 0
}

func (x *RivalBattleLogMsg) GetTimeInBattle() int64 {
	if x != nil {
		return x.TimeInBattle
	}
	return 0
}

func (x *RivalBattleLogMsg) GetTrophyRank() int32 {
	if x != nil {
		return x.TrophyRank
	}
	return 0
}

func (x *RivalBattleLogMsg) GetUserRanking() int32 {
	if x != nil {
		return x.UserRanking
	}
	return 0
}

type RivalPlayerBattleEndData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      string              `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	BattleRank    int32               `protobuf:"varint,2,opt,name=battleRank,proto3" json:"battleRank,omitempty"`
	MinionId      string              `protobuf:"bytes,3,opt,name=minionId,proto3" json:"minionId,omitempty"`
	CosmeticUsing *CosmeticUsingProto `protobuf:"bytes,4,opt,name=cosmeticUsing,proto3" json:"cosmeticUsing,omitempty"`
	Brain         int32               `protobuf:"varint,5,opt,name=brain,proto3" json:"brain,omitempty"`
}

func (x *RivalPlayerBattleEndData) Reset() {
	*x = RivalPlayerBattleEndData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RivalBattleEnd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RivalPlayerBattleEndData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivalPlayerBattleEndData) ProtoMessage() {}

func (x *RivalPlayerBattleEndData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RivalBattleEnd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivalPlayerBattleEndData.ProtoReflect.Descriptor instead.
func (*RivalPlayerBattleEndData) Descriptor() ([]byte, []int) {
	return file_proto_RivalBattleEnd_proto_rawDescGZIP(), []int{3}
}

func (x *RivalPlayerBattleEndData) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *RivalPlayerBattleEndData) GetBattleRank() int32 {
	if x != nil {
		return x.BattleRank
	}
	return 0
}

func (x *RivalPlayerBattleEndData) GetMinionId() string {
	if x != nil {
		return x.MinionId
	}
	return ""
}

func (x *RivalPlayerBattleEndData) GetCosmeticUsing() *CosmeticUsingProto {
	if x != nil {
		return x.CosmeticUsing
	}
	return nil
}

func (x *RivalPlayerBattleEndData) GetBrain() int32 {
	if x != nil {
		return x.Brain
	}
	return 0
}

var File_proto_RivalBattleEnd_proto protoreflect.FileDescriptor

var file_proto_RivalBattleEnd_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x85, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4d, 0x76, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x76, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x72, 0x69, 0x70, 0x6c,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x67, 0x61,
	0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4d,
	0x65, 0x67, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x96, 0x04, 0x0a, 0x11, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x6f,
	0x70, 0x68, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x56, 0x0a, 0x13, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x6f, 0x70,
	0x68, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x52, 0x69, 0x76,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_RivalBattleEnd_proto_rawDescOnce sync.Once
	file_proto_RivalBattleEnd_proto_rawDescData = file_proto_RivalBattleEnd_proto_rawDesc
)

func file_proto_RivalBattleEnd_proto_rawDescGZIP() []byte {
	file_proto_RivalBattleEnd_proto_rawDescOnce.Do(func() {
		file_proto_RivalBattleEnd_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_RivalBattleEnd_proto_rawDescData)
	})
	return file_proto_RivalBattleEnd_proto_rawDescData
}

var file_proto_RivalBattleEnd_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_RivalBattleEnd_proto_goTypes = []interface{}{
	(*RoundInfo)(nil),                // 0: core.proto.RoundInfo
	(*RivalBattleEndRequest)(nil),    // 1: core.proto.RivalBattleEndRequest
	(*RivalBattleLogMsg)(nil),        // 2: core.proto.RivalBattleLogMsg
	(*RivalPlayerBattleEndData)(nil), // 3: core.proto.RivalPlayerBattleEndData
	(GameMode)(0),                    // 4: core.proto.GameMode
	(InGameMode)(0),                  // 5: core.proto.InGameMode
	(*CosmeticUsingProto)(nil),       // 6: core.proto.CosmeticUsingProto
}
var file_proto_RivalBattleEnd_proto_depIdxs = []int32{
	4, // 0: core.proto.RivalBattleEndRequest.gameMode:type_name -> core.proto.GameMode
	5, // 1: core.proto.RivalBattleEndRequest.inGameMode:type_name -> core.proto.InGameMode
	3, // 2: core.proto.RivalBattleEndRequest.playerBattleEndData:type_name -> core.proto.RivalPlayerBattleEndData
	3, // 3: core.proto.RivalBattleLogMsg.playerBattleEndData:type_name -> core.proto.RivalPlayerBattleEndData
	0, // 4: core.proto.RivalBattleLogMsg.ListRoundInfo:type_name -> core.proto.RoundInfo
	6, // 5: core.proto.RivalPlayerBattleEndData.cosmeticUsing:type_name -> core.proto.CosmeticUsingProto
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_RivalBattleEnd_proto_init() }
func file_proto_RivalBattleEnd_proto_init() {
	if File_proto_RivalBattleEnd_proto != nil {
		return
	}
	file_proto_Common_proto_init()
	file_proto_Match_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_RivalBattleEnd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RivalBattleEnd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RivalBattleEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RivalBattleEnd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RivalBattleLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RivalBattleEnd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RivalPlayerBattleEndData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_RivalBattleEnd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_RivalBattleEnd_proto_goTypes,
		DependencyIndexes: file_proto_RivalBattleEnd_proto_depIdxs,
		MessageInfos:      file_proto_RivalBattleEnd_proto_msgTypes,
	}.Build()
	File_proto_RivalBattleEnd_proto = out.File
	file_proto_RivalBattleEnd_proto_rawDesc = nil
	file_proto_RivalBattleEnd_proto_goTypes = nil
	file_proto_RivalBattleEnd_proto_depIdxs = nil
}
