syntax = "proto3";

package thetan.shared.v1;

import "thetan/shared/v1/game_info.proto";
import "thetan/shared/v1/customized.proto";

option go_package = "thetan-buf/gen/go/thetan/shared/v1;thetan_shared_v1";
option csharp_namespace = "Thetan.Shared.V1";


enum MatchErrorCode {
  M_SUCCESS = 0;
  M_ERROR = 99;
  CANNOT_CANCEL_WHEN_NOT_MATCHING = 1;
  ALREADY_MATCHING = 2;
  CANNOT_CANCEL_BECAUSE_MATCH_FOUND = 3;
  MATCH_INVALID = 4;//match khong ton tai
  MATCH_ALREADY_STARTED = 5;
  MATCH_ALREADY_END = 7;
  FIND_MATCH_TIME_OUT = 8;
  FIND_MATCH_PARTY_ERROR = 9;
  REAL_CANCEL_MATCH_SUCCESS = 100;
  USER_HAVE_BEEN_BANNED_FOREVER = 121;
  USER_HAVE_BEEN_BANNED_FINDMATCH = 122;
  HERO_IS_ON_MARKET_PLACE = 123;
  ONE_OF_THE_PLAYERS_DID_NOT_SENT_REQUEST = 124;
  ACCOUNT_IS_CURRENTLY_ONLINE_ON_ANOTHER_DEVICE = 125;
  HERO_NOT_OWNER = 3010;
  HERO_NOT_AVAILABLE = 3011;
  WRONG_HERO_MODEL = 3022;
  HERO_RENTED_ITEM = 3120;
  HERO_IS_FOR_RENT = 3124;
  HERO_MAX_BATTLE_RENTED = 3125;
  HERO_RETURNING_OWNER = 3127;
}

message TicketData {
  string playerId = 1;
  GameMode gameMode = 2;
  InGameMode inGameMode = 3;
  string eventId = 4;
  repeated PlayerInfoMatchProto players = 5;
  repeated int32 regions = 6;
  string partyId = 7;
  string ticketId = 8;
  int64 createTime = 9;
  int32 group = 10;
  TournamentInfo tournamentInfo = 11;
}

message TournamentInfo {
  string tournamentID = 1;
  string tournamentTag = 2;
  bool enableSpectator = 3;
  repeated MapDataProto maps = 4;
  int32 maxPlayers = 5;
  int32 maxDurationInMatch = 6;
}

//message MmfTicketData {
//    int32 CountPlayer = 1;
//    repeated int32 Regions = 2;
//}

message MatchMakingRequestProto
{
  string playerId = 4;
  string partyId = 5;
  GameMode gameMode = 1;
  InGameMode inGameMode = 2;
  int32 trophies = 3;
  repeated int32 regions = 6;
  repeated PlayerInfoMatchProto players = 7;
  bool isPlayAgain = 8;
}


message MatchMakingDataPlayAgain {
  repeated PlayerInfoMatchProto players = 1;
}

//khi play again xong thi gui data cho cac thang con lai biet
message DataPlayAgainSuccess {
  string ticketId = 1;
  int32 trophyMatching = 2;
  repeated string players = 3;
  InGameMode inGameMode = 4;
}

message MatchFoundResponseProto {
  string matchId = 1;
  string matchVersion = 9;
  repeated PlayerInfoMatchProto players = 2;
  GameMode gameMode = 3;
  InGameMode inGameMode = 4;
  int32 bestRegion = 5;
  repeated MapDataProto mapIds = 6;
  repeated int32 ListMaxPlayerPerRound = 7;
  PlayerStat playerStat = 8;
  bool isOnline = 10;
  bool enableSpectator = 11;
  repeated SkillInfo skills = 12;
}

message SkillInfo {
  int32 skillID = 1;
  SkillTypeEnum skillType = 2;
  int32 level = 3;
}

enum SkillTypeEnum {
  SKILLTYPE_NONE = 0;
  SKILLTYPE_ATTACK = 1;
  SKILLTYPE_SUPPORT = 2;
}

message PlayerStat {
  int32 roundScoreAll = 1;
  float raceScoreAll = 2;
  int32 qualifyScoreAll = 3;
  float playerScore = 4;
}

message MapDataProto {
  int32 mapId = 1;
  MapDifficultyEnum mapDifficulty = 2;
}

enum MapDifficultyEnum {
  None = 0;
  Easy = 1;
  Medium = 2;
  Hard = 3;
}

message MatchDataBattleLogProto {
  int32 timeEndGame = 1;
  repeated PlayerInfoEndMatchProto players = 2;
}

message MatchStartRequestProto {
  int32 bestRegion = 1;
}

message MatchEndRequestProto {
  string matchId = 1;
  repeated PlayerInfoEndMatchProto players = 2;
}

message PlayerInfoEndMatchProto {
  string playerId = 1;
  int32 teamId = 2;
  bool hasSuperStar = 3;
  bool isBot = 4;
  int32 score = 5;
  int32 rank = 6;
  repeated int32 collections = 7;//MVP - team MVP

  //for battle log
  int32 hero = 8;
  int32 skill1 = 9;
  int32 skill2 = 10;
  int32 skin = 11;
  string playerName = 12;
}

message MatchDataResponseProto {
  string matchId = 1;
  oneof dataMatch {
    MatchDataBattleLogProto battleLog = 2;
    MatchDataReconnect dataReconnect = 3;
    bool matchNotStart = 4;
  }
  GameMode gameMode = 5;
  InGameMode inGameMode = 6;
}

message MatchDataReconnect {
  int32 timeStart = 1;
  int32 region = 2;
}

message PlayerInfoMatchProto {
  // heroId
  string playerId = 1;
  string partyId = 2;
  int32 heroTypeId = 3;
  int32 skill1 = 4;
  int32 skill2 = 5;
  int32 skin = 6;
  int32 trophies = 7;
  int32 heroLevel = 8;
  int32 skill1Level = 9;
  int32 skill2Level = 10;
  repeated int32 regions = 11;
  string playerName = 12;
  int32 avatarId = 13;
  int32 frameId = 14;
  string guildId = 15;
  string heroId = 16;
  bool isSpecialEvent = 17;
  int32 behaviorPoint = 18;
  int32 trophyMatching = 19;
  int32 brainType = 20;
  int32 teamID = 21;
  int32 battleCount = 22;
  CosmeticUsingProto cosmeticUsing = 23 [deprecated=true];
  int32 NameColorId = 24;
  double PlayerScore = 25;
  repeated int32 MapIDs = 26;
  int32 rank = 27;
  CosmeticUsingProtoV2 cosmeticUsingV2 = 28;
  map<string, int32> roundPlayed = 29;
  Customized customized = 30;
}

message CosmeticUsingProto
{
  option deprecated = true;
  int32 backBling = 1;
  int32 dance = 2;
  int32 flyCraft = 3;
  int32 footprint = 4;
  int32 glow = 5;
  int32 spray = 6;
  int32 voice = 7;
  int32 vehicle = 8;
}

//khi delete ticket thanh cong
//se goi len MatchChannel de get party hoac player va send
message DeleteTicketSuccess {
  string playerId = 1;
  string ticketId = 2;
  string partyId = 3; // dung de broadcast party
}

//message dung chung
message MatchProtoPackage {
  string playerId = 1;
  string partyId = 5;
  oneof res {
    bytes data = 2;
    ListErrorPlayer listErrorPlayer = 3;
    int32 errorCode = 4;
  }
}

message TicketDataCache {
  InGameMode inGameMode = 1;
  int32 trophies = 2;
  repeated string playerIds = 3;
  string ticketId = 4;
}
message TicketCacheWSOnly {
  string ticketID = 1;
  int32 inGameMode = 2;
}


message ListErrorPlayer {
  message ErrorPlayer {
    string userId = 1;
    MatchErrorCode matchErrorCode = 2;
  }
  repeated ErrorPlayer errorPlayers = 1;
}

message MatchProtoVersionPackage {
  string playerId = 1;
  oneof res {
    bytes data = 2;//data nay la proto khac
    int32 errorCode = 3;//neu khac 0 tuc la co loi. luc nay khong parse cai data nua
  }
  int32 version = 4;
}

message CancelMatchRequest {
  // A Ticket object with SearchFields defined.
  string playerId = 1;
  string ticketId = 2;
  int32 trophy = 3;
  int32 inGameMode = 4;
}

message MatchExtension {
  int32 minTrophies = 1;
  int32 maxTrophies = 2;
  int32 minPlayers = 3;
  int32 maxPlayers = 4;
  int32 maxTeam = 5;
  int32 countPlayers = 6;
  int32 numBot = 7;
  int32 playerPerTeam = 8;
  int64 matchFoundTimestamp = 9;
}

// FE call request match
service MatchService {
  rpc CreateMatchWithVersion(MatchProtoVersionPackage) returns (stream MatchProtoPackage) {}
  //register de nhan su kien match found
  rpc RegisterMatchFound(MatchProtoPackage) returns (stream MatchProtoPackage) {}

  rpc CancelMatchMaking(MatchProtoPackage) returns (MatchProtoPackage) {}
}

service MatchHandleService {
  rpc HandlePlayAgain(DataPlayAgainSuccess) returns(EmptyResponse) {}
  rpc HandleDeleteTicket(DeleteTicketSuccess) returns(EmptyResponse) {}
}

message EmptyResponse {
  int32 errorCode = 1;
}

message BotsResponse
{
  int32 errorCode = 1;
  repeated PlayerInfoMatchProto bots = 2;
}

message GetBotsRequest
{
  int32 gameId = 1;
  bool isNewbie = 2;
  int32 numbers = 3;
  int32 trophyRank = 4;
  int32 region = 5;
  int32 battle = 6;
}

message CosmeticUsingProtoV2
{
  map<string, int64> cosmeticInUsed = 1;
  map<string, Customized> customized = 2;
}

message CreateMatchOnboardRequest {
  string userID = 1;

  optional RoundStat lastRound = 2;

  string operationSystem = 3;
  string appVersion = 4;
}

message RoundStat {
  int32 roundId = 1;
  int32 mapId = 2;
  int32 mapDifficulty = 3;
  float timeInRound = 4;
  bool  roundComplete = 5;

  int32 controlDoubleJump = 6;
  int32 controlMoveCamera = 7;
  int32 passedCP = 8;
  int32 maxCP = 9;
  int32 Death = 10;
}
