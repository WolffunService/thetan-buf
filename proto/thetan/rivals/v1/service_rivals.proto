syntax = "proto3";

package thetan.rivals.v1;

import "thetan/shared/v1/match.proto";
import "thetan/shared/v1/customized.proto";
import "google/protobuf/empty.proto";

option go_package = "thetan-buf/gen/go/thetan/rivals/v1;thetan_rivals_v1";
option csharp_namespace = "Thetan.Rivals.V1";

service ThetanRivalService {
  // Profile
  rpc GetUserProfile (UserProfileRequest) returns (UserProfileResponse) {}
  rpc GetProfile(ProfileRequest) returns (ProfileResponse) {}
  rpc TrackFriendlyAct(FriendlyActRequest) returns (google.protobuf.Empty) {}

  // Minions
  rpc GetUserMinions(UserMinionsRequest) returns (UserMinionsResponse) {}
  rpc GetUserSelectedMinion (UserSelectedMinionRequest) returns (UserSelectedMinionResponse) {}
  rpc GetMinion(MinionRequest) returns (MinionResponse) {}
  rpc CreateMinion(CreateMinionRequest) returns (CreateMinionResponse) {}

  // Cosmetics
  rpc GetAddInsByUserID(GetAddInsByUserIDRequest) returns (GetAddInsByUserIDResponse) {}
  rpc GetAddInByID(GetAddInByIDRequest) returns (GetAddInByIDResponse) {}
  rpc CreateAddIn(CreateAddInRequest) returns (CreateAddInResponse) {}

  // Friends
  rpc GetListFriends(GetUserFriendRequest) returns (GetUserFriendResponse) {}
  rpc GetMatchInfoOnboarding(GetMatchInfoRequest) returns (GetMatchInfoResponse) {}

  // Lobby
  rpc GetLatestLobbyActivityInfo(GetActivityRequest) returns (GetActivityResponse) {}
  rpc GetTownUser(GetTownUserRequest) returns (LobbyTown) {}
  rpc GetTownByID(GetTownRequest) returns (LobbyTown) {}

  // Track Action
  rpc TrackSession(TrackSessionRequest) returns (TrackSessionResponse) {}
  rpc TrackSessionLobby(TrackSessionLobbyRequest) returns (google.protobuf.Empty) {}

  // GetFindMatchInfo
  rpc GetFindMatchInfo(FindMatchInfoRequest) returns (FindMatchInfoResponse) {}

  // Get config for bot
  rpc GetConfigForBot(GetConfigForBotRequest) returns (GetConfigForBotResponse) {}

  // Tournament
  rpc GetActiveTournaments(GetActiveTournamentsRequest) returns (GetActiveTournamentsResponse) {}
  rpc GetFindMatchInfoForTournament(FindMatchInfoForTournamentRequest) returns (FindMatchInfoForTournamentResponse) {}
  rpc MatchFoundTournament(MatchFoundTournamentRequest) returns (MatchFoundTournamentResponse) {}

  // Design contest
  rpc PublishDesign(PublishDesignRequest) returns (PublishDesignResponse) {}
  rpc GetContestDesigns(GetContestDesignsRequest) returns (GetContestDesignsResponse) {}
}

message MatchFoundTournamentRequest {
  string tournamentID = 1;
  repeated string playerIDs = 2;
  string matchID = 3;
}

message MatchFoundTournamentResponse {
}

message FindMatchInfoForTournamentRequest {
  string tournamentID = 1;
  repeated string playerIDs = 2;
}

message FindMatchInfoForTournamentResponse {
  FindMatchInfoResponse findMatchInfo = 1;
  string tournamentTag = 2;
}

message GetConfigForBotResponse {
  repeated SkinInfo listSkinInfo = 1;
  repeated CosmeticInfo listCosmeticInfo = 2;
  repeated string cosmeticTypeEvolveSequence = 3;
}

message SkinInfo {
  int32 skinID = 1;
  int32 skinRarity = 2;
}

message CosmeticInfo {
  int32 cosmeticID = 1;
  string cosmeticType = 2;
  int32 cosmeticRarity = 3;
}

message GetConfigForBotRequest {
}

message GetActiveTournamentsRequest {
}

message GetActiveTournamentsResponse {
  repeated TournamentInfo Tournaments = 1;
}

message TournamentInfo {
  string tournamentID = 1;
  string tag = 2;
  repeated MapInfo currentMaps = 3;
  int32 maxPlayersInBattle = 4;
  int32 maxTimeInBattleSec = 5;
}

message MapInfo {
  int32 mapID = 1;
  int32 mapDifficulty = 2;
}

// ==== PROFILE ====

message UserProfileRequest {
  string userId = 1;
  bool withRanking = 2;
}

message UserProfileResponse {
  string id = 1;
  string nickname = 2;
  int32 avatar = 3;
  int32 avatarFrame = 4;
  int32 nameColor = 7;
  string country = 5;
  UserProfileRank rank = 6;
}

message UserProfileRank {
  int32 trophies = 1;
  int32 rankLevel = 2;
}

message FriendlyActRequest {
  enum FriendlyActEnum {
    None = 0;
    Hug = 1;
    Talk = 2;
    GameInParty = 3;
  } 
  string userID = 1;
  FriendlyActEnum type = 2;
}

// ==== MINIONS ====

message UserSelectedMinionRequest {
  string userId = 1;
}

message UserSelectedMinionResponse {
  string id = 1;
  string userId = 2;
  int32 type = 3;
  int32 skin = 4;
  bool nft = 5;
  int32 level = 6;
  map<string, int64> addIns = 7;
  thetan.shared.v1.Customized customized = 10;
  int64 updatedAt = 8;
  int64 createdAt = 9;
}

message UserMinionsRequest {
  string userId = 1;
  optional int32 gameType = 2;
}

message UserMinionsResponse {
  repeated Minion minions = 1;
}

message Minion {
  string id = 1;
  string userId = 2;
  int32 type = 3;
  int32 skin = 4;
  bool nft = 5;
  int32 level = 6;
  map<string, int64> addIns = 7;
  thetan.shared.v1.Customized customized = 10;
  int64 updatedAt = 8;
  int64 createdAt = 9;
}

message MinionRequest {
  string minionID = 1;
}

message MinionResponse {
  Minion minion = 1;
}

message CreateMinionRequest {
  string userId = 1;
  int32 skinId = 2;
  int32 gameType = 3;
  int32 changeSource = 4;
}

message CreateMinionResponse {
  Minion minion = 1;
}

// ==== COSMETICS ====

message AddIn {
  string id = 1;
  string userID = 2;
  int32 addInID = 3;
  string addInType = 4;
  string usedByMinionID = 5;
  bool nft = 6;
  int32 status = 7;
  string tokenID = 8;
  int64 updatedAt = 9;
  int64 createdAt = 10;
  thetan.shared.v1.Customized customized = 11;
}

message GetAddInsByUserIDRequest {
  string userID = 1;
}

message GetAddInsByUserIDResponse {
  repeated AddIn addIns = 1;
}

message GetAddInByIDRequest {
  string addInID = 1;
}

message GetAddInByIDResponse {
  AddIn addIn = 1;
}

message CreateAddInRequest {
  string userID = 1;
  int32 addInID = 2;
  int32 sourceGame = 3;
  int32 sourceFeature = 4;
}

message CreateAddInResponse {
  AddIn addIn = 1;
}

// ==== FRIENDS ====

message GetUserFriendRequest {
  string userId = 1;
}

message GetUserFriendResponse {
  repeated FriendInfo friends = 1;
}

message FriendInfo {
  enum FRIEND_STATUS {
    REQUESTED = 0;
    REQUESTING = 1;
    CONFIRMED = 2;
  }

  string friendId = 1;
  FRIEND_STATUS status = 2;
  UserProfileResponse profile = 3;
  int64 requestedAt = 4;
}

// ==== Onboarding ====

message GetMatchInfoRequest {
  string userID = 1;

  optional thetan.shared.v1.RoundStat lastRound = 2;

  string operationSystem = 3;
  string appVersion = 4;
}

message GetMatchInfoResponse {
  optional thetan.shared.v1.PlayerInfoMatchProto playerInfo = 1;
  string matchID = 2;
  repeated MapData mapIds = 4;
  repeated int32 listMaxPlayerPerRound = 5;
  PlayerStat playerStat = 6;
}

message MapData {
  int32 gamePlay = 1;
  int32 mapId = 2;
  int32 mapDifficulty = 3;
}

message PlayerStat {
  int32 roundScoreAll = 1;
  float raceScoreAll = 2;
  int32 qualifyScoreAll = 3;
  float playerScore = 4;
  map<string, int32> roundPlayed = 5;
}

// =========Lobby================
message GetActivityRequest {
  string townID = 1;
}

message GetActivityResponse {
  string activityID = 1;
  string townID = 2;
  string createTime = 4;
  repeated ClassInfo classes = 3;
}

message ClassInfo {
  int32 classID = 1;
  string className = 2;
  int32 level = 3;
  int32 dailyActivityLimit = 4;
  int32 memberPerClass = 5;
  double timePerClass = 6;
  double classPerMasterL = 7;
  string timeCloseEntry = 9;
  map<int32,SimpleItem> rewards = 8;
}

message SimpleItem {
  int32 kind = 1;
  int32 type = 2;
  int64 amount = 3;
  int32 decimals = 4;
}

message GetTownUserRequest {
  string userID = 1;
  int32 userLanguage = 2;
  int32 userAge = 3;
}

message LobbyTown {
  string townID = 1;

  string townName = 2;
  string description = 3;
  int64 activeTime = 4;

  string townCountry = 5;
  int32 townTime = 6;

  int32 townLanguage = 7;
  double townScore = 8;

  repeated LotInfo lots = 9;
}

message LotInfo {
  int32 lotID = 1;
  GuildInfo guildRent = 2;
  int64 rentExpired = 3;
}

message GuildInfo {
  string id = 1;
  string guildName = 2;
  string guildMotto = 3;
  int32 icon = 4;
  int32 guildType = 5;
  int32 requiredTrophy = 6;
  map<uint32, DecoInfo> selectedDeco = 7;
}

message DecoInfo {
  string id = 1;
  uint32 decoID = 2;
  thetan.shared.v1.Customized customized = 3;
}

message GetTownRequest {
  string townID = 2;
}

// ========== TrackActionRequest ==========

message TrackSessionRequest {
  string userID = 1;
  string action = 2;
  string sessionID = 3;
}

message TrackSessionResponse {
}

// ============== GetFindMatchInfo ==============

message FindMatchInfoRequest {
  repeated string playersID = 1;
}

message FindMatchInfoResponse {
  repeated thetan.shared.v1.PlayerInfoMatchProto players = 1;
}

enum SessionLobby {
  SessionLobbyNone = 0;
  JoinLobby = 1;
  LeaveLobby = 2;
}

message TrackSessionLobbyRequest {
  string userID = 1;
  SessionLobby status = 2;
}

message ProfileRequest {
  repeated string userIds = 1;
}

message ProfileResponse {
  repeated Profile profiles = 1;
}

message Profile {
  int32 minion = 1;
  int32 battle = 2;
  int32 victory = 3;
  int32 streak = 4;
  int32 curStreak = 5;
  int32 winRound = 6;
}

// ============== Design Contest ==============

message PublishDesignRequest {
  string userID = 1;
  string contestID = 2;
  thetan.shared.v1.Item design = 3;
}

message PublishDesignResponse {
}

message GetContestDesignsRequest {
  string userID = 1;
}

message GetContestDesignsResponse {
  map<string, thetan.shared.v1.Item> designs = 1;
}