syntax = "proto3";

package thetan.multiplayer.v1;
import "thetan/shared/v1/game_info.proto";

option go_package = "thetan-buf/gen/go/thetan/multiplayer/v1;thetan_multiplayer_v1";
option csharp_namespace = "Thetan.Multiplayer.V1";

//full info
message PlayerProto {
  PlayerInfoProto playerInfo = 1;
  FriendsProto friends = 2;
  string lobbyID = 3;
}

message FriendsProto {
  repeated PlayerInfoProto friends =1;
}

//request message proto with ID : playerID, partyID, room ID... only need ID
message IDProto {
  string ID = 1;
}

//PartyStatus P
enum PartyStatus {
  PPending = 0;
  PFinding = 1;
  PInBattle = 2;
}

//Party Status khi share len chat PA_
enum PartyAvailabilityStatus {
  PAUnknown = 0;
  PAExpired = 1;
  PADisbanded = 2;//khi khong con ai trong party nay
  PAOpen = 3;//duoc phep join party nay
  PAFull = 4;//party da day du nguoi, khong join duoc nua
  PAInBattle = 5;//da bat dau tran dau
  PAJoined = 6;
}


message PartyInfoProto {
  string partyID = 1;
  uint32 partySize = 2;
  string hostID = 3;
  map<string, PlayerInfoProto> members = 4;
  PartyStatus status = 5;
  int64 findmatchVersion = 6;
  thetan.shared.v1.InGameMode inGameMode = 7;

  // tùy từng game mà cục nay có thể khác nhau
  bytes gameData = 99;
}


message SimplifyPartyInfo{
  string partyID = 1;
  uint32 currentMembers = 2;//size
  uint32 partySize = 3;


  bytes gameData = 99;
}

message PlayerInfoProto {
  string playerID = 1;
  string playerName = 2;
  string county = 3;
  int32 avatar = 4;
  int32 frame = 5;
  int32 nameColor = 6;
  PlayerStatus status = 7;
  int64 lastOnline = 8;
  int32 rankingLevel = 9;
  int32 trophy = 10;
  // tùy từng game mà cục nay có thể khác nhau
  bytes gameData = 99;
}

enum ChannelChatRoom{
  Lobby = 0;
  Party = 1;
  Country = 2;
  Private = 3;

}

message RequestChatMessageProto{
  string message = 1;
  ChannelChatRoom channel = 2;
}

//response data
message ResponseChatMessageProto{
  PlayerInfoProto sender = 1;
  string message = 2 [deprecated = true];
  int64 timestamp = 3;
  ChannelChatRoom channel = 4;
  MsgType msgType = 5[deprecated = true];

  oneof messageData {
    string msgString = 6;
    SharePartyInfo sharePartyInfo = 7;
    int32 emoteId = 8;
    int32 promptId = 9;
  }
}

message SharePartyInfo {
  string partyID =1;
  PartyAvailabilityStatus status = 2;
  bool isShare = 3; //msg share or update status
  //
}


message RequestLoadChatMessageProto{
  ChannelChatRoom channel = 1;
}

message ResponseAllChatMessageProto{
  repeated ResponseChatMessageProto msgs = 1;
}

enum MsgType{
  Chat = 0;
  ShareParty = 1;
}

enum PlayerStatus {
  Online = 0;
  Offline = 1;

  //-- status in game
  // -- currently part of a party within the game
  InParty = 2;

  //signaled they were ready to join the battle
  Ready = 3;

  //currently searching for other players
  Finding = 4;

  //battling
  InBattle = 5;
  //...
}

message SetInGameModeMsg{
  thetan.shared.v1.InGameMode inGameMode = 1;
}

message OtherSetInGameModeMsg{
  string playerID = 1;
  thetan.shared.v1.InGameMode inGameMode = 2;
}

message ReadyMsg{
  bool isReady = 1;//ready or cancel ready
  string tournamentID = 2; // use for tournament find match
  repeated int32 regions = 3;
}

message SetDNDMsg {
  bool isDnd = 1;//enable or disable
}

message SomeoneLeftMsg {
  string playerID = 1;
  string newHostID = 2;//maybe empty if nothing changes
}

// --- PARTY INVITATION MSG ---

message SendInvitationMsg
{
  string playerId = 1;
  InvitationAction action = 2;
}

//    Nhận message invite từ party nao do
message ReceiveInvitationMsg
{
  PlayerInfoProto inviter = 1;
  SimplifyPartyInfo partyInfo = 2; // gồm partyID, và 1 số data theo tùy loại game để hiển thị UI như game mode gì, chế độ gì, số lượng bao nhiêu ,…)
}

message ReplyInvitationMsg
{
  ReceiveInvitationMsg msg = 1; //(gưi lại data lúc nhận, ở phía trên)
  InvitationAction action = 2;
}

message ReceiveReplyInviteMsg
{
  string playerId = 1;
  InvitationAction action = 2;
}


//enum defines the possible actions that can be taken in response to an invitation
enum InvitationAction {
  //accept invitation
  Accept = 0;

  //Decline invitation
  Cancel = 1;

  //Decline and block with timeout
  Decline = 2;

  // Gui Invite cho thang khac
  Invite = 3;

}

message OtherChangeStatusMsg
{
  string playerID = 1;
  PlayerStatus newStatus = 2;
}

message ReceiveMsgKick {
  string playerID = 1;
}


message RequestPlayAgain {
  StageInGame stage = 1;
}

message RequestCancelPlayAgain {
  StageInGame stage = 1;
}

message OnOtherPlayAgain {
  string playerID = 1;
  StageInGame stage = 2;
}

message OnOtherCancelPlayAgain {
  string playerID = 1;
  StageInGame stage = 2;
}


enum StageInGame {
  //in spectator_view
  Spectator = 0;

  //in battle_end_reward_view
  EndBattle = 1;
}

message OnSbCancelFindMatch {
  string CancellerID = 1;
}

message ReqChangeGameInfo {
  bytes gameData = 1;
}

message ResOtherChangeInfo {
  PlayerInfoProto playerInfo = 1;
}

message OnOtherReady{
  string playerID = 1;
  bool ready = 2;
}

message TicketCacheWSOnly {
  string ticketID = 1;
  int32 inGameMode = 2;
}
