// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: proto/service_rivals_ws.proto

package srvrivals_ws

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThetanRivalWsServiceClient is the client API for ThetanRivalWsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanRivalWsServiceClient interface {
	GetTownCCU(ctx context.Context, in *GetTownCCURequest, opts ...grpc.CallOption) (*GetTownCCURessponse, error)
}

type thetanRivalWsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanRivalWsServiceClient(cc grpc.ClientConnInterface) ThetanRivalWsServiceClient {
	return &thetanRivalWsServiceClient{cc}
}

func (c *thetanRivalWsServiceClient) GetTownCCU(ctx context.Context, in *GetTownCCURequest, opts ...grpc.CallOption) (*GetTownCCURessponse, error) {
	out := new(GetTownCCURessponse)
	err := c.cc.Invoke(ctx, "/services.ThetanRivalWsService/GetTownCCU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanRivalWsServiceServer is the server API for ThetanRivalWsService service.
// All implementations must embed UnimplementedThetanRivalWsServiceServer
// for forward compatibility
type ThetanRivalWsServiceServer interface {
	GetTownCCU(context.Context, *GetTownCCURequest) (*GetTownCCURessponse, error)
	mustEmbedUnimplementedThetanRivalWsServiceServer()
}

// UnimplementedThetanRivalWsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThetanRivalWsServiceServer struct {
}

func (UnimplementedThetanRivalWsServiceServer) GetTownCCU(context.Context, *GetTownCCURequest) (*GetTownCCURessponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTownCCU not implemented")
}
func (UnimplementedThetanRivalWsServiceServer) mustEmbedUnimplementedThetanRivalWsServiceServer() {}

// UnsafeThetanRivalWsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanRivalWsServiceServer will
// result in compilation errors.
type UnsafeThetanRivalWsServiceServer interface {
	mustEmbedUnimplementedThetanRivalWsServiceServer()
}

func RegisterThetanRivalWsServiceServer(s grpc.ServiceRegistrar, srv ThetanRivalWsServiceServer) {
	s.RegisterService(&ThetanRivalWsService_ServiceDesc, srv)
}

func _ThetanRivalWsService_GetTownCCU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTownCCURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalWsServiceServer).GetTownCCU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ThetanRivalWsService/GetTownCCU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalWsServiceServer).GetTownCCU(ctx, req.(*GetTownCCURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanRivalWsService_ServiceDesc is the grpc.ServiceDesc for ThetanRivalWsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanRivalWsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ThetanRivalWsService",
	HandlerType: (*ThetanRivalWsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTownCCU",
			Handler:    _ThetanRivalWsService_GetTownCCU_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service_rivals_ws.proto",
}
