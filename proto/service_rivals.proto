syntax = "proto3";

package services;

option go_package = "./srvrivals";

service ThetanRivalService {
  // Profile
  rpc GetUserProfile (UserProfileRequest) returns (UserProfileResponse) {}

  // Minions
  rpc GetUserMinions(UserMinionsRequest) returns (UserMinionsResponse) {}
  rpc GetUserSelectedMinion (UserSelectedMinionRequest) returns (UserSelectedMinionResponse) {}
  rpc GetMinion(MinionRequest) returns (MinionResponse) {}
  rpc CreateMinion(CreateMinionRequest) returns (CreateMinionResponse) {}

  // Friends
  rpc GetListFriends(GetUserFriendRequest) returns (GetUserFriendResponse) {}
  rpc GetMatchInfoOnboarding(GetMatchInfoRequest) returns (GetMatchInfoResponse) {}

  // Lobby
  rpc GetLatestLobbyActivityInfo(GetActivityRequest) returns (GetActivityResponse) {}
}

// ==== PROFILE ====

message UserProfileRequest {
  string userId = 1;
  bool withRanking = 2;
}

message UserProfileResponse {
  string id = 1;
  string nickname = 2;
  int32 avatar = 3;
  int32 avatarFrame = 4;
  int32 nameColor = 7;
  string country = 5;
  UserProfileRank rank = 6;
}

message UserProfileRank {
  int32 trophies = 1;
  int32 rankLevel = 2;
}

// ==== MINIONS ====

message UserSelectedMinionRequest {
  string userId = 1;
}

message UserSelectedMinionResponse {
  string id = 1;
  string userId = 2;
  int32 type = 3;
  int32 skin = 4;
  bool nft = 5;
  int32 level = 6;
  map<string, int64> addIns = 7;
  int64 updatedAt = 8;
  int64 createdAt = 9;
}

message UserMinionsRequest {
  string userId = 1;
}

message UserMinionsResponse {
  repeated Minion minions = 1;
}

message Minion {
  string id = 1;
  string userId = 2;
  int32 type = 3;
  int32 skin = 4;
  bool nft = 5;
  int32 level = 6;
  map<string, int64> addIns = 7;
  int64 updatedAt = 8;
  int64 createdAt = 9;
}

message MinionRequest {
  string minionID = 1;
}

message MinionResponse {
  Minion minion = 1;
}

message CreateMinionRequest {
  string userId = 1;
  int32 skinId = 2;
  int32 changeSource = 4;
}

message CreateMinionResponse {
  Minion minion = 1;
}

// ==== FRIENDS ====

message GetUserFriendRequest {
  string userId = 1;
}

message GetUserFriendResponse {
  repeated FriendInfo friends = 1;
}

message FriendInfo {
  enum FRIEND_STATUS {
    REQUESTED = 0;
    REQUESTING = 1;
    CONFIRMED = 2;
  }

  string friendId = 1;
  FRIEND_STATUS status = 2;
  UserProfileResponse profile = 3;
  int64 requestedAt = 4;
}

// ==== Onboarding ====

message GetMatchInfoRequest {
  string userID = 1;

  optional RoundStat lastRound = 2;

  string operationSystem = 3;
  string appVersion = 4;
}

message GetMatchInfoResponse {
  optional bytes playerInfo = 1; 
  string matchID = 2;
  repeated MapData mapIds = 4;
  repeated int32 listMaxPlayerPerRound = 5;
  PlayerStat playerStat = 6;
}

message RoundStat {
  int32 roundId = 1;
  int32 mapId = 2;
  int32 mapDifficulty = 3;
  float timeInRound = 4;
  bool  roundComplete = 5;
  
  int32 controlDoubleJump = 6;
  int32 controlMoveCamera = 7;
  int32 passedCP = 8;
  int32 maxCP = 9;
}

message MapData {
  int32 gamePlay = 1;
  int32 mapId = 2;
  int32 mapDifficulty = 3;
}

message PlayerStat {
  int32 roundScoreAll = 1;
  float raceScoreAll = 2;
  int32 qualifyScoreAll = 3;
  float playerScore = 4;
  map<string, int32> roundPlayed = 5;
}

// =========Lobby================
message GetActivityRequest {
  string townID = 1;
}

message GetActivityResponse {
  string activityID = 1;
  string townID = 2;
  repeated ClassInfo classes = 3;
}

message ClassInfo {
  int32 classID = 1;
  string className = 2;
  int32 level = 3;
  int32 dailyActivityLimit = 4;
  int32 memberPerClass = 5;
  double timePerClass = 6;
  double classPerMasterL = 7;
  repeated SimpleItem rewards = 8;
}

message SimpleItem {
  string itemType = 1;
  int32 typeID = 2;
  double amount = 3;
  int32 inventoryKind = 4;
}