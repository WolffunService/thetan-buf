// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service_rivals.proto

package srvrivals

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThetanRivalService_GetUserProfile_FullMethodName             = "/services.ThetanRivalService/GetUserProfile"
	ThetanRivalService_GetUserMinions_FullMethodName             = "/services.ThetanRivalService/GetUserMinions"
	ThetanRivalService_GetUserSelectedMinion_FullMethodName      = "/services.ThetanRivalService/GetUserSelectedMinion"
	ThetanRivalService_GetMinion_FullMethodName                  = "/services.ThetanRivalService/GetMinion"
	ThetanRivalService_CreateMinion_FullMethodName               = "/services.ThetanRivalService/CreateMinion"
	ThetanRivalService_GetListFriends_FullMethodName             = "/services.ThetanRivalService/GetListFriends"
	ThetanRivalService_GetMatchInfoOnboarding_FullMethodName     = "/services.ThetanRivalService/GetMatchInfoOnboarding"
	ThetanRivalService_GetLatestLobbyActivityInfo_FullMethodName = "/services.ThetanRivalService/GetLatestLobbyActivityInfo"
)

// ThetanRivalServiceClient is the client API for ThetanRivalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanRivalServiceClient interface {
	// Profile
	GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	// Minions
	GetUserMinions(ctx context.Context, in *UserMinionsRequest, opts ...grpc.CallOption) (*UserMinionsResponse, error)
	GetUserSelectedMinion(ctx context.Context, in *UserSelectedMinionRequest, opts ...grpc.CallOption) (*UserSelectedMinionResponse, error)
	GetMinion(ctx context.Context, in *MinionRequest, opts ...grpc.CallOption) (*MinionResponse, error)
	CreateMinion(ctx context.Context, in *CreateMinionRequest, opts ...grpc.CallOption) (*CreateMinionResponse, error)
	// Friends
	GetListFriends(ctx context.Context, in *GetUserFriendRequest, opts ...grpc.CallOption) (*GetUserFriendResponse, error)
	GetMatchInfoOnboarding(ctx context.Context, in *GetMatchInfoRequest, opts ...grpc.CallOption) (*GetMatchInfoResponse, error)
	// Lobby
	GetLatestLobbyActivityInfo(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error)
}

type thetanRivalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanRivalServiceClient(cc grpc.ClientConnInterface) ThetanRivalServiceClient {
	return &thetanRivalServiceClient{cc}
}

func (c *thetanRivalServiceClient) GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanRivalServiceClient) GetUserMinions(ctx context.Context, in *UserMinionsRequest, opts ...grpc.CallOption) (*UserMinionsResponse, error) {
	out := new(UserMinionsResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_GetUserMinions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanRivalServiceClient) GetUserSelectedMinion(ctx context.Context, in *UserSelectedMinionRequest, opts ...grpc.CallOption) (*UserSelectedMinionResponse, error) {
	out := new(UserSelectedMinionResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_GetUserSelectedMinion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanRivalServiceClient) GetMinion(ctx context.Context, in *MinionRequest, opts ...grpc.CallOption) (*MinionResponse, error) {
	out := new(MinionResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_GetMinion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanRivalServiceClient) CreateMinion(ctx context.Context, in *CreateMinionRequest, opts ...grpc.CallOption) (*CreateMinionResponse, error) {
	out := new(CreateMinionResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_CreateMinion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanRivalServiceClient) GetListFriends(ctx context.Context, in *GetUserFriendRequest, opts ...grpc.CallOption) (*GetUserFriendResponse, error) {
	out := new(GetUserFriendResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_GetListFriends_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanRivalServiceClient) GetMatchInfoOnboarding(ctx context.Context, in *GetMatchInfoRequest, opts ...grpc.CallOption) (*GetMatchInfoResponse, error) {
	out := new(GetMatchInfoResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_GetMatchInfoOnboarding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanRivalServiceClient) GetLatestLobbyActivityInfo(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error) {
	out := new(GetActivityResponse)
	err := c.cc.Invoke(ctx, ThetanRivalService_GetLatestLobbyActivityInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanRivalServiceServer is the server API for ThetanRivalService service.
// All implementations must embed UnimplementedThetanRivalServiceServer
// for forward compatibility
type ThetanRivalServiceServer interface {
	// Profile
	GetUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	// Minions
	GetUserMinions(context.Context, *UserMinionsRequest) (*UserMinionsResponse, error)
	GetUserSelectedMinion(context.Context, *UserSelectedMinionRequest) (*UserSelectedMinionResponse, error)
	GetMinion(context.Context, *MinionRequest) (*MinionResponse, error)
	CreateMinion(context.Context, *CreateMinionRequest) (*CreateMinionResponse, error)
	// Friends
	GetListFriends(context.Context, *GetUserFriendRequest) (*GetUserFriendResponse, error)
	GetMatchInfoOnboarding(context.Context, *GetMatchInfoRequest) (*GetMatchInfoResponse, error)
	// Lobby
	GetLatestLobbyActivityInfo(context.Context, *GetActivityRequest) (*GetActivityResponse, error)
	mustEmbedUnimplementedThetanRivalServiceServer()
}

// UnimplementedThetanRivalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThetanRivalServiceServer struct {
}

func (UnimplementedThetanRivalServiceServer) GetUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedThetanRivalServiceServer) GetUserMinions(context.Context, *UserMinionsRequest) (*UserMinionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMinions not implemented")
}
func (UnimplementedThetanRivalServiceServer) GetUserSelectedMinion(context.Context, *UserSelectedMinionRequest) (*UserSelectedMinionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSelectedMinion not implemented")
}
func (UnimplementedThetanRivalServiceServer) GetMinion(context.Context, *MinionRequest) (*MinionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinion not implemented")
}
func (UnimplementedThetanRivalServiceServer) CreateMinion(context.Context, *CreateMinionRequest) (*CreateMinionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMinion not implemented")
}
func (UnimplementedThetanRivalServiceServer) GetListFriends(context.Context, *GetUserFriendRequest) (*GetUserFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFriends not implemented")
}
func (UnimplementedThetanRivalServiceServer) GetMatchInfoOnboarding(context.Context, *GetMatchInfoRequest) (*GetMatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchInfoOnboarding not implemented")
}
func (UnimplementedThetanRivalServiceServer) GetLatestLobbyActivityInfo(context.Context, *GetActivityRequest) (*GetActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestLobbyActivityInfo not implemented")
}
func (UnimplementedThetanRivalServiceServer) mustEmbedUnimplementedThetanRivalServiceServer() {}

// UnsafeThetanRivalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanRivalServiceServer will
// result in compilation errors.
type UnsafeThetanRivalServiceServer interface {
	mustEmbedUnimplementedThetanRivalServiceServer()
}

func RegisterThetanRivalServiceServer(s grpc.ServiceRegistrar, srv ThetanRivalServiceServer) {
	s.RegisterService(&ThetanRivalService_ServiceDesc, srv)
}

func _ThetanRivalService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).GetUserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanRivalService_GetUserMinions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMinionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).GetUserMinions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_GetUserMinions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).GetUserMinions(ctx, req.(*UserMinionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanRivalService_GetUserSelectedMinion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSelectedMinionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).GetUserSelectedMinion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_GetUserSelectedMinion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).GetUserSelectedMinion(ctx, req.(*UserSelectedMinionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanRivalService_GetMinion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).GetMinion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_GetMinion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).GetMinion(ctx, req.(*MinionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanRivalService_CreateMinion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMinionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).CreateMinion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_CreateMinion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).CreateMinion(ctx, req.(*CreateMinionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanRivalService_GetListFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).GetListFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_GetListFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).GetListFriends(ctx, req.(*GetUserFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanRivalService_GetMatchInfoOnboarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).GetMatchInfoOnboarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_GetMatchInfoOnboarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).GetMatchInfoOnboarding(ctx, req.(*GetMatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanRivalService_GetLatestLobbyActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanRivalServiceServer).GetLatestLobbyActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanRivalService_GetLatestLobbyActivityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanRivalServiceServer).GetLatestLobbyActivityInfo(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanRivalService_ServiceDesc is the grpc.ServiceDesc for ThetanRivalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanRivalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ThetanRivalService",
	HandlerType: (*ThetanRivalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfile",
			Handler:    _ThetanRivalService_GetUserProfile_Handler,
		},
		{
			MethodName: "GetUserMinions",
			Handler:    _ThetanRivalService_GetUserMinions_Handler,
		},
		{
			MethodName: "GetUserSelectedMinion",
			Handler:    _ThetanRivalService_GetUserSelectedMinion_Handler,
		},
		{
			MethodName: "GetMinion",
			Handler:    _ThetanRivalService_GetMinion_Handler,
		},
		{
			MethodName: "CreateMinion",
			Handler:    _ThetanRivalService_CreateMinion_Handler,
		},
		{
			MethodName: "GetListFriends",
			Handler:    _ThetanRivalService_GetListFriends_Handler,
		},
		{
			MethodName: "GetMatchInfoOnboarding",
			Handler:    _ThetanRivalService_GetMatchInfoOnboarding_Handler,
		},
		{
			MethodName: "GetLatestLobbyActivityInfo",
			Handler:    _ThetanRivalService_GetLatestLobbyActivityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_rivals.proto",
}
