// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0-devel
// 	protoc        v3.21.12
// source: service_rivals.proto

package srvrivals

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FriendInfo_FRIEND_STATUS int32

const (
	FriendInfo_REQUESTED  FriendInfo_FRIEND_STATUS = 0
	FriendInfo_REQUESTING FriendInfo_FRIEND_STATUS = 1
	FriendInfo_CONFIRMED  FriendInfo_FRIEND_STATUS = 2
)

// Enum value maps for FriendInfo_FRIEND_STATUS.
var (
	FriendInfo_FRIEND_STATUS_name = map[int32]string{
		0: "REQUESTED",
		1: "REQUESTING",
		2: "CONFIRMED",
	}
	FriendInfo_FRIEND_STATUS_value = map[string]int32{
		"REQUESTED":  0,
		"REQUESTING": 1,
		"CONFIRMED":  2,
	}
)

func (x FriendInfo_FRIEND_STATUS) Enum() *FriendInfo_FRIEND_STATUS {
	p := new(FriendInfo_FRIEND_STATUS)
	*p = x
	return p
}

func (x FriendInfo_FRIEND_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendInfo_FRIEND_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_service_rivals_proto_enumTypes[0].Descriptor()
}

func (FriendInfo_FRIEND_STATUS) Type() protoreflect.EnumType {
	return &file_service_rivals_proto_enumTypes[0]
}

func (x FriendInfo_FRIEND_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendInfo_FRIEND_STATUS.Descriptor instead.
func (FriendInfo_FRIEND_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{14, 0}
}

type UserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	WithRanking bool   `protobuf:"varint,2,opt,name=withRanking,proto3" json:"withRanking,omitempty"`
}

func (x *UserProfileRequest) Reset() {
	*x = UserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRequest) ProtoMessage() {}

func (x *UserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRequest.ProtoReflect.Descriptor instead.
func (*UserProfileRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{0}
}

func (x *UserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserProfileRequest) GetWithRanking() bool {
	if x != nil {
		return x.WithRanking
	}
	return false
}

type UserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname    string           `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar      int32            `protobuf:"varint,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AvatarFrame int32            `protobuf:"varint,4,opt,name=avatarFrame,proto3" json:"avatarFrame,omitempty"`
	NameColor   int32            `protobuf:"varint,7,opt,name=nameColor,proto3" json:"nameColor,omitempty"`
	Country     string           `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Rank        *UserProfileRank `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *UserProfileResponse) Reset() {
	*x = UserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileResponse) ProtoMessage() {}

func (x *UserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileResponse.ProtoReflect.Descriptor instead.
func (*UserProfileResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{1}
}

func (x *UserProfileResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProfileResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserProfileResponse) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *UserProfileResponse) GetAvatarFrame() int32 {
	if x != nil {
		return x.AvatarFrame
	}
	return 0
}

func (x *UserProfileResponse) GetNameColor() int32 {
	if x != nil {
		return x.NameColor
	}
	return 0
}

func (x *UserProfileResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UserProfileResponse) GetRank() *UserProfileRank {
	if x != nil {
		return x.Rank
	}
	return nil
}

type UserProfileRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trophies  int32 `protobuf:"varint,1,opt,name=trophies,proto3" json:"trophies,omitempty"`
	RankLevel int32 `protobuf:"varint,2,opt,name=rankLevel,proto3" json:"rankLevel,omitempty"`
}

func (x *UserProfileRank) Reset() {
	*x = UserProfileRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRank) ProtoMessage() {}

func (x *UserProfileRank) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRank.ProtoReflect.Descriptor instead.
func (*UserProfileRank) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{2}
}

func (x *UserProfileRank) GetTrophies() int32 {
	if x != nil {
		return x.Trophies
	}
	return 0
}

func (x *UserProfileRank) GetRankLevel() int32 {
	if x != nil {
		return x.RankLevel
	}
	return 0
}

type UserSelectedMinionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserSelectedMinionRequest) Reset() {
	*x = UserSelectedMinionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSelectedMinionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSelectedMinionRequest) ProtoMessage() {}

func (x *UserSelectedMinionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSelectedMinionRequest.ProtoReflect.Descriptor instead.
func (*UserSelectedMinionRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{3}
}

func (x *UserSelectedMinionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserSelectedMinionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string           `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Type      int32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Skin      int32            `protobuf:"varint,4,opt,name=skin,proto3" json:"skin,omitempty"`
	Nft       bool             `protobuf:"varint,5,opt,name=nft,proto3" json:"nft,omitempty"`
	Level     int32            `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	AddIns    map[string]int64 `protobuf:"bytes,7,rep,name=addIns,proto3" json:"addIns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UpdatedAt int64            `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatedAt int64            `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *UserSelectedMinionResponse) Reset() {
	*x = UserSelectedMinionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSelectedMinionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSelectedMinionResponse) ProtoMessage() {}

func (x *UserSelectedMinionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSelectedMinionResponse.ProtoReflect.Descriptor instead.
func (*UserSelectedMinionResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{4}
}

func (x *UserSelectedMinionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSelectedMinionResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSelectedMinionResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetNft() bool {
	if x != nil {
		return x.Nft
	}
	return false
}

func (x *UserSelectedMinionResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetAddIns() map[string]int64 {
	if x != nil {
		return x.AddIns
	}
	return nil
}

func (x *UserSelectedMinionResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type UserMinionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserMinionsRequest) Reset() {
	*x = UserMinionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMinionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMinionsRequest) ProtoMessage() {}

func (x *UserMinionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMinionsRequest.ProtoReflect.Descriptor instead.
func (*UserMinionsRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{5}
}

func (x *UserMinionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserMinionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minions []*Minion `protobuf:"bytes,1,rep,name=minions,proto3" json:"minions,omitempty"`
}

func (x *UserMinionsResponse) Reset() {
	*x = UserMinionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMinionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMinionsResponse) ProtoMessage() {}

func (x *UserMinionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMinionsResponse.ProtoReflect.Descriptor instead.
func (*UserMinionsResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{6}
}

func (x *UserMinionsResponse) GetMinions() []*Minion {
	if x != nil {
		return x.Minions
	}
	return nil
}

type Minion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string           `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Type      int32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Skin      int32            `protobuf:"varint,4,opt,name=skin,proto3" json:"skin,omitempty"`
	Nft       bool             `protobuf:"varint,5,opt,name=nft,proto3" json:"nft,omitempty"`
	Level     int32            `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	AddIns    map[string]int64 `protobuf:"bytes,7,rep,name=addIns,proto3" json:"addIns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UpdatedAt int64            `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatedAt int64            `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *Minion) Reset() {
	*x = Minion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Minion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Minion) ProtoMessage() {}

func (x *Minion) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Minion.ProtoReflect.Descriptor instead.
func (*Minion) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{7}
}

func (x *Minion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Minion) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Minion) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Minion) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *Minion) GetNft() bool {
	if x != nil {
		return x.Nft
	}
	return false
}

func (x *Minion) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Minion) GetAddIns() map[string]int64 {
	if x != nil {
		return x.AddIns
	}
	return nil
}

func (x *Minion) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Minion) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type MinionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinionID string `protobuf:"bytes,1,opt,name=minionID,proto3" json:"minionID,omitempty"`
}

func (x *MinionRequest) Reset() {
	*x = MinionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionRequest) ProtoMessage() {}

func (x *MinionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionRequest.ProtoReflect.Descriptor instead.
func (*MinionRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{8}
}

func (x *MinionRequest) GetMinionID() string {
	if x != nil {
		return x.MinionID
	}
	return ""
}

type MinionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minion *Minion `protobuf:"bytes,1,opt,name=minion,proto3" json:"minion,omitempty"`
}

func (x *MinionResponse) Reset() {
	*x = MinionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionResponse) ProtoMessage() {}

func (x *MinionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionResponse.ProtoReflect.Descriptor instead.
func (*MinionResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{9}
}

func (x *MinionResponse) GetMinion() *Minion {
	if x != nil {
		return x.Minion
	}
	return nil
}

type CreateMinionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SkinId       int32  `protobuf:"varint,2,opt,name=skinId,proto3" json:"skinId,omitempty"`
	ChangeSource int32  `protobuf:"varint,4,opt,name=changeSource,proto3" json:"changeSource,omitempty"`
}

func (x *CreateMinionRequest) Reset() {
	*x = CreateMinionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMinionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMinionRequest) ProtoMessage() {}

func (x *CreateMinionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMinionRequest.ProtoReflect.Descriptor instead.
func (*CreateMinionRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{10}
}

func (x *CreateMinionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMinionRequest) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *CreateMinionRequest) GetChangeSource() int32 {
	if x != nil {
		return x.ChangeSource
	}
	return 0
}

type CreateMinionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minion *Minion `protobuf:"bytes,1,opt,name=minion,proto3" json:"minion,omitempty"`
}

func (x *CreateMinionResponse) Reset() {
	*x = CreateMinionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMinionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMinionResponse) ProtoMessage() {}

func (x *CreateMinionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMinionResponse.ProtoReflect.Descriptor instead.
func (*CreateMinionResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{11}
}

func (x *CreateMinionResponse) GetMinion() *Minion {
	if x != nil {
		return x.Minion
	}
	return nil
}

type GetUserFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserFriendRequest) Reset() {
	*x = GetUserFriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendRequest) ProtoMessage() {}

func (x *GetUserFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendRequest.ProtoReflect.Descriptor instead.
func (*GetUserFriendRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserFriendRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*FriendInfo `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends,omitempty"`
}

func (x *GetUserFriendResponse) Reset() {
	*x = GetUserFriendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendResponse) ProtoMessage() {}

func (x *GetUserFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendResponse.ProtoReflect.Descriptor instead.
func (*GetUserFriendResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserFriendResponse) GetFriends() []*FriendInfo {
	if x != nil {
		return x.Friends
	}
	return nil
}

type FriendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendId    string                   `protobuf:"bytes,1,opt,name=friendId,proto3" json:"friendId,omitempty"`
	Status      FriendInfo_FRIEND_STATUS `protobuf:"varint,2,opt,name=status,proto3,enum=services.FriendInfo_FRIEND_STATUS" json:"status,omitempty"`
	Profile     *UserProfileResponse     `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	RequestedAt int64                    `protobuf:"varint,4,opt,name=requestedAt,proto3" json:"requestedAt,omitempty"`
}

func (x *FriendInfo) Reset() {
	*x = FriendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendInfo) ProtoMessage() {}

func (x *FriendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendInfo.ProtoReflect.Descriptor instead.
func (*FriendInfo) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{14}
}

func (x *FriendInfo) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

func (x *FriendInfo) GetStatus() FriendInfo_FRIEND_STATUS {
	if x != nil {
		return x.Status
	}
	return FriendInfo_REQUESTED
}

func (x *FriendInfo) GetProfile() *UserProfileResponse {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *FriendInfo) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

type GetMatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string     `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	LastRound       *RoundStat `protobuf:"bytes,2,opt,name=lastRound,proto3,oneof" json:"lastRound,omitempty"`
	OperationSystem string     `protobuf:"bytes,3,opt,name=operationSystem,proto3" json:"operationSystem,omitempty"`
	AppVersion      string     `protobuf:"bytes,4,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *GetMatchInfoRequest) Reset() {
	*x = GetMatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchInfoRequest) ProtoMessage() {}

func (x *GetMatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{15}
}

func (x *GetMatchInfoRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMatchInfoRequest) GetLastRound() *RoundStat {
	if x != nil {
		return x.LastRound
	}
	return nil
}

func (x *GetMatchInfoRequest) GetOperationSystem() string {
	if x != nil {
		return x.OperationSystem
	}
	return ""
}

func (x *GetMatchInfoRequest) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

type GetMatchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo            []byte      `protobuf:"bytes,1,opt,name=playerInfo,proto3,oneof" json:"playerInfo,omitempty"`
	MatchID               string      `protobuf:"bytes,2,opt,name=matchID,proto3" json:"matchID,omitempty"`
	MapIds                []*MapData  `protobuf:"bytes,4,rep,name=mapIds,proto3" json:"mapIds,omitempty"`
	ListMaxPlayerPerRound []int32     `protobuf:"varint,5,rep,packed,name=listMaxPlayerPerRound,proto3" json:"listMaxPlayerPerRound,omitempty"`
	PlayerStat            *PlayerStat `protobuf:"bytes,6,opt,name=playerStat,proto3" json:"playerStat,omitempty"`
}

func (x *GetMatchInfoResponse) Reset() {
	*x = GetMatchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchInfoResponse) ProtoMessage() {}

func (x *GetMatchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchInfoResponse.ProtoReflect.Descriptor instead.
func (*GetMatchInfoResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{16}
}

func (x *GetMatchInfoResponse) GetPlayerInfo() []byte {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *GetMatchInfoResponse) GetMatchID() string {
	if x != nil {
		return x.MatchID
	}
	return ""
}

func (x *GetMatchInfoResponse) GetMapIds() []*MapData {
	if x != nil {
		return x.MapIds
	}
	return nil
}

func (x *GetMatchInfoResponse) GetListMaxPlayerPerRound() []int32 {
	if x != nil {
		return x.ListMaxPlayerPerRound
	}
	return nil
}

func (x *GetMatchInfoResponse) GetPlayerStat() *PlayerStat {
	if x != nil {
		return x.PlayerStat
	}
	return nil
}

type RoundStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId           int32   `protobuf:"varint,1,opt,name=roundId,proto3" json:"roundId,omitempty"`
	MapId             int32   `protobuf:"varint,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapDifficulty     int32   `protobuf:"varint,3,opt,name=mapDifficulty,proto3" json:"mapDifficulty,omitempty"`
	TimeInRound       float32 `protobuf:"fixed32,4,opt,name=timeInRound,proto3" json:"timeInRound,omitempty"`
	RoundComplete     bool    `protobuf:"varint,5,opt,name=roundComplete,proto3" json:"roundComplete,omitempty"`
	ControlDoubleJump int32   `protobuf:"varint,6,opt,name=controlDoubleJump,proto3" json:"controlDoubleJump,omitempty"`
	ControlMoveCamera int32   `protobuf:"varint,7,opt,name=controlMoveCamera,proto3" json:"controlMoveCamera,omitempty"`
	PassedCP          int32   `protobuf:"varint,8,opt,name=passedCP,proto3" json:"passedCP,omitempty"`
	MaxCP             int32   `protobuf:"varint,9,opt,name=maxCP,proto3" json:"maxCP,omitempty"`
}

func (x *RoundStat) Reset() {
	*x = RoundStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStat) ProtoMessage() {}

func (x *RoundStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStat.ProtoReflect.Descriptor instead.
func (*RoundStat) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{17}
}

func (x *RoundStat) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundStat) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *RoundStat) GetMapDifficulty() int32 {
	if x != nil {
		return x.MapDifficulty
	}
	return 0
}

func (x *RoundStat) GetTimeInRound() float32 {
	if x != nil {
		return x.TimeInRound
	}
	return 0
}

func (x *RoundStat) GetRoundComplete() bool {
	if x != nil {
		return x.RoundComplete
	}
	return false
}

func (x *RoundStat) GetControlDoubleJump() int32 {
	if x != nil {
		return x.ControlDoubleJump
	}
	return 0
}

func (x *RoundStat) GetControlMoveCamera() int32 {
	if x != nil {
		return x.ControlMoveCamera
	}
	return 0
}

func (x *RoundStat) GetPassedCP() int32 {
	if x != nil {
		return x.PassedCP
	}
	return 0
}

func (x *RoundStat) GetMaxCP() int32 {
	if x != nil {
		return x.MaxCP
	}
	return 0
}

type MapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePlay      int32 `protobuf:"varint,1,opt,name=gamePlay,proto3" json:"gamePlay,omitempty"`
	MapId         int32 `protobuf:"varint,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapDifficulty int32 `protobuf:"varint,3,opt,name=mapDifficulty,proto3" json:"mapDifficulty,omitempty"`
}

func (x *MapData) Reset() {
	*x = MapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapData) ProtoMessage() {}

func (x *MapData) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapData.ProtoReflect.Descriptor instead.
func (*MapData) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{18}
}

func (x *MapData) GetGamePlay() int32 {
	if x != nil {
		return x.GamePlay
	}
	return 0
}

func (x *MapData) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapData) GetMapDifficulty() int32 {
	if x != nil {
		return x.MapDifficulty
	}
	return 0
}

type PlayerStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundScoreAll   int32            `protobuf:"varint,1,opt,name=roundScoreAll,proto3" json:"roundScoreAll,omitempty"`
	RaceScoreAll    float32          `protobuf:"fixed32,2,opt,name=raceScoreAll,proto3" json:"raceScoreAll,omitempty"`
	QualifyScoreAll int32            `protobuf:"varint,3,opt,name=qualifyScoreAll,proto3" json:"qualifyScoreAll,omitempty"`
	PlayerScore     float32          `protobuf:"fixed32,4,opt,name=playerScore,proto3" json:"playerScore,omitempty"`
	RoundPlayed     map[string]int32 `protobuf:"bytes,5,rep,name=roundPlayed,proto3" json:"roundPlayed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlayerStat) Reset() {
	*x = PlayerStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStat) ProtoMessage() {}

func (x *PlayerStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStat.ProtoReflect.Descriptor instead.
func (*PlayerStat) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{19}
}

func (x *PlayerStat) GetRoundScoreAll() int32 {
	if x != nil {
		return x.RoundScoreAll
	}
	return 0
}

func (x *PlayerStat) GetRaceScoreAll() float32 {
	if x != nil {
		return x.RaceScoreAll
	}
	return 0
}

func (x *PlayerStat) GetQualifyScoreAll() int32 {
	if x != nil {
		return x.QualifyScoreAll
	}
	return 0
}

func (x *PlayerStat) GetPlayerScore() float32 {
	if x != nil {
		return x.PlayerScore
	}
	return 0
}

func (x *PlayerStat) GetRoundPlayed() map[string]int32 {
	if x != nil {
		return x.RoundPlayed
	}
	return nil
}

// =========Lobby================
type GetActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TownID string `protobuf:"bytes,1,opt,name=townID,proto3" json:"townID,omitempty"`
}

func (x *GetActivityRequest) Reset() {
	*x = GetActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityRequest) ProtoMessage() {}

func (x *GetActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityRequest.ProtoReflect.Descriptor instead.
func (*GetActivityRequest) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{20}
}

func (x *GetActivityRequest) GetTownID() string {
	if x != nil {
		return x.TownID
	}
	return ""
}

type GetActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityID string       `protobuf:"bytes,1,opt,name=activityID,proto3" json:"activityID,omitempty"`
	TownID     string       `protobuf:"bytes,2,opt,name=townID,proto3" json:"townID,omitempty"`
	Classes    []*ClassInfo `protobuf:"bytes,3,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *GetActivityResponse) Reset() {
	*x = GetActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityResponse) ProtoMessage() {}

func (x *GetActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityResponse.ProtoReflect.Descriptor instead.
func (*GetActivityResponse) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{21}
}

func (x *GetActivityResponse) GetActivityID() string {
	if x != nil {
		return x.ActivityID
	}
	return ""
}

func (x *GetActivityResponse) GetTownID() string {
	if x != nil {
		return x.TownID
	}
	return ""
}

func (x *GetActivityResponse) GetClasses() []*ClassInfo {
	if x != nil {
		return x.Classes
	}
	return nil
}

type ClassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassID            int32         `protobuf:"varint,1,opt,name=classID,proto3" json:"classID,omitempty"`
	ClassName          string        `protobuf:"bytes,2,opt,name=className,proto3" json:"className,omitempty"`
	Level              int32         `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	DailyActivityLimit int32         `protobuf:"varint,4,opt,name=dailyActivityLimit,proto3" json:"dailyActivityLimit,omitempty"`
	MemberPerClass     int32         `protobuf:"varint,5,opt,name=memberPerClass,proto3" json:"memberPerClass,omitempty"`
	TimePerClass       float64       `protobuf:"fixed64,6,opt,name=timePerClass,proto3" json:"timePerClass,omitempty"`
	ClassPerMasterL    float64       `protobuf:"fixed64,7,opt,name=classPerMasterL,proto3" json:"classPerMasterL,omitempty"`
	Rewards            []*SimpleItem `protobuf:"bytes,8,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *ClassInfo) Reset() {
	*x = ClassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassInfo) ProtoMessage() {}

func (x *ClassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassInfo.ProtoReflect.Descriptor instead.
func (*ClassInfo) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{22}
}

func (x *ClassInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ClassInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ClassInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ClassInfo) GetDailyActivityLimit() int32 {
	if x != nil {
		return x.DailyActivityLimit
	}
	return 0
}

func (x *ClassInfo) GetMemberPerClass() int32 {
	if x != nil {
		return x.MemberPerClass
	}
	return 0
}

func (x *ClassInfo) GetTimePerClass() float64 {
	if x != nil {
		return x.TimePerClass
	}
	return 0
}

func (x *ClassInfo) GetClassPerMasterL() float64 {
	if x != nil {
		return x.ClassPerMasterL
	}
	return 0
}

func (x *ClassInfo) GetRewards() []*SimpleItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SimpleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType      string  `protobuf:"bytes,1,opt,name=itemType,proto3" json:"itemType,omitempty"`
	TypeID        int32   `protobuf:"varint,2,opt,name=typeID,proto3" json:"typeID,omitempty"`
	Amount        float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	InventoryKind int32   `protobuf:"varint,4,opt,name=inventoryKind,proto3" json:"inventoryKind,omitempty"`
}

func (x *SimpleItem) Reset() {
	*x = SimpleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_rivals_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleItem) ProtoMessage() {}

func (x *SimpleItem) ProtoReflect() protoreflect.Message {
	mi := &file_service_rivals_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleItem.ProtoReflect.Descriptor instead.
func (*SimpleItem) Descriptor() ([]byte, []int) {
	return file_service_rivals_proto_rawDescGZIP(), []int{23}
}

func (x *SimpleItem) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *SimpleItem) GetTypeID() int32 {
	if x != nil {
		return x.TypeID
	}
	return 0
}

func (x *SimpleItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SimpleItem) GetInventoryKind() int32 {
	if x != nil {
		return x.InventoryKind
	}
	return 0
}

var File_service_rivals_proto protoreflect.FileDescriptor

var file_service_rivals_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x4e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x22, 0xe2, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x4b, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6f, 0x70,
	0x68, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x70,
	0x68, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x33, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x66, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x48,
	0x0a, 0x06, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2c, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xad, 0x02, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2b, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x3a, 0x0a,
	0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22,
	0xfe, 0x01, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02,
	0x22, 0xbd, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0xfb, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb7,
	0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x76, 0x65,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x43, 0x50, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x43, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x43, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x43, 0x50, 0x22, 0x61, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xab, 0x02, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x41, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x47, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x22, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x32, 0xbc, 0x05, 0x0a, 0x12, 0x54, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x73, 0x72, 0x76, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_rivals_proto_rawDescOnce sync.Once
	file_service_rivals_proto_rawDescData = file_service_rivals_proto_rawDesc
)

func file_service_rivals_proto_rawDescGZIP() []byte {
	file_service_rivals_proto_rawDescOnce.Do(func() {
		file_service_rivals_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_rivals_proto_rawDescData)
	})
	return file_service_rivals_proto_rawDescData
}

var file_service_rivals_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_rivals_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_service_rivals_proto_goTypes = []interface{}{
	(FriendInfo_FRIEND_STATUS)(0),      // 0: services.FriendInfo.FRIEND_STATUS
	(*UserProfileRequest)(nil),         // 1: services.UserProfileRequest
	(*UserProfileResponse)(nil),        // 2: services.UserProfileResponse
	(*UserProfileRank)(nil),            // 3: services.UserProfileRank
	(*UserSelectedMinionRequest)(nil),  // 4: services.UserSelectedMinionRequest
	(*UserSelectedMinionResponse)(nil), // 5: services.UserSelectedMinionResponse
	(*UserMinionsRequest)(nil),         // 6: services.UserMinionsRequest
	(*UserMinionsResponse)(nil),        // 7: services.UserMinionsResponse
	(*Minion)(nil),                     // 8: services.Minion
	(*MinionRequest)(nil),              // 9: services.MinionRequest
	(*MinionResponse)(nil),             // 10: services.MinionResponse
	(*CreateMinionRequest)(nil),        // 11: services.CreateMinionRequest
	(*CreateMinionResponse)(nil),       // 12: services.CreateMinionResponse
	(*GetUserFriendRequest)(nil),       // 13: services.GetUserFriendRequest
	(*GetUserFriendResponse)(nil),      // 14: services.GetUserFriendResponse
	(*FriendInfo)(nil),                 // 15: services.FriendInfo
	(*GetMatchInfoRequest)(nil),        // 16: services.GetMatchInfoRequest
	(*GetMatchInfoResponse)(nil),       // 17: services.GetMatchInfoResponse
	(*RoundStat)(nil),                  // 18: services.RoundStat
	(*MapData)(nil),                    // 19: services.MapData
	(*PlayerStat)(nil),                 // 20: services.PlayerStat
	(*GetActivityRequest)(nil),         // 21: services.GetActivityRequest
	(*GetActivityResponse)(nil),        // 22: services.GetActivityResponse
	(*ClassInfo)(nil),                  // 23: services.ClassInfo
	(*SimpleItem)(nil),                 // 24: services.SimpleItem
	nil,                                // 25: services.UserSelectedMinionResponse.AddInsEntry
	nil,                                // 26: services.Minion.AddInsEntry
	nil,                                // 27: services.PlayerStat.RoundPlayedEntry
}
var file_service_rivals_proto_depIdxs = []int32{
	3,  // 0: services.UserProfileResponse.rank:type_name -> services.UserProfileRank
	25, // 1: services.UserSelectedMinionResponse.addIns:type_name -> services.UserSelectedMinionResponse.AddInsEntry
	8,  // 2: services.UserMinionsResponse.minions:type_name -> services.Minion
	26, // 3: services.Minion.addIns:type_name -> services.Minion.AddInsEntry
	8,  // 4: services.MinionResponse.minion:type_name -> services.Minion
	8,  // 5: services.CreateMinionResponse.minion:type_name -> services.Minion
	15, // 6: services.GetUserFriendResponse.friends:type_name -> services.FriendInfo
	0,  // 7: services.FriendInfo.status:type_name -> services.FriendInfo.FRIEND_STATUS
	2,  // 8: services.FriendInfo.profile:type_name -> services.UserProfileResponse
	18, // 9: services.GetMatchInfoRequest.lastRound:type_name -> services.RoundStat
	19, // 10: services.GetMatchInfoResponse.mapIds:type_name -> services.MapData
	20, // 11: services.GetMatchInfoResponse.playerStat:type_name -> services.PlayerStat
	27, // 12: services.PlayerStat.roundPlayed:type_name -> services.PlayerStat.RoundPlayedEntry
	23, // 13: services.GetActivityResponse.classes:type_name -> services.ClassInfo
	24, // 14: services.ClassInfo.rewards:type_name -> services.SimpleItem
	1,  // 15: services.ThetanRivalService.GetUserProfile:input_type -> services.UserProfileRequest
	6,  // 16: services.ThetanRivalService.GetUserMinions:input_type -> services.UserMinionsRequest
	4,  // 17: services.ThetanRivalService.GetUserSelectedMinion:input_type -> services.UserSelectedMinionRequest
	9,  // 18: services.ThetanRivalService.GetMinion:input_type -> services.MinionRequest
	11, // 19: services.ThetanRivalService.CreateMinion:input_type -> services.CreateMinionRequest
	13, // 20: services.ThetanRivalService.GetListFriends:input_type -> services.GetUserFriendRequest
	16, // 21: services.ThetanRivalService.GetMatchInfoOnboarding:input_type -> services.GetMatchInfoRequest
	21, // 22: services.ThetanRivalService.GetLatestLobbyActivityInfo:input_type -> services.GetActivityRequest
	2,  // 23: services.ThetanRivalService.GetUserProfile:output_type -> services.UserProfileResponse
	7,  // 24: services.ThetanRivalService.GetUserMinions:output_type -> services.UserMinionsResponse
	5,  // 25: services.ThetanRivalService.GetUserSelectedMinion:output_type -> services.UserSelectedMinionResponse
	10, // 26: services.ThetanRivalService.GetMinion:output_type -> services.MinionResponse
	12, // 27: services.ThetanRivalService.CreateMinion:output_type -> services.CreateMinionResponse
	14, // 28: services.ThetanRivalService.GetListFriends:output_type -> services.GetUserFriendResponse
	17, // 29: services.ThetanRivalService.GetMatchInfoOnboarding:output_type -> services.GetMatchInfoResponse
	22, // 30: services.ThetanRivalService.GetLatestLobbyActivityInfo:output_type -> services.GetActivityResponse
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_service_rivals_proto_init() }
func file_service_rivals_proto_init() {
	if File_service_rivals_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_rivals_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSelectedMinionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSelectedMinionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMinionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMinionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Minion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMinionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMinionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFriendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_rivals_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_rivals_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_service_rivals_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_rivals_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_rivals_proto_goTypes,
		DependencyIndexes: file_service_rivals_proto_depIdxs,
		EnumInfos:         file_service_rivals_proto_enumTypes,
		MessageInfos:      file_service_rivals_proto_msgTypes,
	}.Build()
	File_service_rivals_proto = out.File
	file_service_rivals_proto_rawDesc = nil
	file_service_rivals_proto_goTypes = nil
	file_service_rivals_proto_depIdxs = nil
}
