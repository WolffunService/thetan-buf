// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: match.proto

package coreproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchErrorCode int32

const (
	MatchErrorCode_M_SUCCESS                                     MatchErrorCode = 0
	MatchErrorCode_M_ERROR                                       MatchErrorCode = 99
	MatchErrorCode_CANNOT_CANCEL_WHEN_NOT_MATCHING               MatchErrorCode = 1
	MatchErrorCode_ALREADY_MATCHING                              MatchErrorCode = 2
	MatchErrorCode_CANNOT_CANCEL_BECAUSE_MATCH_FOUND             MatchErrorCode = 3
	MatchErrorCode_MATCH_INVALID                                 MatchErrorCode = 4 //match khong ton tai
	MatchErrorCode_MATCH_ALREADY_STARTED                         MatchErrorCode = 5
	MatchErrorCode_MATCH_ALREADY_END                             MatchErrorCode = 7
	MatchErrorCode_FIND_MATCH_TIME_OUT                           MatchErrorCode = 8
	MatchErrorCode_FIND_MATCH_PARTY_ERROR                        MatchErrorCode = 9
	MatchErrorCode_REAL_CANCEL_MATCH_SUCCESS                     MatchErrorCode = 100
	MatchErrorCode_USER_HAVE_BEEN_BANNED_FOREVER                 MatchErrorCode = 121
	MatchErrorCode_USER_HAVE_BEEN_BANNED_FINDMATCH               MatchErrorCode = 122
	MatchErrorCode_HERO_IS_ON_MARKET_PLACE                       MatchErrorCode = 123
	MatchErrorCode_ONE_OF_THE_PLAYERS_DID_NOT_SENT_REQUEST       MatchErrorCode = 124
	MatchErrorCode_ACCOUNT_IS_CURRENTLY_ONLINE_ON_ANOTHER_DEVICE MatchErrorCode = 125
	MatchErrorCode_HERO_NOT_OWNER                                MatchErrorCode = 3010
	MatchErrorCode_HERO_NOT_AVAILABLE                            MatchErrorCode = 3011
	MatchErrorCode_WRONG_HERO_MODEL                              MatchErrorCode = 3022
	MatchErrorCode_HERO_RENTED_ITEM                              MatchErrorCode = 3120
	MatchErrorCode_HERO_IS_FOR_RENT                              MatchErrorCode = 3124
	MatchErrorCode_HERO_MAX_BATTLE_RENTED                        MatchErrorCode = 3125
	MatchErrorCode_HERO_RETURNING_OWNER                          MatchErrorCode = 3127
)

// Enum value maps for MatchErrorCode.
var (
	MatchErrorCode_name = map[int32]string{
		0:    "M_SUCCESS",
		99:   "M_ERROR",
		1:    "CANNOT_CANCEL_WHEN_NOT_MATCHING",
		2:    "ALREADY_MATCHING",
		3:    "CANNOT_CANCEL_BECAUSE_MATCH_FOUND",
		4:    "MATCH_INVALID",
		5:    "MATCH_ALREADY_STARTED",
		7:    "MATCH_ALREADY_END",
		8:    "FIND_MATCH_TIME_OUT",
		9:    "FIND_MATCH_PARTY_ERROR",
		100:  "REAL_CANCEL_MATCH_SUCCESS",
		121:  "USER_HAVE_BEEN_BANNED_FOREVER",
		122:  "USER_HAVE_BEEN_BANNED_FINDMATCH",
		123:  "HERO_IS_ON_MARKET_PLACE",
		124:  "ONE_OF_THE_PLAYERS_DID_NOT_SENT_REQUEST",
		125:  "ACCOUNT_IS_CURRENTLY_ONLINE_ON_ANOTHER_DEVICE",
		3010: "HERO_NOT_OWNER",
		3011: "HERO_NOT_AVAILABLE",
		3022: "WRONG_HERO_MODEL",
		3120: "HERO_RENTED_ITEM",
		3124: "HERO_IS_FOR_RENT",
		3125: "HERO_MAX_BATTLE_RENTED",
		3127: "HERO_RETURNING_OWNER",
	}
	MatchErrorCode_value = map[string]int32{
		"M_SUCCESS":                                     0,
		"M_ERROR":                                       99,
		"CANNOT_CANCEL_WHEN_NOT_MATCHING":               1,
		"ALREADY_MATCHING":                              2,
		"CANNOT_CANCEL_BECAUSE_MATCH_FOUND":             3,
		"MATCH_INVALID":                                 4,
		"MATCH_ALREADY_STARTED":                         5,
		"MATCH_ALREADY_END":                             7,
		"FIND_MATCH_TIME_OUT":                           8,
		"FIND_MATCH_PARTY_ERROR":                        9,
		"REAL_CANCEL_MATCH_SUCCESS":                     100,
		"USER_HAVE_BEEN_BANNED_FOREVER":                 121,
		"USER_HAVE_BEEN_BANNED_FINDMATCH":               122,
		"HERO_IS_ON_MARKET_PLACE":                       123,
		"ONE_OF_THE_PLAYERS_DID_NOT_SENT_REQUEST":       124,
		"ACCOUNT_IS_CURRENTLY_ONLINE_ON_ANOTHER_DEVICE": 125,
		"HERO_NOT_OWNER":                                3010,
		"HERO_NOT_AVAILABLE":                            3011,
		"WRONG_HERO_MODEL":                              3022,
		"HERO_RENTED_ITEM":                              3120,
		"HERO_IS_FOR_RENT":                              3124,
		"HERO_MAX_BATTLE_RENTED":                        3125,
		"HERO_RETURNING_OWNER":                          3127,
	}
)

func (x MatchErrorCode) Enum() *MatchErrorCode {
	p := new(MatchErrorCode)
	*p = x
	return p
}

func (x MatchErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[0].Descriptor()
}

func (MatchErrorCode) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[0]
}

func (x MatchErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchErrorCode.Descriptor instead.
func (MatchErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

type MapDifficultyEnum int32

const (
	MapDifficultyEnum_None   MapDifficultyEnum = 0
	MapDifficultyEnum_Easy   MapDifficultyEnum = 1
	MapDifficultyEnum_Medium MapDifficultyEnum = 2
	MapDifficultyEnum_Hard   MapDifficultyEnum = 3
)

// Enum value maps for MapDifficultyEnum.
var (
	MapDifficultyEnum_name = map[int32]string{
		0: "None",
		1: "Easy",
		2: "Medium",
		3: "Hard",
	}
	MapDifficultyEnum_value = map[string]int32{
		"None":   0,
		"Easy":   1,
		"Medium": 2,
		"Hard":   3,
	}
)

func (x MapDifficultyEnum) Enum() *MapDifficultyEnum {
	p := new(MapDifficultyEnum)
	*p = x
	return p
}

func (x MapDifficultyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapDifficultyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[1].Descriptor()
}

func (MapDifficultyEnum) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[1]
}

func (x MapDifficultyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapDifficultyEnum.Descriptor instead.
func (MapDifficultyEnum) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

type TicketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   string                  `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	GameMode   GameMode                `protobuf:"varint,2,opt,name=gameMode,proto3,enum=core.proto.GameMode" json:"gameMode,omitempty"`
	InGameMode InGameMode              `protobuf:"varint,3,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
	EventId    string                  `protobuf:"bytes,4,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Players    []*PlayerInfoMatchProto `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty"`
	Regions    []int32                 `protobuf:"varint,6,rep,packed,name=regions,proto3" json:"regions,omitempty"`
	PartyId    string                  `protobuf:"bytes,7,opt,name=partyId,proto3" json:"partyId,omitempty"`
	TicketId   string                  `protobuf:"bytes,8,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	CreateTime int64                   `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Group      int32                   `protobuf:"varint,10,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *TicketData) Reset() {
	*x = TicketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketData) ProtoMessage() {}

func (x *TicketData) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketData.ProtoReflect.Descriptor instead.
func (*TicketData) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *TicketData) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *TicketData) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_RANKED
}

func (x *TicketData) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

func (x *TicketData) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *TicketData) GetPlayers() []*PlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TicketData) GetRegions() []int32 {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *TicketData) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *TicketData) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *TicketData) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TicketData) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

type MatchMakingRequestProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    string                  `protobuf:"bytes,4,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PartyId     string                  `protobuf:"bytes,5,opt,name=partyId,proto3" json:"partyId,omitempty"`
	GameMode    GameMode                `protobuf:"varint,1,opt,name=gameMode,proto3,enum=core.proto.GameMode" json:"gameMode,omitempty"`
	InGameMode  InGameMode              `protobuf:"varint,2,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
	Trophies    int32                   `protobuf:"varint,3,opt,name=trophies,proto3" json:"trophies,omitempty"`
	Regions     []int32                 `protobuf:"varint,6,rep,packed,name=regions,proto3" json:"regions,omitempty"`
	Players     []*PlayerInfoMatchProto `protobuf:"bytes,7,rep,name=players,proto3" json:"players,omitempty"`
	IsPlayAgain bool                    `protobuf:"varint,8,opt,name=isPlayAgain,proto3" json:"isPlayAgain,omitempty"`
}

func (x *MatchMakingRequestProto) Reset() {
	*x = MatchMakingRequestProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMakingRequestProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMakingRequestProto) ProtoMessage() {}

func (x *MatchMakingRequestProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMakingRequestProto.ProtoReflect.Descriptor instead.
func (*MatchMakingRequestProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

func (x *MatchMakingRequestProto) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *MatchMakingRequestProto) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MatchMakingRequestProto) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_RANKED
}

func (x *MatchMakingRequestProto) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

func (x *MatchMakingRequestProto) GetTrophies() int32 {
	if x != nil {
		return x.Trophies
	}
	return 0
}

func (x *MatchMakingRequestProto) GetRegions() []int32 {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *MatchMakingRequestProto) GetPlayers() []*PlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MatchMakingRequestProto) GetIsPlayAgain() bool {
	if x != nil {
		return x.IsPlayAgain
	}
	return false
}

type MatchMakingDataPlayAgain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*PlayerInfoMatchProto `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *MatchMakingDataPlayAgain) Reset() {
	*x = MatchMakingDataPlayAgain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMakingDataPlayAgain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMakingDataPlayAgain) ProtoMessage() {}

func (x *MatchMakingDataPlayAgain) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMakingDataPlayAgain.ProtoReflect.Descriptor instead.
func (*MatchMakingDataPlayAgain) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

func (x *MatchMakingDataPlayAgain) GetPlayers() []*PlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

// khi play again xong thi gui data cho cac thang con lai biet
type DataPlayAgainSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId       string     `protobuf:"bytes,1,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	TrophyMatching int32      `protobuf:"varint,2,opt,name=trophyMatching,proto3" json:"trophyMatching,omitempty"`
	Players        []string   `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	InGameMode     InGameMode `protobuf:"varint,4,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
}

func (x *DataPlayAgainSuccess) Reset() {
	*x = DataPlayAgainSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlayAgainSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlayAgainSuccess) ProtoMessage() {}

func (x *DataPlayAgainSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlayAgainSuccess.ProtoReflect.Descriptor instead.
func (*DataPlayAgainSuccess) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

func (x *DataPlayAgainSuccess) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *DataPlayAgainSuccess) GetTrophyMatching() int32 {
	if x != nil {
		return x.TrophyMatching
	}
	return 0
}

func (x *DataPlayAgainSuccess) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *DataPlayAgainSuccess) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

type MatchFoundResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId               string                  `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Players               []*PlayerInfoMatchProto `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	GameMode              GameMode                `protobuf:"varint,3,opt,name=gameMode,proto3,enum=core.proto.GameMode" json:"gameMode,omitempty"`
	InGameMode            InGameMode              `protobuf:"varint,4,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
	BestRegion            int32                   `protobuf:"varint,5,opt,name=bestRegion,proto3" json:"bestRegion,omitempty"`
	MapIds                []*MapDataProto         `protobuf:"bytes,6,rep,name=mapIds,proto3" json:"mapIds,omitempty"`
	ListMaxPlayerPerRound []int32                 `protobuf:"varint,7,rep,packed,name=ListMaxPlayerPerRound,proto3" json:"ListMaxPlayerPerRound,omitempty"`
	PlayerStat            *PlayerStat             `protobuf:"bytes,8,opt,name=playerStat,proto3" json:"playerStat,omitempty"`
}

func (x *MatchFoundResponseProto) Reset() {
	*x = MatchFoundResponseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFoundResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFoundResponseProto) ProtoMessage() {}

func (x *MatchFoundResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFoundResponseProto.ProtoReflect.Descriptor instead.
func (*MatchFoundResponseProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

func (x *MatchFoundResponseProto) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchFoundResponseProto) GetPlayers() []*PlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MatchFoundResponseProto) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_RANKED
}

func (x *MatchFoundResponseProto) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

func (x *MatchFoundResponseProto) GetBestRegion() int32 {
	if x != nil {
		return x.BestRegion
	}
	return 0
}

func (x *MatchFoundResponseProto) GetMapIds() []*MapDataProto {
	if x != nil {
		return x.MapIds
	}
	return nil
}

func (x *MatchFoundResponseProto) GetListMaxPlayerPerRound() []int32 {
	if x != nil {
		return x.ListMaxPlayerPerRound
	}
	return nil
}

func (x *MatchFoundResponseProto) GetPlayerStat() *PlayerStat {
	if x != nil {
		return x.PlayerStat
	}
	return nil
}

type PlayerStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundScoreAll   int32   `protobuf:"varint,1,opt,name=roundScoreAll,proto3" json:"roundScoreAll,omitempty"`
	RaceScoreAll    float32 `protobuf:"fixed32,2,opt,name=raceScoreAll,proto3" json:"raceScoreAll,omitempty"`
	QualifyScoreAll int32   `protobuf:"varint,3,opt,name=qualifyScoreAll,proto3" json:"qualifyScoreAll,omitempty"`
	PlayerScore     float32 `protobuf:"fixed32,4,opt,name=playerScore,proto3" json:"playerScore,omitempty"`
}

func (x *PlayerStat) Reset() {
	*x = PlayerStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStat) ProtoMessage() {}

func (x *PlayerStat) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStat.ProtoReflect.Descriptor instead.
func (*PlayerStat) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerStat) GetRoundScoreAll() int32 {
	if x != nil {
		return x.RoundScoreAll
	}
	return 0
}

func (x *PlayerStat) GetRaceScoreAll() float32 {
	if x != nil {
		return x.RaceScoreAll
	}
	return 0
}

func (x *PlayerStat) GetQualifyScoreAll() int32 {
	if x != nil {
		return x.QualifyScoreAll
	}
	return 0
}

func (x *PlayerStat) GetPlayerScore() float32 {
	if x != nil {
		return x.PlayerScore
	}
	return 0
}

type MapDataProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId         int32             `protobuf:"varint,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapDifficulty MapDifficultyEnum `protobuf:"varint,2,opt,name=mapDifficulty,proto3,enum=core.proto.MapDifficultyEnum" json:"mapDifficulty,omitempty"`
}

func (x *MapDataProto) Reset() {
	*x = MapDataProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapDataProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapDataProto) ProtoMessage() {}

func (x *MapDataProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapDataProto.ProtoReflect.Descriptor instead.
func (*MapDataProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{6}
}

func (x *MapDataProto) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapDataProto) GetMapDifficulty() MapDifficultyEnum {
	if x != nil {
		return x.MapDifficulty
	}
	return MapDifficultyEnum_None
}

type MatchDataBattleLogProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeEndGame int32                      `protobuf:"varint,1,opt,name=timeEndGame,proto3" json:"timeEndGame,omitempty"`
	Players     []*PlayerInfoEndMatchProto `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *MatchDataBattleLogProto) Reset() {
	*x = MatchDataBattleLogProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDataBattleLogProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDataBattleLogProto) ProtoMessage() {}

func (x *MatchDataBattleLogProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDataBattleLogProto.ProtoReflect.Descriptor instead.
func (*MatchDataBattleLogProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{7}
}

func (x *MatchDataBattleLogProto) GetTimeEndGame() int32 {
	if x != nil {
		return x.TimeEndGame
	}
	return 0
}

func (x *MatchDataBattleLogProto) GetPlayers() []*PlayerInfoEndMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

type MatchStartRequestProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestRegion int32 `protobuf:"varint,1,opt,name=bestRegion,proto3" json:"bestRegion,omitempty"`
}

func (x *MatchStartRequestProto) Reset() {
	*x = MatchStartRequestProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStartRequestProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStartRequestProto) ProtoMessage() {}

func (x *MatchStartRequestProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStartRequestProto.ProtoReflect.Descriptor instead.
func (*MatchStartRequestProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{8}
}

func (x *MatchStartRequestProto) GetBestRegion() int32 {
	if x != nil {
		return x.BestRegion
	}
	return 0
}

type MatchEndRequestProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string                     `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Players []*PlayerInfoEndMatchProto `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *MatchEndRequestProto) Reset() {
	*x = MatchEndRequestProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEndRequestProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEndRequestProto) ProtoMessage() {}

func (x *MatchEndRequestProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEndRequestProto.ProtoReflect.Descriptor instead.
func (*MatchEndRequestProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{9}
}

func (x *MatchEndRequestProto) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchEndRequestProto) GetPlayers() []*PlayerInfoEndMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

type PlayerInfoEndMatchProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     string  `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	TeamId       int32   `protobuf:"varint,2,opt,name=teamId,proto3" json:"teamId,omitempty"`
	HasSuperStar bool    `protobuf:"varint,3,opt,name=hasSuperStar,proto3" json:"hasSuperStar,omitempty"`
	IsBot        bool    `protobuf:"varint,4,opt,name=isBot,proto3" json:"isBot,omitempty"`
	Score        int32   `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Rank         int32   `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
	Collections  []int32 `protobuf:"varint,7,rep,packed,name=collections,proto3" json:"collections,omitempty"` //MVP - team MVP
	// for battle log
	Hero       int32  `protobuf:"varint,8,opt,name=hero,proto3" json:"hero,omitempty"`
	Skill1     int32  `protobuf:"varint,9,opt,name=skill1,proto3" json:"skill1,omitempty"`
	Skill2     int32  `protobuf:"varint,10,opt,name=skill2,proto3" json:"skill2,omitempty"`
	Skin       int32  `protobuf:"varint,11,opt,name=skin,proto3" json:"skin,omitempty"`
	PlayerName string `protobuf:"bytes,12,opt,name=playerName,proto3" json:"playerName,omitempty"`
}

func (x *PlayerInfoEndMatchProto) Reset() {
	*x = PlayerInfoEndMatchProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfoEndMatchProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoEndMatchProto) ProtoMessage() {}

func (x *PlayerInfoEndMatchProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoEndMatchProto.ProtoReflect.Descriptor instead.
func (*PlayerInfoEndMatchProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerInfoEndMatchProto) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerInfoEndMatchProto) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *PlayerInfoEndMatchProto) GetHasSuperStar() bool {
	if x != nil {
		return x.HasSuperStar
	}
	return false
}

func (x *PlayerInfoEndMatchProto) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *PlayerInfoEndMatchProto) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerInfoEndMatchProto) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PlayerInfoEndMatchProto) GetCollections() []int32 {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *PlayerInfoEndMatchProto) GetHero() int32 {
	if x != nil {
		return x.Hero
	}
	return 0
}

func (x *PlayerInfoEndMatchProto) GetSkill1() int32 {
	if x != nil {
		return x.Skill1
	}
	return 0
}

func (x *PlayerInfoEndMatchProto) GetSkill2() int32 {
	if x != nil {
		return x.Skill2
	}
	return 0
}

func (x *PlayerInfoEndMatchProto) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *PlayerInfoEndMatchProto) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type MatchDataResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	// Types that are assignable to DataMatch:
	//
	//	*MatchDataResponseProto_BattleLog
	//	*MatchDataResponseProto_DataReconnect
	//	*MatchDataResponseProto_MatchNotStart
	DataMatch  isMatchDataResponseProto_DataMatch `protobuf_oneof:"dataMatch"`
	GameMode   GameMode                           `protobuf:"varint,5,opt,name=gameMode,proto3,enum=core.proto.GameMode" json:"gameMode,omitempty"`
	InGameMode InGameMode                         `protobuf:"varint,6,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
}

func (x *MatchDataResponseProto) Reset() {
	*x = MatchDataResponseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDataResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDataResponseProto) ProtoMessage() {}

func (x *MatchDataResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDataResponseProto.ProtoReflect.Descriptor instead.
func (*MatchDataResponseProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{11}
}

func (x *MatchDataResponseProto) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (m *MatchDataResponseProto) GetDataMatch() isMatchDataResponseProto_DataMatch {
	if m != nil {
		return m.DataMatch
	}
	return nil
}

func (x *MatchDataResponseProto) GetBattleLog() *MatchDataBattleLogProto {
	if x, ok := x.GetDataMatch().(*MatchDataResponseProto_BattleLog); ok {
		return x.BattleLog
	}
	return nil
}

func (x *MatchDataResponseProto) GetDataReconnect() *MatchDataReconnect {
	if x, ok := x.GetDataMatch().(*MatchDataResponseProto_DataReconnect); ok {
		return x.DataReconnect
	}
	return nil
}

func (x *MatchDataResponseProto) GetMatchNotStart() bool {
	if x, ok := x.GetDataMatch().(*MatchDataResponseProto_MatchNotStart); ok {
		return x.MatchNotStart
	}
	return false
}

func (x *MatchDataResponseProto) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_RANKED
}

func (x *MatchDataResponseProto) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

type isMatchDataResponseProto_DataMatch interface {
	isMatchDataResponseProto_DataMatch()
}

type MatchDataResponseProto_BattleLog struct {
	BattleLog *MatchDataBattleLogProto `protobuf:"bytes,2,opt,name=battleLog,proto3,oneof"`
}

type MatchDataResponseProto_DataReconnect struct {
	DataReconnect *MatchDataReconnect `protobuf:"bytes,3,opt,name=dataReconnect,proto3,oneof"`
}

type MatchDataResponseProto_MatchNotStart struct {
	MatchNotStart bool `protobuf:"varint,4,opt,name=matchNotStart,proto3,oneof"`
}

func (*MatchDataResponseProto_BattleLog) isMatchDataResponseProto_DataMatch() {}

func (*MatchDataResponseProto_DataReconnect) isMatchDataResponseProto_DataMatch() {}

func (*MatchDataResponseProto_MatchNotStart) isMatchDataResponseProto_DataMatch() {}

type MatchDataReconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStart int32 `protobuf:"varint,1,opt,name=timeStart,proto3" json:"timeStart,omitempty"`
	Region    int32 `protobuf:"varint,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *MatchDataReconnect) Reset() {
	*x = MatchDataReconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDataReconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDataReconnect) ProtoMessage() {}

func (x *MatchDataReconnect) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDataReconnect.ProtoReflect.Descriptor instead.
func (*MatchDataReconnect) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{12}
}

func (x *MatchDataReconnect) GetTimeStart() int32 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *MatchDataReconnect) GetRegion() int32 {
	if x != nil {
		return x.Region
	}
	return 0
}

type PlayerInfoMatchProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// heroId
	PlayerId       string  `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PartyId        string  `protobuf:"bytes,2,opt,name=partyId,proto3" json:"partyId,omitempty"`
	HeroTypeId     int32   `protobuf:"varint,3,opt,name=heroTypeId,proto3" json:"heroTypeId,omitempty"`
	Skill1         int32   `protobuf:"varint,4,opt,name=skill1,proto3" json:"skill1,omitempty"`
	Skill2         int32   `protobuf:"varint,5,opt,name=skill2,proto3" json:"skill2,omitempty"`
	Skin           int32   `protobuf:"varint,6,opt,name=skin,proto3" json:"skin,omitempty"`
	Trophies       int32   `protobuf:"varint,7,opt,name=trophies,proto3" json:"trophies,omitempty"`
	HeroLevel      int32   `protobuf:"varint,8,opt,name=heroLevel,proto3" json:"heroLevel,omitempty"`
	Skill1Level    int32   `protobuf:"varint,9,opt,name=skill1Level,proto3" json:"skill1Level,omitempty"`
	Skill2Level    int32   `protobuf:"varint,10,opt,name=skill2Level,proto3" json:"skill2Level,omitempty"`
	Regions        []int32 `protobuf:"varint,11,rep,packed,name=regions,proto3" json:"regions,omitempty"`
	PlayerName     string  `protobuf:"bytes,12,opt,name=playerName,proto3" json:"playerName,omitempty"`
	AvatarId       int32   `protobuf:"varint,13,opt,name=avatarId,proto3" json:"avatarId,omitempty"`
	FrameId        int32   `protobuf:"varint,14,opt,name=frameId,proto3" json:"frameId,omitempty"`
	GuildId        string  `protobuf:"bytes,15,opt,name=guildId,proto3" json:"guildId,omitempty"`
	HeroId         string  `protobuf:"bytes,16,opt,name=heroId,proto3" json:"heroId,omitempty"`
	IsSpecialEvent bool    `protobuf:"varint,17,opt,name=isSpecialEvent,proto3" json:"isSpecialEvent,omitempty"`
	BehaviorPoint  int32   `protobuf:"varint,18,opt,name=behaviorPoint,proto3" json:"behaviorPoint,omitempty"`
	TrophyMatching int32   `protobuf:"varint,19,opt,name=trophyMatching,proto3" json:"trophyMatching,omitempty"`
	BrainType      int32   `protobuf:"varint,20,opt,name=brainType,proto3" json:"brainType,omitempty"`
	TeamID         int32   `protobuf:"varint,21,opt,name=teamID,proto3" json:"teamID,omitempty"`
	BattleCount    int32   `protobuf:"varint,22,opt,name=battleCount,proto3" json:"battleCount,omitempty"`
	// Deprecated: Marked as deprecated in match.proto.
	CosmeticUsing   *CosmeticUsingProto   `protobuf:"bytes,23,opt,name=cosmeticUsing,proto3" json:"cosmeticUsing,omitempty"`
	NameColorId     int32                 `protobuf:"varint,24,opt,name=NameColorId,proto3" json:"NameColorId,omitempty"`
	PlayerScore     float64               `protobuf:"fixed64,25,opt,name=PlayerScore,proto3" json:"PlayerScore,omitempty"`
	MapIDs          []int32               `protobuf:"varint,26,rep,packed,name=MapIDs,proto3" json:"MapIDs,omitempty"`
	Rank            int32                 `protobuf:"varint,27,opt,name=rank,proto3" json:"rank,omitempty"`
	CosmeticUsingV2 *CosmeticUsingProtoV2 `protobuf:"bytes,28,opt,name=cosmeticUsingV2,proto3" json:"cosmeticUsingV2,omitempty"`
	RoundPlayed     map[string]int32      `protobuf:"bytes,29,rep,name=roundPlayed,proto3" json:"roundPlayed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlayerInfoMatchProto) Reset() {
	*x = PlayerInfoMatchProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfoMatchProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoMatchProto) ProtoMessage() {}

func (x *PlayerInfoMatchProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoMatchProto.ProtoReflect.Descriptor instead.
func (*PlayerInfoMatchProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerInfoMatchProto) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerInfoMatchProto) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PlayerInfoMatchProto) GetHeroTypeId() int32 {
	if x != nil {
		return x.HeroTypeId
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetSkill1() int32 {
	if x != nil {
		return x.Skill1
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetSkill2() int32 {
	if x != nil {
		return x.Skill2
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetTrophies() int32 {
	if x != nil {
		return x.Trophies
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetSkill1Level() int32 {
	if x != nil {
		return x.Skill1Level
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetSkill2Level() int32 {
	if x != nil {
		return x.Skill2Level
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetRegions() []int32 {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *PlayerInfoMatchProto) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PlayerInfoMatchProto) GetAvatarId() int32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetFrameId() int32 {
	if x != nil {
		return x.FrameId
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *PlayerInfoMatchProto) GetHeroId() string {
	if x != nil {
		return x.HeroId
	}
	return ""
}

func (x *PlayerInfoMatchProto) GetIsSpecialEvent() bool {
	if x != nil {
		return x.IsSpecialEvent
	}
	return false
}

func (x *PlayerInfoMatchProto) GetBehaviorPoint() int32 {
	if x != nil {
		return x.BehaviorPoint
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetTrophyMatching() int32 {
	if x != nil {
		return x.TrophyMatching
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetBrainType() int32 {
	if x != nil {
		return x.BrainType
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetTeamID() int32 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetBattleCount() int32 {
	if x != nil {
		return x.BattleCount
	}
	return 0
}

// Deprecated: Marked as deprecated in match.proto.
func (x *PlayerInfoMatchProto) GetCosmeticUsing() *CosmeticUsingProto {
	if x != nil {
		return x.CosmeticUsing
	}
	return nil
}

func (x *PlayerInfoMatchProto) GetNameColorId() int32 {
	if x != nil {
		return x.NameColorId
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetPlayerScore() float64 {
	if x != nil {
		return x.PlayerScore
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetMapIDs() []int32 {
	if x != nil {
		return x.MapIDs
	}
	return nil
}

func (x *PlayerInfoMatchProto) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PlayerInfoMatchProto) GetCosmeticUsingV2() *CosmeticUsingProtoV2 {
	if x != nil {
		return x.CosmeticUsingV2
	}
	return nil
}

func (x *PlayerInfoMatchProto) GetRoundPlayed() map[string]int32 {
	if x != nil {
		return x.RoundPlayed
	}
	return nil
}

// Deprecated: Marked as deprecated in match.proto.
type CosmeticUsingProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackBling int32 `protobuf:"varint,1,opt,name=backBling,proto3" json:"backBling,omitempty"`
	Dance     int32 `protobuf:"varint,2,opt,name=dance,proto3" json:"dance,omitempty"`
	FlyCraft  int32 `protobuf:"varint,3,opt,name=flyCraft,proto3" json:"flyCraft,omitempty"`
	Footprint int32 `protobuf:"varint,4,opt,name=footprint,proto3" json:"footprint,omitempty"`
	Glow      int32 `protobuf:"varint,5,opt,name=glow,proto3" json:"glow,omitempty"`
	Spray     int32 `protobuf:"varint,6,opt,name=spray,proto3" json:"spray,omitempty"`
	Voice     int32 `protobuf:"varint,7,opt,name=voice,proto3" json:"voice,omitempty"`
}

func (x *CosmeticUsingProto) Reset() {
	*x = CosmeticUsingProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmeticUsingProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmeticUsingProto) ProtoMessage() {}

func (x *CosmeticUsingProto) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmeticUsingProto.ProtoReflect.Descriptor instead.
func (*CosmeticUsingProto) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{14}
}

func (x *CosmeticUsingProto) GetBackBling() int32 {
	if x != nil {
		return x.BackBling
	}
	return 0
}

func (x *CosmeticUsingProto) GetDance() int32 {
	if x != nil {
		return x.Dance
	}
	return 0
}

func (x *CosmeticUsingProto) GetFlyCraft() int32 {
	if x != nil {
		return x.FlyCraft
	}
	return 0
}

func (x *CosmeticUsingProto) GetFootprint() int32 {
	if x != nil {
		return x.Footprint
	}
	return 0
}

func (x *CosmeticUsingProto) GetGlow() int32 {
	if x != nil {
		return x.Glow
	}
	return 0
}

func (x *CosmeticUsingProto) GetSpray() int32 {
	if x != nil {
		return x.Spray
	}
	return 0
}

func (x *CosmeticUsingProto) GetVoice() int32 {
	if x != nil {
		return x.Voice
	}
	return 0
}

// khi delete ticket thanh cong
// se goi len MatchChannel de get party hoac player va send
type DeleteTicketSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	TicketId string `protobuf:"bytes,2,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	PartyId  string `protobuf:"bytes,3,opt,name=partyId,proto3" json:"partyId,omitempty"` // dung de broadcast party
}

func (x *DeleteTicketSuccess) Reset() {
	*x = DeleteTicketSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketSuccess) ProtoMessage() {}

func (x *DeleteTicketSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketSuccess.ProtoReflect.Descriptor instead.
func (*DeleteTicketSuccess) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteTicketSuccess) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *DeleteTicketSuccess) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *DeleteTicketSuccess) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// message dung chung
type MatchProtoPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PartyId  string `protobuf:"bytes,5,opt,name=partyId,proto3" json:"partyId,omitempty"`
	// Types that are assignable to Res:
	//
	//	*MatchProtoPackage_Data
	//	*MatchProtoPackage_ListErrorPlayer
	//	*MatchProtoPackage_ErrorCode
	Res isMatchProtoPackage_Res `protobuf_oneof:"res"`
}

func (x *MatchProtoPackage) Reset() {
	*x = MatchProtoPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchProtoPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchProtoPackage) ProtoMessage() {}

func (x *MatchProtoPackage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchProtoPackage.ProtoReflect.Descriptor instead.
func (*MatchProtoPackage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{16}
}

func (x *MatchProtoPackage) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *MatchProtoPackage) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (m *MatchProtoPackage) GetRes() isMatchProtoPackage_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (x *MatchProtoPackage) GetData() []byte {
	if x, ok := x.GetRes().(*MatchProtoPackage_Data); ok {
		return x.Data
	}
	return nil
}

func (x *MatchProtoPackage) GetListErrorPlayer() *ListErrorPlayer {
	if x, ok := x.GetRes().(*MatchProtoPackage_ListErrorPlayer); ok {
		return x.ListErrorPlayer
	}
	return nil
}

func (x *MatchProtoPackage) GetErrorCode() int32 {
	if x, ok := x.GetRes().(*MatchProtoPackage_ErrorCode); ok {
		return x.ErrorCode
	}
	return 0
}

type isMatchProtoPackage_Res interface {
	isMatchProtoPackage_Res()
}

type MatchProtoPackage_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type MatchProtoPackage_ListErrorPlayer struct {
	ListErrorPlayer *ListErrorPlayer `protobuf:"bytes,3,opt,name=listErrorPlayer,proto3,oneof"`
}

type MatchProtoPackage_ErrorCode struct {
	ErrorCode int32 `protobuf:"varint,4,opt,name=errorCode,proto3,oneof"`
}

func (*MatchProtoPackage_Data) isMatchProtoPackage_Res() {}

func (*MatchProtoPackage_ListErrorPlayer) isMatchProtoPackage_Res() {}

func (*MatchProtoPackage_ErrorCode) isMatchProtoPackage_Res() {}

type TicketDataCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InGameMode InGameMode `protobuf:"varint,1,opt,name=inGameMode,proto3,enum=core.proto.InGameMode" json:"inGameMode,omitempty"`
	Trophies   int32      `protobuf:"varint,2,opt,name=trophies,proto3" json:"trophies,omitempty"`
	PlayerIds  []string   `protobuf:"bytes,3,rep,name=playerIds,proto3" json:"playerIds,omitempty"`
	TicketId   string     `protobuf:"bytes,4,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
}

func (x *TicketDataCache) Reset() {
	*x = TicketDataCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketDataCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketDataCache) ProtoMessage() {}

func (x *TicketDataCache) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketDataCache.ProtoReflect.Descriptor instead.
func (*TicketDataCache) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{17}
}

func (x *TicketDataCache) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

func (x *TicketDataCache) GetTrophies() int32 {
	if x != nil {
		return x.Trophies
	}
	return 0
}

func (x *TicketDataCache) GetPlayerIds() []string {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *TicketDataCache) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

type TicketCacheWSOnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID   string `protobuf:"bytes,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
	InGameMode int32  `protobuf:"varint,2,opt,name=inGameMode,proto3" json:"inGameMode,omitempty"`
}

func (x *TicketCacheWSOnly) Reset() {
	*x = TicketCacheWSOnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCacheWSOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCacheWSOnly) ProtoMessage() {}

func (x *TicketCacheWSOnly) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCacheWSOnly.ProtoReflect.Descriptor instead.
func (*TicketCacheWSOnly) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{18}
}

func (x *TicketCacheWSOnly) GetTicketID() string {
	if x != nil {
		return x.TicketID
	}
	return ""
}

func (x *TicketCacheWSOnly) GetInGameMode() int32 {
	if x != nil {
		return x.InGameMode
	}
	return 0
}

type ListErrorPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorPlayers []*ListErrorPlayer_ErrorPlayer `protobuf:"bytes,1,rep,name=errorPlayers,proto3" json:"errorPlayers,omitempty"`
}

func (x *ListErrorPlayer) Reset() {
	*x = ListErrorPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListErrorPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListErrorPlayer) ProtoMessage() {}

func (x *ListErrorPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListErrorPlayer.ProtoReflect.Descriptor instead.
func (*ListErrorPlayer) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{19}
}

func (x *ListErrorPlayer) GetErrorPlayers() []*ListErrorPlayer_ErrorPlayer {
	if x != nil {
		return x.ErrorPlayers
	}
	return nil
}

type MatchProtoVersionPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	// Types that are assignable to Res:
	//
	//	*MatchProtoVersionPackage_Data
	//	*MatchProtoVersionPackage_ErrorCode
	Res     isMatchProtoVersionPackage_Res `protobuf_oneof:"res"`
	Version int32                          `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MatchProtoVersionPackage) Reset() {
	*x = MatchProtoVersionPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchProtoVersionPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchProtoVersionPackage) ProtoMessage() {}

func (x *MatchProtoVersionPackage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchProtoVersionPackage.ProtoReflect.Descriptor instead.
func (*MatchProtoVersionPackage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{20}
}

func (x *MatchProtoVersionPackage) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (m *MatchProtoVersionPackage) GetRes() isMatchProtoVersionPackage_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (x *MatchProtoVersionPackage) GetData() []byte {
	if x, ok := x.GetRes().(*MatchProtoVersionPackage_Data); ok {
		return x.Data
	}
	return nil
}

func (x *MatchProtoVersionPackage) GetErrorCode() int32 {
	if x, ok := x.GetRes().(*MatchProtoVersionPackage_ErrorCode); ok {
		return x.ErrorCode
	}
	return 0
}

func (x *MatchProtoVersionPackage) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type isMatchProtoVersionPackage_Res interface {
	isMatchProtoVersionPackage_Res()
}

type MatchProtoVersionPackage_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"` //data nay la proto khac
}

type MatchProtoVersionPackage_ErrorCode struct {
	ErrorCode int32 `protobuf:"varint,3,opt,name=errorCode,proto3,oneof"` //neu khac 0 tuc la co loi. luc nay khong parse cai data nua
}

func (*MatchProtoVersionPackage_Data) isMatchProtoVersionPackage_Res() {}

func (*MatchProtoVersionPackage_ErrorCode) isMatchProtoVersionPackage_Res() {}

type CancelMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Ticket object with SearchFields defined.
	PlayerId   string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	TicketId   string `protobuf:"bytes,2,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	Trophy     int32  `protobuf:"varint,3,opt,name=trophy,proto3" json:"trophy,omitempty"`
	InGameMode int32  `protobuf:"varint,4,opt,name=inGameMode,proto3" json:"inGameMode,omitempty"`
}

func (x *CancelMatchRequest) Reset() {
	*x = CancelMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMatchRequest) ProtoMessage() {}

func (x *CancelMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMatchRequest.ProtoReflect.Descriptor instead.
func (*CancelMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{21}
}

func (x *CancelMatchRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CancelMatchRequest) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *CancelMatchRequest) GetTrophy() int32 {
	if x != nil {
		return x.Trophy
	}
	return 0
}

func (x *CancelMatchRequest) GetInGameMode() int32 {
	if x != nil {
		return x.InGameMode
	}
	return 0
}

type MatchExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinTrophies         int32 `protobuf:"varint,1,opt,name=minTrophies,proto3" json:"minTrophies,omitempty"`
	MaxTrophies         int32 `protobuf:"varint,2,opt,name=maxTrophies,proto3" json:"maxTrophies,omitempty"`
	MinPlayers          int32 `protobuf:"varint,3,opt,name=minPlayers,proto3" json:"minPlayers,omitempty"`
	MaxPlayers          int32 `protobuf:"varint,4,opt,name=maxPlayers,proto3" json:"maxPlayers,omitempty"`
	MaxTeam             int32 `protobuf:"varint,5,opt,name=maxTeam,proto3" json:"maxTeam,omitempty"`
	CountPlayers        int32 `protobuf:"varint,6,opt,name=countPlayers,proto3" json:"countPlayers,omitempty"`
	NumBot              int32 `protobuf:"varint,7,opt,name=numBot,proto3" json:"numBot,omitempty"`
	PlayerPerTeam       int32 `protobuf:"varint,8,opt,name=playerPerTeam,proto3" json:"playerPerTeam,omitempty"`
	MatchFoundTimestamp int64 `protobuf:"varint,9,opt,name=matchFoundTimestamp,proto3" json:"matchFoundTimestamp,omitempty"`
}

func (x *MatchExtension) Reset() {
	*x = MatchExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchExtension) ProtoMessage() {}

func (x *MatchExtension) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchExtension.ProtoReflect.Descriptor instead.
func (*MatchExtension) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{22}
}

func (x *MatchExtension) GetMinTrophies() int32 {
	if x != nil {
		return x.MinTrophies
	}
	return 0
}

func (x *MatchExtension) GetMaxTrophies() int32 {
	if x != nil {
		return x.MaxTrophies
	}
	return 0
}

func (x *MatchExtension) GetMinPlayers() int32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *MatchExtension) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *MatchExtension) GetMaxTeam() int32 {
	if x != nil {
		return x.MaxTeam
	}
	return 0
}

func (x *MatchExtension) GetCountPlayers() int32 {
	if x != nil {
		return x.CountPlayers
	}
	return 0
}

func (x *MatchExtension) GetNumBot() int32 {
	if x != nil {
		return x.NumBot
	}
	return 0
}

func (x *MatchExtension) GetPlayerPerTeam() int32 {
	if x != nil {
		return x.PlayerPerTeam
	}
	return 0
}

func (x *MatchExtension) GetMatchFoundTimestamp() int64 {
	if x != nil {
		return x.MatchFoundTimestamp
	}
	return 0
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{23}
}

func (x *EmptyResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type BotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32                   `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	Bots      []*PlayerInfoMatchProto `protobuf:"bytes,2,rep,name=bots,proto3" json:"bots,omitempty"`
}

func (x *BotsResponse) Reset() {
	*x = BotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotsResponse) ProtoMessage() {}

func (x *BotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotsResponse.ProtoReflect.Descriptor instead.
func (*BotsResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{24}
}

func (x *BotsResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *BotsResponse) GetBots() []*PlayerInfoMatchProto {
	if x != nil {
		return x.Bots
	}
	return nil
}

type GetBotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId     int32 `protobuf:"varint,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	IsNewbie   bool  `protobuf:"varint,2,opt,name=isNewbie,proto3" json:"isNewbie,omitempty"`
	Numbers    int32 `protobuf:"varint,3,opt,name=numbers,proto3" json:"numbers,omitempty"`
	TrophyRank int32 `protobuf:"varint,4,opt,name=trophyRank,proto3" json:"trophyRank,omitempty"`
	Region     int32 `protobuf:"varint,5,opt,name=region,proto3" json:"region,omitempty"`
	Battle     int32 `protobuf:"varint,6,opt,name=battle,proto3" json:"battle,omitempty"`
}

func (x *GetBotsRequest) Reset() {
	*x = GetBotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBotsRequest) ProtoMessage() {}

func (x *GetBotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBotsRequest.ProtoReflect.Descriptor instead.
func (*GetBotsRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{25}
}

func (x *GetBotsRequest) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GetBotsRequest) GetIsNewbie() bool {
	if x != nil {
		return x.IsNewbie
	}
	return false
}

func (x *GetBotsRequest) GetNumbers() int32 {
	if x != nil {
		return x.Numbers
	}
	return 0
}

func (x *GetBotsRequest) GetTrophyRank() int32 {
	if x != nil {
		return x.TrophyRank
	}
	return 0
}

func (x *GetBotsRequest) GetRegion() int32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *GetBotsRequest) GetBattle() int32 {
	if x != nil {
		return x.Battle
	}
	return 0
}

type CosmeticUsingProtoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosmeticInUsed map[string]int64 `protobuf:"bytes,1,rep,name=cosmeticInUsed,proto3" json:"cosmeticInUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CosmeticUsingProtoV2) Reset() {
	*x = CosmeticUsingProtoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmeticUsingProtoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmeticUsingProtoV2) ProtoMessage() {}

func (x *CosmeticUsingProtoV2) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmeticUsingProtoV2.ProtoReflect.Descriptor instead.
func (*CosmeticUsingProtoV2) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{26}
}

func (x *CosmeticUsingProtoV2) GetCosmeticInUsed() map[string]int64 {
	if x != nil {
		return x.CosmeticInUsed
	}
	return nil
}

type CreateMatchOnboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string     `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	LastRound       *RoundStat `protobuf:"bytes,2,opt,name=lastRound,proto3,oneof" json:"lastRound,omitempty"`
	OperationSystem string     `protobuf:"bytes,3,opt,name=operationSystem,proto3" json:"operationSystem,omitempty"`
	AppVersion      string     `protobuf:"bytes,4,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *CreateMatchOnboardRequest) Reset() {
	*x = CreateMatchOnboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchOnboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchOnboardRequest) ProtoMessage() {}

func (x *CreateMatchOnboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchOnboardRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchOnboardRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{27}
}

func (x *CreateMatchOnboardRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateMatchOnboardRequest) GetLastRound() *RoundStat {
	if x != nil {
		return x.LastRound
	}
	return nil
}

func (x *CreateMatchOnboardRequest) GetOperationSystem() string {
	if x != nil {
		return x.OperationSystem
	}
	return ""
}

func (x *CreateMatchOnboardRequest) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

type RoundStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId           int32   `protobuf:"varint,1,opt,name=roundId,proto3" json:"roundId,omitempty"`
	MapId             int32   `protobuf:"varint,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapDifficulty     int32   `protobuf:"varint,3,opt,name=mapDifficulty,proto3" json:"mapDifficulty,omitempty"`
	TimeInRound       float32 `protobuf:"fixed32,4,opt,name=timeInRound,proto3" json:"timeInRound,omitempty"`
	RoundComplete     bool    `protobuf:"varint,5,opt,name=roundComplete,proto3" json:"roundComplete,omitempty"`
	ControlDoubleJump int32   `protobuf:"varint,6,opt,name=controlDoubleJump,proto3" json:"controlDoubleJump,omitempty"`
	ControlMoveCamera int32   `protobuf:"varint,7,opt,name=controlMoveCamera,proto3" json:"controlMoveCamera,omitempty"`
	PassedCP          int32   `protobuf:"varint,8,opt,name=passedCP,proto3" json:"passedCP,omitempty"`
	MaxCP             int32   `protobuf:"varint,9,opt,name=maxCP,proto3" json:"maxCP,omitempty"`
}

func (x *RoundStat) Reset() {
	*x = RoundStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStat) ProtoMessage() {}

func (x *RoundStat) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStat.ProtoReflect.Descriptor instead.
func (*RoundStat) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{28}
}

func (x *RoundStat) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundStat) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *RoundStat) GetMapDifficulty() int32 {
	if x != nil {
		return x.MapDifficulty
	}
	return 0
}

func (x *RoundStat) GetTimeInRound() float32 {
	if x != nil {
		return x.TimeInRound
	}
	return 0
}

func (x *RoundStat) GetRoundComplete() bool {
	if x != nil {
		return x.RoundComplete
	}
	return false
}

func (x *RoundStat) GetControlDoubleJump() int32 {
	if x != nil {
		return x.ControlDoubleJump
	}
	return 0
}

func (x *RoundStat) GetControlMoveCamera() int32 {
	if x != nil {
		return x.ControlMoveCamera
	}
	return 0
}

func (x *RoundStat) GetPassedCP() int32 {
	if x != nil {
		return x.PassedCP
	}
	return 0
}

func (x *RoundStat) GetMaxCP() int32 {
	if x != nil {
		return x.MaxCP
	}
	return 0
}

type ListErrorPlayer_ErrorPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string         `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	MatchErrorCode MatchErrorCode `protobuf:"varint,2,opt,name=matchErrorCode,proto3,enum=core.proto.MatchErrorCode" json:"matchErrorCode,omitempty"`
}

func (x *ListErrorPlayer_ErrorPlayer) Reset() {
	*x = ListErrorPlayer_ErrorPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListErrorPlayer_ErrorPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListErrorPlayer_ErrorPlayer) ProtoMessage() {}

func (x *ListErrorPlayer_ErrorPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListErrorPlayer_ErrorPlayer.ProtoReflect.Descriptor instead.
func (*ListErrorPlayer_ErrorPlayer) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ListErrorPlayer_ErrorPlayer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListErrorPlayer_ErrorPlayer) GetMatchErrorCode() MatchErrorCode {
	if x != nil {
		return x.MatchErrorCode
	}
	return MatchErrorCode_M_SUCCESS
}

var File_match_proto protoreflect.FileDescriptor

var file_match_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x02, 0x0a, 0x0a, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xcd, 0x02, 0x0a, 0x17,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68,
	0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x22, 0x56, 0x0a, 0x18, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x79,
	0x41, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x6f, 0x70,
	0x68, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x99, 0x03, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x06, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x22, 0xa2,
	0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x41, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x69, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x70,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x7a,
	0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x38, 0x0a, 0x16, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x42,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x65, 0x72, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x46, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x4a, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x22, 0xb9, 0x08, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x6f, 0x70, 0x68,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x6f,
	0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x4a, 0x0a, 0x0f, 0x63,
	0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x56, 0x32, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x12, 0x53, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x1a, 0x3e, 0x0a, 0x10,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x79, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6c, 0x79, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x67, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x72, 0x61, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x67, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xcf,
	0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x73,
	0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x57, 0x53, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x1a, 0x69, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x54, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x42, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2d, 0x0a, 0x0d, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x0c, 0x42, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x22,
	0xb7, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x32, 0x12, 0x5c, 0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x56, 0x32, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74,
	0x69, 0x63, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0xb7, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4a, 0x75,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x6f, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x43, 0x50, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x43, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x43, 0x50, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x43, 0x50, 0x2a, 0x97, 0x05, 0x0a, 0x0e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x63, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x57, 0x48, 0x45, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x42, 0x45, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x07, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49,
	0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48, 0x41,
	0x56, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x5f, 0x46,
	0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x10, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45,
	0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x7a, 0x12, 0x1b, 0x0a,
	0x17, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x7b, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x4e,
	0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53,
	0x5f, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x7c, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x7d, 0x12, 0x13, 0x0a, 0x0e, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0xc2, 0x17, 0x12,
	0x17, 0x0a, 0x12, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xc3, 0x17, 0x12, 0x15, 0x0a, 0x10, 0x57, 0x52, 0x4f, 0x4e,
	0x47, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0xce, 0x17, 0x12,
	0x15, 0x0a, 0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0xb0, 0x18, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x49,
	0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x10, 0xb4, 0x18, 0x12, 0x1b, 0x0a,
	0x16, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0xb5, 0x18, 0x12, 0x19, 0x0a, 0x14, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x10, 0xb7, 0x18, 0x2a, 0x3d, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x61, 0x73, 0x79, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x61,
	0x72, 0x64, 0x10, 0x03, 0x32, 0x9e, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x53, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xba, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x12,
	0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0x89, 0x02, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x42, 0x72,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0b,
	0x2e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x43, 0x50,
	0x58, 0xaa, 0x02, 0x0a, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02,
	0x0a, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xe2, 0x02, 0x16, 0x43, 0x6f,
	0x72, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData = file_match_proto_rawDesc
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_proto_rawDescData)
	})
	return file_match_proto_rawDescData
}

var file_match_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_match_proto_goTypes = []interface{}{
	(MatchErrorCode)(0),                 // 0: core.proto.MatchErrorCode
	(MapDifficultyEnum)(0),              // 1: core.proto.MapDifficultyEnum
	(*TicketData)(nil),                  // 2: core.proto.TicketData
	(*MatchMakingRequestProto)(nil),     // 3: core.proto.MatchMakingRequestProto
	(*MatchMakingDataPlayAgain)(nil),    // 4: core.proto.MatchMakingDataPlayAgain
	(*DataPlayAgainSuccess)(nil),        // 5: core.proto.DataPlayAgainSuccess
	(*MatchFoundResponseProto)(nil),     // 6: core.proto.MatchFoundResponseProto
	(*PlayerStat)(nil),                  // 7: core.proto.PlayerStat
	(*MapDataProto)(nil),                // 8: core.proto.MapDataProto
	(*MatchDataBattleLogProto)(nil),     // 9: core.proto.MatchDataBattleLogProto
	(*MatchStartRequestProto)(nil),      // 10: core.proto.MatchStartRequestProto
	(*MatchEndRequestProto)(nil),        // 11: core.proto.MatchEndRequestProto
	(*PlayerInfoEndMatchProto)(nil),     // 12: core.proto.PlayerInfoEndMatchProto
	(*MatchDataResponseProto)(nil),      // 13: core.proto.MatchDataResponseProto
	(*MatchDataReconnect)(nil),          // 14: core.proto.MatchDataReconnect
	(*PlayerInfoMatchProto)(nil),        // 15: core.proto.PlayerInfoMatchProto
	(*CosmeticUsingProto)(nil),          // 16: core.proto.CosmeticUsingProto
	(*DeleteTicketSuccess)(nil),         // 17: core.proto.DeleteTicketSuccess
	(*MatchProtoPackage)(nil),           // 18: core.proto.MatchProtoPackage
	(*TicketDataCache)(nil),             // 19: core.proto.TicketDataCache
	(*TicketCacheWSOnly)(nil),           // 20: core.proto.TicketCacheWSOnly
	(*ListErrorPlayer)(nil),             // 21: core.proto.ListErrorPlayer
	(*MatchProtoVersionPackage)(nil),    // 22: core.proto.MatchProtoVersionPackage
	(*CancelMatchRequest)(nil),          // 23: core.proto.CancelMatchRequest
	(*MatchExtension)(nil),              // 24: core.proto.MatchExtension
	(*EmptyResponse)(nil),               // 25: core.proto.EmptyResponse
	(*BotsResponse)(nil),                // 26: core.proto.BotsResponse
	(*GetBotsRequest)(nil),              // 27: core.proto.GetBotsRequest
	(*CosmeticUsingProtoV2)(nil),        // 28: core.proto.CosmeticUsingProtoV2
	(*CreateMatchOnboardRequest)(nil),   // 29: core.proto.CreateMatchOnboardRequest
	(*RoundStat)(nil),                   // 30: core.proto.RoundStat
	nil,                                 // 31: core.proto.PlayerInfoMatchProto.RoundPlayedEntry
	(*ListErrorPlayer_ErrorPlayer)(nil), // 32: core.proto.ListErrorPlayer.ErrorPlayer
	nil,                                 // 33: core.proto.CosmeticUsingProtoV2.CosmeticInUsedEntry
	(GameMode)(0),                       // 34: core.proto.GameMode
	(InGameMode)(0),                     // 35: core.proto.InGameMode
}
var file_match_proto_depIdxs = []int32{
	34, // 0: core.proto.TicketData.gameMode:type_name -> core.proto.GameMode
	35, // 1: core.proto.TicketData.inGameMode:type_name -> core.proto.InGameMode
	15, // 2: core.proto.TicketData.players:type_name -> core.proto.PlayerInfoMatchProto
	34, // 3: core.proto.MatchMakingRequestProto.gameMode:type_name -> core.proto.GameMode
	35, // 4: core.proto.MatchMakingRequestProto.inGameMode:type_name -> core.proto.InGameMode
	15, // 5: core.proto.MatchMakingRequestProto.players:type_name -> core.proto.PlayerInfoMatchProto
	15, // 6: core.proto.MatchMakingDataPlayAgain.players:type_name -> core.proto.PlayerInfoMatchProto
	35, // 7: core.proto.DataPlayAgainSuccess.inGameMode:type_name -> core.proto.InGameMode
	15, // 8: core.proto.MatchFoundResponseProto.players:type_name -> core.proto.PlayerInfoMatchProto
	34, // 9: core.proto.MatchFoundResponseProto.gameMode:type_name -> core.proto.GameMode
	35, // 10: core.proto.MatchFoundResponseProto.inGameMode:type_name -> core.proto.InGameMode
	8,  // 11: core.proto.MatchFoundResponseProto.mapIds:type_name -> core.proto.MapDataProto
	7,  // 12: core.proto.MatchFoundResponseProto.playerStat:type_name -> core.proto.PlayerStat
	1,  // 13: core.proto.MapDataProto.mapDifficulty:type_name -> core.proto.MapDifficultyEnum
	12, // 14: core.proto.MatchDataBattleLogProto.players:type_name -> core.proto.PlayerInfoEndMatchProto
	12, // 15: core.proto.MatchEndRequestProto.players:type_name -> core.proto.PlayerInfoEndMatchProto
	9,  // 16: core.proto.MatchDataResponseProto.battleLog:type_name -> core.proto.MatchDataBattleLogProto
	14, // 17: core.proto.MatchDataResponseProto.dataReconnect:type_name -> core.proto.MatchDataReconnect
	34, // 18: core.proto.MatchDataResponseProto.gameMode:type_name -> core.proto.GameMode
	35, // 19: core.proto.MatchDataResponseProto.inGameMode:type_name -> core.proto.InGameMode
	16, // 20: core.proto.PlayerInfoMatchProto.cosmeticUsing:type_name -> core.proto.CosmeticUsingProto
	28, // 21: core.proto.PlayerInfoMatchProto.cosmeticUsingV2:type_name -> core.proto.CosmeticUsingProtoV2
	31, // 22: core.proto.PlayerInfoMatchProto.roundPlayed:type_name -> core.proto.PlayerInfoMatchProto.RoundPlayedEntry
	21, // 23: core.proto.MatchProtoPackage.listErrorPlayer:type_name -> core.proto.ListErrorPlayer
	35, // 24: core.proto.TicketDataCache.inGameMode:type_name -> core.proto.InGameMode
	32, // 25: core.proto.ListErrorPlayer.errorPlayers:type_name -> core.proto.ListErrorPlayer.ErrorPlayer
	15, // 26: core.proto.BotsResponse.bots:type_name -> core.proto.PlayerInfoMatchProto
	33, // 27: core.proto.CosmeticUsingProtoV2.cosmeticInUsed:type_name -> core.proto.CosmeticUsingProtoV2.CosmeticInUsedEntry
	30, // 28: core.proto.CreateMatchOnboardRequest.lastRound:type_name -> core.proto.RoundStat
	0,  // 29: core.proto.ListErrorPlayer.ErrorPlayer.matchErrorCode:type_name -> core.proto.MatchErrorCode
	22, // 30: core.proto.MatchService.CreateMatchWithVersion:input_type -> core.proto.MatchProtoVersionPackage
	18, // 31: core.proto.MatchService.RegisterMatchFound:input_type -> core.proto.MatchProtoPackage
	18, // 32: core.proto.MatchService.CancelMatchMaking:input_type -> core.proto.MatchProtoPackage
	5,  // 33: core.proto.MatchHandleService.HandlePlayAgain:input_type -> core.proto.DataPlayAgainSuccess
	17, // 34: core.proto.MatchHandleService.HandleDeleteTicket:input_type -> core.proto.DeleteTicketSuccess
	18, // 35: core.proto.MatchDirectorService.CancelTicket:input_type -> core.proto.MatchProtoPackage
	27, // 36: core.proto.MatchDirectorService.GetBots:input_type -> core.proto.GetBotsRequest
	29, // 37: core.proto.MatchDirectorService.CreateMatchOnboard:input_type -> core.proto.CreateMatchOnboardRequest
	18, // 38: core.proto.MatchService.CreateMatchWithVersion:output_type -> core.proto.MatchProtoPackage
	18, // 39: core.proto.MatchService.RegisterMatchFound:output_type -> core.proto.MatchProtoPackage
	18, // 40: core.proto.MatchService.CancelMatchMaking:output_type -> core.proto.MatchProtoPackage
	25, // 41: core.proto.MatchHandleService.HandlePlayAgain:output_type -> core.proto.EmptyResponse
	25, // 42: core.proto.MatchHandleService.HandleDeleteTicket:output_type -> core.proto.EmptyResponse
	25, // 43: core.proto.MatchDirectorService.CancelTicket:output_type -> core.proto.EmptyResponse
	26, // 44: core.proto.MatchDirectorService.GetBots:output_type -> core.proto.BotsResponse
	6,  // 45: core.proto.MatchDirectorService.CreateMatchOnboard:output_type -> core.proto.MatchFoundResponseProto
	38, // [38:46] is the sub-list for method output_type
	30, // [30:38] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	file_game_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMakingRequestProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMakingDataPlayAgain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlayAgainSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFoundResponseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapDataProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDataBattleLogProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStartRequestProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEndRequestProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfoEndMatchProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDataResponseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDataReconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfoMatchProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmeticUsingProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchProtoPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketDataCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCacheWSOnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListErrorPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchProtoVersionPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmeticUsingProtoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchOnboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListErrorPlayer_ErrorPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_match_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*MatchDataResponseProto_BattleLog)(nil),
		(*MatchDataResponseProto_DataReconnect)(nil),
		(*MatchDataResponseProto_MatchNotStart)(nil),
	}
	file_match_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MatchProtoPackage_Data)(nil),
		(*MatchProtoPackage_ListErrorPlayer)(nil),
		(*MatchProtoPackage_ErrorCode)(nil),
	}
	file_match_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*MatchProtoVersionPackage_Data)(nil),
		(*MatchProtoVersionPackage_ErrorCode)(nil),
	}
	file_match_proto_msgTypes[27].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		EnumInfos:         file_match_proto_enumTypes,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_rawDesc = nil
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
