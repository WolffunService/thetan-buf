// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: Result.proto

package genconnect

import (
	context "context"
	errors "errors"
	gen "github.com/WolffunService/thetan-buf/gen"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GRPCResultName is the fully-qualified name of the GRPCResult service.
	GRPCResultName = "GRPCResult"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GRPCResultGetMatchResultProcedure is the fully-qualified name of the GRPCResult's GetMatchResult
	// RPC.
	GRPCResultGetMatchResultProcedure = "/GRPCResult/GetMatchResult"
)

// GRPCResultClient is a client for the GRPCResult service.
type GRPCResultClient interface {
	GetMatchResult(context.Context, *connect_go.Request[gen.MatchResultRequest]) (*connect_go.Response[gen.MatchResultReply], error)
}

// NewGRPCResultClient constructs a client for the GRPCResult service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGRPCResultClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GRPCResultClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gRPCResultClient{
		getMatchResult: connect_go.NewClient[gen.MatchResultRequest, gen.MatchResultReply](
			httpClient,
			baseURL+GRPCResultGetMatchResultProcedure,
			opts...,
		),
	}
}

// gRPCResultClient implements GRPCResultClient.
type gRPCResultClient struct {
	getMatchResult *connect_go.Client[gen.MatchResultRequest, gen.MatchResultReply]
}

// GetMatchResult calls GRPCResult.GetMatchResult.
func (c *gRPCResultClient) GetMatchResult(ctx context.Context, req *connect_go.Request[gen.MatchResultRequest]) (*connect_go.Response[gen.MatchResultReply], error) {
	return c.getMatchResult.CallUnary(ctx, req)
}

// GRPCResultHandler is an implementation of the GRPCResult service.
type GRPCResultHandler interface {
	GetMatchResult(context.Context, *connect_go.Request[gen.MatchResultRequest]) (*connect_go.Response[gen.MatchResultReply], error)
}

// NewGRPCResultHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGRPCResultHandler(svc GRPCResultHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GRPCResultGetMatchResultProcedure, connect_go.NewUnaryHandler(
		GRPCResultGetMatchResultProcedure,
		svc.GetMatchResult,
		opts...,
	))
	return "/.GRPCResult/", mux
}

// UnimplementedGRPCResultHandler returns CodeUnimplemented from all methods.
type UnimplementedGRPCResultHandler struct{}

func (UnimplementedGRPCResultHandler) GetMatchResult(context.Context, *connect_go.Request[gen.MatchResultRequest]) (*connect_go.Response[gen.MatchResultReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("GRPCResult.GetMatchResult is not implemented"))
}
