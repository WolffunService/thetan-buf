// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service_firebase.proto

package genconnect

import (
	context "context"
	errors "errors"
	gen "github.com/WolffunService/thetan-buf/gen"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FirebaseServiceName is the fully-qualified name of the FirebaseService service.
	FirebaseServiceName = "services.FirebaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FirebaseServiceTrackPlayerStatProcedure is the fully-qualified name of the FirebaseService's
	// TrackPlayerStat RPC.
	FirebaseServiceTrackPlayerStatProcedure = "/services.FirebaseService/TrackPlayerStat"
)

// FirebaseServiceClient is a client for the services.FirebaseService service.
type FirebaseServiceClient interface {
	TrackPlayerStat(context.Context, *connect_go.Request[gen.TrackPlayerStatRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewFirebaseServiceClient constructs a client for the services.FirebaseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFirebaseServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FirebaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &firebaseServiceClient{
		trackPlayerStat: connect_go.NewClient[gen.TrackPlayerStatRequest, emptypb.Empty](
			httpClient,
			baseURL+FirebaseServiceTrackPlayerStatProcedure,
			opts...,
		),
	}
}

// firebaseServiceClient implements FirebaseServiceClient.
type firebaseServiceClient struct {
	trackPlayerStat *connect_go.Client[gen.TrackPlayerStatRequest, emptypb.Empty]
}

// TrackPlayerStat calls services.FirebaseService.TrackPlayerStat.
func (c *firebaseServiceClient) TrackPlayerStat(ctx context.Context, req *connect_go.Request[gen.TrackPlayerStatRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.trackPlayerStat.CallUnary(ctx, req)
}

// FirebaseServiceHandler is an implementation of the services.FirebaseService service.
type FirebaseServiceHandler interface {
	TrackPlayerStat(context.Context, *connect_go.Request[gen.TrackPlayerStatRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewFirebaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFirebaseServiceHandler(svc FirebaseServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(FirebaseServiceTrackPlayerStatProcedure, connect_go.NewUnaryHandler(
		FirebaseServiceTrackPlayerStatProcedure,
		svc.TrackPlayerStat,
		opts...,
	))
	return "/services.FirebaseService/", mux
}

// UnimplementedFirebaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFirebaseServiceHandler struct{}

func (UnimplementedFirebaseServiceHandler) TrackPlayerStat(context.Context, *connect_go.Request[gen.TrackPlayerStatRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.FirebaseService.TrackPlayerStat is not implemented"))
}
