// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/rivals/v1/service_rivals.proto

package thetan_rivals_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockThetanRivalServiceClient is a mock of ThetanRivalServiceClient interface.
type MockThetanRivalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockThetanRivalServiceClientMockRecorder
}

// MockThetanRivalServiceClientMockRecorder is the mock recorder for MockThetanRivalServiceClient.
type MockThetanRivalServiceClientMockRecorder struct {
	mock *MockThetanRivalServiceClient
}

// NewMockThetanRivalServiceClient creates a new mock instance.
func NewMockThetanRivalServiceClient(ctrl *gomock.Controller) *MockThetanRivalServiceClient {
	mock := &MockThetanRivalServiceClient{ctrl: ctrl}
	mock.recorder = &MockThetanRivalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanRivalServiceClient) EXPECT() *MockThetanRivalServiceClientMockRecorder {
	return m.recorder
}

// CreateMinion mocks base method.
func (m *MockThetanRivalServiceClient) CreateMinion(ctx context.Context, in *CreateMinionRequest, opts ...grpc.CallOption) (*CreateMinionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMinion", varargs...)
	ret0, _ := ret[0].(*CreateMinionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMinion indicates an expected call of CreateMinion.
func (mr *MockThetanRivalServiceClientMockRecorder) CreateMinion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMinion", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).CreateMinion), varargs...)
}

// GetActiveTournaments mocks base method.
func (m *MockThetanRivalServiceClient) GetActiveTournaments(ctx context.Context, in *GetActiveTournamentsRequest, opts ...grpc.CallOption) (*GetActiveTournamentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActiveTournaments", varargs...)
	ret0, _ := ret[0].(*GetActiveTournamentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTournaments indicates an expected call of GetActiveTournaments.
func (mr *MockThetanRivalServiceClientMockRecorder) GetActiveTournaments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTournaments", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetActiveTournaments), varargs...)
}

// GetConfigForBot mocks base method.
func (m *MockThetanRivalServiceClient) GetConfigForBot(ctx context.Context, in *GetConfigForBotRequest, opts ...grpc.CallOption) (*GetConfigForBotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigForBot", varargs...)
	ret0, _ := ret[0].(*GetConfigForBotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigForBot indicates an expected call of GetConfigForBot.
func (mr *MockThetanRivalServiceClientMockRecorder) GetConfigForBot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigForBot", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetConfigForBot), varargs...)
}

// GetFindMatchInfo mocks base method.
func (m *MockThetanRivalServiceClient) GetFindMatchInfo(ctx context.Context, in *FindMatchInfoRequest, opts ...grpc.CallOption) (*FindMatchInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindMatchInfo", varargs...)
	ret0, _ := ret[0].(*FindMatchInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindMatchInfo indicates an expected call of GetFindMatchInfo.
func (mr *MockThetanRivalServiceClientMockRecorder) GetFindMatchInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindMatchInfo", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetFindMatchInfo), varargs...)
}

// GetFindMatchInfoForTournament mocks base method.
func (m *MockThetanRivalServiceClient) GetFindMatchInfoForTournament(ctx context.Context, in *FindMatchInfoForTournamentRequest, opts ...grpc.CallOption) (*FindMatchInfoForTournamentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindMatchInfoForTournament", varargs...)
	ret0, _ := ret[0].(*FindMatchInfoForTournamentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindMatchInfoForTournament indicates an expected call of GetFindMatchInfoForTournament.
func (mr *MockThetanRivalServiceClientMockRecorder) GetFindMatchInfoForTournament(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindMatchInfoForTournament", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetFindMatchInfoForTournament), varargs...)
}

// GetLatestLobbyActivityInfo mocks base method.
func (m *MockThetanRivalServiceClient) GetLatestLobbyActivityInfo(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestLobbyActivityInfo", varargs...)
	ret0, _ := ret[0].(*GetActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestLobbyActivityInfo indicates an expected call of GetLatestLobbyActivityInfo.
func (mr *MockThetanRivalServiceClientMockRecorder) GetLatestLobbyActivityInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestLobbyActivityInfo", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetLatestLobbyActivityInfo), varargs...)
}

// GetListFriends mocks base method.
func (m *MockThetanRivalServiceClient) GetListFriends(ctx context.Context, in *GetUserFriendRequest, opts ...grpc.CallOption) (*GetUserFriendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListFriends", varargs...)
	ret0, _ := ret[0].(*GetUserFriendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListFriends indicates an expected call of GetListFriends.
func (mr *MockThetanRivalServiceClientMockRecorder) GetListFriends(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListFriends", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetListFriends), varargs...)
}

// GetMatchInfoOnboarding mocks base method.
func (m *MockThetanRivalServiceClient) GetMatchInfoOnboarding(ctx context.Context, in *GetMatchInfoRequest, opts ...grpc.CallOption) (*GetMatchInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchInfoOnboarding", varargs...)
	ret0, _ := ret[0].(*GetMatchInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchInfoOnboarding indicates an expected call of GetMatchInfoOnboarding.
func (mr *MockThetanRivalServiceClientMockRecorder) GetMatchInfoOnboarding(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchInfoOnboarding", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetMatchInfoOnboarding), varargs...)
}

// GetMinion mocks base method.
func (m *MockThetanRivalServiceClient) GetMinion(ctx context.Context, in *MinionRequest, opts ...grpc.CallOption) (*MinionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMinion", varargs...)
	ret0, _ := ret[0].(*MinionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinion indicates an expected call of GetMinion.
func (mr *MockThetanRivalServiceClientMockRecorder) GetMinion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinion", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetMinion), varargs...)
}

// GetProfile mocks base method.
func (m *MockThetanRivalServiceClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockThetanRivalServiceClientMockRecorder) GetProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetProfile), varargs...)
}

// GetTownUser mocks base method.
func (m *MockThetanRivalServiceClient) GetTownUser(ctx context.Context, in *GetTownUserRequest, opts ...grpc.CallOption) (*LobbyTown, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTownUser", varargs...)
	ret0, _ := ret[0].(*LobbyTown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTownUser indicates an expected call of GetTownUser.
func (mr *MockThetanRivalServiceClientMockRecorder) GetTownUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTownUser", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetTownUser), varargs...)
}

// GetUserMinions mocks base method.
func (m *MockThetanRivalServiceClient) GetUserMinions(ctx context.Context, in *UserMinionsRequest, opts ...grpc.CallOption) (*UserMinionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserMinions", varargs...)
	ret0, _ := ret[0].(*UserMinionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMinions indicates an expected call of GetUserMinions.
func (mr *MockThetanRivalServiceClientMockRecorder) GetUserMinions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMinions", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetUserMinions), varargs...)
}

// GetUserProfile mocks base method.
func (m *MockThetanRivalServiceClient) GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserProfile", varargs...)
	ret0, _ := ret[0].(*UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockThetanRivalServiceClientMockRecorder) GetUserProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetUserProfile), varargs...)
}

// GetUserSelectedMinion mocks base method.
func (m *MockThetanRivalServiceClient) GetUserSelectedMinion(ctx context.Context, in *UserSelectedMinionRequest, opts ...grpc.CallOption) (*UserSelectedMinionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserSelectedMinion", varargs...)
	ret0, _ := ret[0].(*UserSelectedMinionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSelectedMinion indicates an expected call of GetUserSelectedMinion.
func (mr *MockThetanRivalServiceClientMockRecorder) GetUserSelectedMinion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSelectedMinion", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).GetUserSelectedMinion), varargs...)
}

// MatchFoundTournament mocks base method.
func (m *MockThetanRivalServiceClient) MatchFoundTournament(ctx context.Context, in *MatchFoundTournamentRequest, opts ...grpc.CallOption) (*MatchFoundTournamentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchFoundTournament", varargs...)
	ret0, _ := ret[0].(*MatchFoundTournamentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchFoundTournament indicates an expected call of MatchFoundTournament.
func (mr *MockThetanRivalServiceClientMockRecorder) MatchFoundTournament(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchFoundTournament", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).MatchFoundTournament), varargs...)
}

// PickTownForUser mocks base method.
func (m *MockThetanRivalServiceClient) PickTownForUser(ctx context.Context, in *PickTownUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PickTownForUser", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PickTownForUser indicates an expected call of PickTownForUser.
func (mr *MockThetanRivalServiceClientMockRecorder) PickTownForUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickTownForUser", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).PickTownForUser), varargs...)
}

// TrackSession mocks base method.
func (m *MockThetanRivalServiceClient) TrackSession(ctx context.Context, in *TrackSessionRequest, opts ...grpc.CallOption) (*TrackSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackSession", varargs...)
	ret0, _ := ret[0].(*TrackSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackSession indicates an expected call of TrackSession.
func (mr *MockThetanRivalServiceClientMockRecorder) TrackSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackSession", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).TrackSession), varargs...)
}

// TrackSessionLobby mocks base method.
func (m *MockThetanRivalServiceClient) TrackSessionLobby(ctx context.Context, in *TrackSessionLobbyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackSessionLobby", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackSessionLobby indicates an expected call of TrackSessionLobby.
func (mr *MockThetanRivalServiceClientMockRecorder) TrackSessionLobby(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackSessionLobby", reflect.TypeOf((*MockThetanRivalServiceClient)(nil).TrackSessionLobby), varargs...)
}

// MockThetanRivalServiceServer is a mock of ThetanRivalServiceServer interface.
type MockThetanRivalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockThetanRivalServiceServerMockRecorder
}

// MockThetanRivalServiceServerMockRecorder is the mock recorder for MockThetanRivalServiceServer.
type MockThetanRivalServiceServerMockRecorder struct {
	mock *MockThetanRivalServiceServer
}

// NewMockThetanRivalServiceServer creates a new mock instance.
func NewMockThetanRivalServiceServer(ctrl *gomock.Controller) *MockThetanRivalServiceServer {
	mock := &MockThetanRivalServiceServer{ctrl: ctrl}
	mock.recorder = &MockThetanRivalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanRivalServiceServer) EXPECT() *MockThetanRivalServiceServerMockRecorder {
	return m.recorder
}

// CreateMinion mocks base method.
func (m *MockThetanRivalServiceServer) CreateMinion(ctx context.Context, in *CreateMinionRequest) (*CreateMinionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMinion", ctx, in)
	ret0, _ := ret[0].(*CreateMinionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMinion indicates an expected call of CreateMinion.
func (mr *MockThetanRivalServiceServerMockRecorder) CreateMinion(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMinion", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).CreateMinion), ctx, in)
}

// GetActiveTournaments mocks base method.
func (m *MockThetanRivalServiceServer) GetActiveTournaments(ctx context.Context, in *GetActiveTournamentsRequest) (*GetActiveTournamentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTournaments", ctx, in)
	ret0, _ := ret[0].(*GetActiveTournamentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTournaments indicates an expected call of GetActiveTournaments.
func (mr *MockThetanRivalServiceServerMockRecorder) GetActiveTournaments(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTournaments", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetActiveTournaments), ctx, in)
}

// GetConfigForBot mocks base method.
func (m *MockThetanRivalServiceServer) GetConfigForBot(ctx context.Context, in *GetConfigForBotRequest) (*GetConfigForBotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigForBot", ctx, in)
	ret0, _ := ret[0].(*GetConfigForBotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigForBot indicates an expected call of GetConfigForBot.
func (mr *MockThetanRivalServiceServerMockRecorder) GetConfigForBot(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigForBot", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetConfigForBot), ctx, in)
}

// GetFindMatchInfo mocks base method.
func (m *MockThetanRivalServiceServer) GetFindMatchInfo(ctx context.Context, in *FindMatchInfoRequest) (*FindMatchInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindMatchInfo", ctx, in)
	ret0, _ := ret[0].(*FindMatchInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindMatchInfo indicates an expected call of GetFindMatchInfo.
func (mr *MockThetanRivalServiceServerMockRecorder) GetFindMatchInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindMatchInfo", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetFindMatchInfo), ctx, in)
}

// GetFindMatchInfoForTournament mocks base method.
func (m *MockThetanRivalServiceServer) GetFindMatchInfoForTournament(ctx context.Context, in *FindMatchInfoForTournamentRequest) (*FindMatchInfoForTournamentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindMatchInfoForTournament", ctx, in)
	ret0, _ := ret[0].(*FindMatchInfoForTournamentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindMatchInfoForTournament indicates an expected call of GetFindMatchInfoForTournament.
func (mr *MockThetanRivalServiceServerMockRecorder) GetFindMatchInfoForTournament(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindMatchInfoForTournament", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetFindMatchInfoForTournament), ctx, in)
}

// GetLatestLobbyActivityInfo mocks base method.
func (m *MockThetanRivalServiceServer) GetLatestLobbyActivityInfo(ctx context.Context, in *GetActivityRequest) (*GetActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestLobbyActivityInfo", ctx, in)
	ret0, _ := ret[0].(*GetActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestLobbyActivityInfo indicates an expected call of GetLatestLobbyActivityInfo.
func (mr *MockThetanRivalServiceServerMockRecorder) GetLatestLobbyActivityInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestLobbyActivityInfo", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetLatestLobbyActivityInfo), ctx, in)
}

// GetListFriends mocks base method.
func (m *MockThetanRivalServiceServer) GetListFriends(ctx context.Context, in *GetUserFriendRequest) (*GetUserFriendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListFriends", ctx, in)
	ret0, _ := ret[0].(*GetUserFriendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListFriends indicates an expected call of GetListFriends.
func (mr *MockThetanRivalServiceServerMockRecorder) GetListFriends(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListFriends", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetListFriends), ctx, in)
}

// GetMatchInfoOnboarding mocks base method.
func (m *MockThetanRivalServiceServer) GetMatchInfoOnboarding(ctx context.Context, in *GetMatchInfoRequest) (*GetMatchInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchInfoOnboarding", ctx, in)
	ret0, _ := ret[0].(*GetMatchInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchInfoOnboarding indicates an expected call of GetMatchInfoOnboarding.
func (mr *MockThetanRivalServiceServerMockRecorder) GetMatchInfoOnboarding(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchInfoOnboarding", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetMatchInfoOnboarding), ctx, in)
}

// GetMinion mocks base method.
func (m *MockThetanRivalServiceServer) GetMinion(ctx context.Context, in *MinionRequest) (*MinionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinion", ctx, in)
	ret0, _ := ret[0].(*MinionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinion indicates an expected call of GetMinion.
func (mr *MockThetanRivalServiceServerMockRecorder) GetMinion(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinion", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetMinion), ctx, in)
}

// GetProfile mocks base method.
func (m *MockThetanRivalServiceServer) GetProfile(ctx context.Context, in *ProfileRequest) (*ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, in)
	ret0, _ := ret[0].(*ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockThetanRivalServiceServerMockRecorder) GetProfile(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetProfile), ctx, in)
}

// GetTownUser mocks base method.
func (m *MockThetanRivalServiceServer) GetTownUser(ctx context.Context, in *GetTownUserRequest) (*LobbyTown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTownUser", ctx, in)
	ret0, _ := ret[0].(*LobbyTown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTownUser indicates an expected call of GetTownUser.
func (mr *MockThetanRivalServiceServerMockRecorder) GetTownUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTownUser", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetTownUser), ctx, in)
}

// GetUserMinions mocks base method.
func (m *MockThetanRivalServiceServer) GetUserMinions(ctx context.Context, in *UserMinionsRequest) (*UserMinionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMinions", ctx, in)
	ret0, _ := ret[0].(*UserMinionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMinions indicates an expected call of GetUserMinions.
func (mr *MockThetanRivalServiceServerMockRecorder) GetUserMinions(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMinions", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetUserMinions), ctx, in)
}

// GetUserProfile mocks base method.
func (m *MockThetanRivalServiceServer) GetUserProfile(ctx context.Context, in *UserProfileRequest) (*UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, in)
	ret0, _ := ret[0].(*UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockThetanRivalServiceServerMockRecorder) GetUserProfile(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetUserProfile), ctx, in)
}

// GetUserSelectedMinion mocks base method.
func (m *MockThetanRivalServiceServer) GetUserSelectedMinion(ctx context.Context, in *UserSelectedMinionRequest) (*UserSelectedMinionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSelectedMinion", ctx, in)
	ret0, _ := ret[0].(*UserSelectedMinionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSelectedMinion indicates an expected call of GetUserSelectedMinion.
func (mr *MockThetanRivalServiceServerMockRecorder) GetUserSelectedMinion(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSelectedMinion", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).GetUserSelectedMinion), ctx, in)
}

// MatchFoundTournament mocks base method.
func (m *MockThetanRivalServiceServer) MatchFoundTournament(ctx context.Context, in *MatchFoundTournamentRequest) (*MatchFoundTournamentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchFoundTournament", ctx, in)
	ret0, _ := ret[0].(*MatchFoundTournamentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchFoundTournament indicates an expected call of MatchFoundTournament.
func (mr *MockThetanRivalServiceServerMockRecorder) MatchFoundTournament(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchFoundTournament", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).MatchFoundTournament), ctx, in)
}

// PickTownForUser mocks base method.
func (m *MockThetanRivalServiceServer) PickTownForUser(ctx context.Context, in *PickTownUserRequest) (*EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PickTownForUser", ctx, in)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PickTownForUser indicates an expected call of PickTownForUser.
func (mr *MockThetanRivalServiceServerMockRecorder) PickTownForUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickTownForUser", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).PickTownForUser), ctx, in)
}

// TrackSession mocks base method.
func (m *MockThetanRivalServiceServer) TrackSession(ctx context.Context, in *TrackSessionRequest) (*TrackSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackSession", ctx, in)
	ret0, _ := ret[0].(*TrackSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackSession indicates an expected call of TrackSession.
func (mr *MockThetanRivalServiceServerMockRecorder) TrackSession(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackSession", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).TrackSession), ctx, in)
}

// TrackSessionLobby mocks base method.
func (m *MockThetanRivalServiceServer) TrackSessionLobby(ctx context.Context, in *TrackSessionLobbyRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackSessionLobby", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackSessionLobby indicates an expected call of TrackSessionLobby.
func (mr *MockThetanRivalServiceServerMockRecorder) TrackSessionLobby(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackSessionLobby", reflect.TypeOf((*MockThetanRivalServiceServer)(nil).TrackSessionLobby), ctx, in)
}
