// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: thetan/rivals/v1/service_rivals.proto

package thetan_rivals_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	v1 "thetan-buf/gen/go/thetan/shared/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FriendInfo_FRIEND_STATUS int32

const (
	FriendInfo_REQUESTED  FriendInfo_FRIEND_STATUS = 0
	FriendInfo_REQUESTING FriendInfo_FRIEND_STATUS = 1
	FriendInfo_CONFIRMED  FriendInfo_FRIEND_STATUS = 2
)

// Enum value maps for FriendInfo_FRIEND_STATUS.
var (
	FriendInfo_FRIEND_STATUS_name = map[int32]string{
		0: "REQUESTED",
		1: "REQUESTING",
		2: "CONFIRMED",
	}
	FriendInfo_FRIEND_STATUS_value = map[string]int32{
		"REQUESTED":  0,
		"REQUESTING": 1,
		"CONFIRMED":  2,
	}
)

func (x FriendInfo_FRIEND_STATUS) Enum() *FriendInfo_FRIEND_STATUS {
	p := new(FriendInfo_FRIEND_STATUS)
	*p = x
	return p
}

func (x FriendInfo_FRIEND_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendInfo_FRIEND_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_thetan_rivals_v1_service_rivals_proto_enumTypes[0].Descriptor()
}

func (FriendInfo_FRIEND_STATUS) Type() protoreflect.EnumType {
	return &file_thetan_rivals_v1_service_rivals_proto_enumTypes[0]
}

func (x FriendInfo_FRIEND_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendInfo_FRIEND_STATUS.Descriptor instead.
func (FriendInfo_FRIEND_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{26, 0}
}

type MatchFoundTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentID string   `protobuf:"bytes,1,opt,name=tournamentID,proto3" json:"tournamentID,omitempty"`
	PlayerIDs    []string `protobuf:"bytes,2,rep,name=playerIDs,proto3" json:"playerIDs,omitempty"`
}

func (x *MatchFoundTournamentRequest) Reset() {
	*x = MatchFoundTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFoundTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFoundTournamentRequest) ProtoMessage() {}

func (x *MatchFoundTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFoundTournamentRequest.ProtoReflect.Descriptor instead.
func (*MatchFoundTournamentRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{0}
}

func (x *MatchFoundTournamentRequest) GetTournamentID() string {
	if x != nil {
		return x.TournamentID
	}
	return ""
}

func (x *MatchFoundTournamentRequest) GetPlayerIDs() []string {
	if x != nil {
		return x.PlayerIDs
	}
	return nil
}

type MatchFoundTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchFoundTournamentResponse) Reset() {
	*x = MatchFoundTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFoundTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFoundTournamentResponse) ProtoMessage() {}

func (x *MatchFoundTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFoundTournamentResponse.ProtoReflect.Descriptor instead.
func (*MatchFoundTournamentResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{1}
}

type FindMatchInfoForTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentID string   `protobuf:"bytes,1,opt,name=tournamentID,proto3" json:"tournamentID,omitempty"`
	PlayerIDs    []string `protobuf:"bytes,2,rep,name=playerIDs,proto3" json:"playerIDs,omitempty"`
}

func (x *FindMatchInfoForTournamentRequest) Reset() {
	*x = FindMatchInfoForTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMatchInfoForTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMatchInfoForTournamentRequest) ProtoMessage() {}

func (x *FindMatchInfoForTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMatchInfoForTournamentRequest.ProtoReflect.Descriptor instead.
func (*FindMatchInfoForTournamentRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{2}
}

func (x *FindMatchInfoForTournamentRequest) GetTournamentID() string {
	if x != nil {
		return x.TournamentID
	}
	return ""
}

func (x *FindMatchInfoForTournamentRequest) GetPlayerIDs() []string {
	if x != nil {
		return x.PlayerIDs
	}
	return nil
}

type GetConfigForBotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListSkinInfo               []*SkinInfo     `protobuf:"bytes,1,rep,name=listSkinInfo,proto3" json:"listSkinInfo,omitempty"`
	ListCosmeticInfo           []*CosmeticInfo `protobuf:"bytes,2,rep,name=listCosmeticInfo,proto3" json:"listCosmeticInfo,omitempty"`
	CosmeticTypeEvolveSequence []string        `protobuf:"bytes,3,rep,name=cosmeticTypeEvolveSequence,proto3" json:"cosmeticTypeEvolveSequence,omitempty"`
}

func (x *GetConfigForBotResponse) Reset() {
	*x = GetConfigForBotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigForBotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigForBotResponse) ProtoMessage() {}

func (x *GetConfigForBotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigForBotResponse.ProtoReflect.Descriptor instead.
func (*GetConfigForBotResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{3}
}

func (x *GetConfigForBotResponse) GetListSkinInfo() []*SkinInfo {
	if x != nil {
		return x.ListSkinInfo
	}
	return nil
}

func (x *GetConfigForBotResponse) GetListCosmeticInfo() []*CosmeticInfo {
	if x != nil {
		return x.ListCosmeticInfo
	}
	return nil
}

func (x *GetConfigForBotResponse) GetCosmeticTypeEvolveSequence() []string {
	if x != nil {
		return x.CosmeticTypeEvolveSequence
	}
	return nil
}

type SkinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinID     int32 `protobuf:"varint,1,opt,name=skinID,proto3" json:"skinID,omitempty"`
	SkinRarity int32 `protobuf:"varint,2,opt,name=skinRarity,proto3" json:"skinRarity,omitempty"`
}

func (x *SkinInfo) Reset() {
	*x = SkinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinInfo) ProtoMessage() {}

func (x *SkinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinInfo.ProtoReflect.Descriptor instead.
func (*SkinInfo) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{4}
}

func (x *SkinInfo) GetSkinID() int32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *SkinInfo) GetSkinRarity() int32 {
	if x != nil {
		return x.SkinRarity
	}
	return 0
}

type CosmeticInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosmeticID     int32  `protobuf:"varint,1,opt,name=cosmeticID,proto3" json:"cosmeticID,omitempty"`
	CosmeticType   string `protobuf:"bytes,2,opt,name=cosmeticType,proto3" json:"cosmeticType,omitempty"`
	CosmeticRarity int32  `protobuf:"varint,3,opt,name=cosmeticRarity,proto3" json:"cosmeticRarity,omitempty"`
}

func (x *CosmeticInfo) Reset() {
	*x = CosmeticInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmeticInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmeticInfo) ProtoMessage() {}

func (x *CosmeticInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmeticInfo.ProtoReflect.Descriptor instead.
func (*CosmeticInfo) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{5}
}

func (x *CosmeticInfo) GetCosmeticID() int32 {
	if x != nil {
		return x.CosmeticID
	}
	return 0
}

func (x *CosmeticInfo) GetCosmeticType() string {
	if x != nil {
		return x.CosmeticType
	}
	return ""
}

func (x *CosmeticInfo) GetCosmeticRarity() int32 {
	if x != nil {
		return x.CosmeticRarity
	}
	return 0
}

type GetConfigForBotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigForBotRequest) Reset() {
	*x = GetConfigForBotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigForBotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigForBotRequest) ProtoMessage() {}

func (x *GetConfigForBotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigForBotRequest.ProtoReflect.Descriptor instead.
func (*GetConfigForBotRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{6}
}

type GetActiveTournamentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetActiveTournamentsRequest) Reset() {
	*x = GetActiveTournamentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveTournamentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveTournamentsRequest) ProtoMessage() {}

func (x *GetActiveTournamentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveTournamentsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveTournamentsRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{7}
}

type GetActiveTournamentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournaments []*TournamentInfo `protobuf:"bytes,1,rep,name=Tournaments,proto3" json:"Tournaments,omitempty"`
}

func (x *GetActiveTournamentsResponse) Reset() {
	*x = GetActiveTournamentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveTournamentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveTournamentsResponse) ProtoMessage() {}

func (x *GetActiveTournamentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveTournamentsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveTournamentsResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{8}
}

func (x *GetActiveTournamentsResponse) GetTournaments() []*TournamentInfo {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type TournamentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentID       string     `protobuf:"bytes,1,opt,name=tournamentID,proto3" json:"tournamentID,omitempty"`
	Tag                string     `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	CurrentMaps        []*MapInfo `protobuf:"bytes,3,rep,name=currentMaps,proto3" json:"currentMaps,omitempty"`
	MaxPlayersInBattle int32      `protobuf:"varint,4,opt,name=maxPlayersInBattle,proto3" json:"maxPlayersInBattle,omitempty"`
	MaxTimeInBattleSec int32      `protobuf:"varint,5,opt,name=maxTimeInBattleSec,proto3" json:"maxTimeInBattleSec,omitempty"`
}

func (x *TournamentInfo) Reset() {
	*x = TournamentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentInfo) ProtoMessage() {}

func (x *TournamentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentInfo.ProtoReflect.Descriptor instead.
func (*TournamentInfo) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{9}
}

func (x *TournamentInfo) GetTournamentID() string {
	if x != nil {
		return x.TournamentID
	}
	return ""
}

func (x *TournamentInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TournamentInfo) GetCurrentMaps() []*MapInfo {
	if x != nil {
		return x.CurrentMaps
	}
	return nil
}

func (x *TournamentInfo) GetMaxPlayersInBattle() int32 {
	if x != nil {
		return x.MaxPlayersInBattle
	}
	return 0
}

func (x *TournamentInfo) GetMaxTimeInBattleSec() int32 {
	if x != nil {
		return x.MaxTimeInBattleSec
	}
	return 0
}

type MapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapID         int32 `protobuf:"varint,1,opt,name=mapID,proto3" json:"mapID,omitempty"`
	MapDifficulty int32 `protobuf:"varint,2,opt,name=mapDifficulty,proto3" json:"mapDifficulty,omitempty"`
}

func (x *MapInfo) Reset() {
	*x = MapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInfo) ProtoMessage() {}

func (x *MapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInfo.ProtoReflect.Descriptor instead.
func (*MapInfo) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{10}
}

func (x *MapInfo) GetMapID() int32 {
	if x != nil {
		return x.MapID
	}
	return 0
}

func (x *MapInfo) GetMapDifficulty() int32 {
	if x != nil {
		return x.MapDifficulty
	}
	return 0
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{11}
}

type UserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	WithRanking bool   `protobuf:"varint,2,opt,name=withRanking,proto3" json:"withRanking,omitempty"`
}

func (x *UserProfileRequest) Reset() {
	*x = UserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRequest) ProtoMessage() {}

func (x *UserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRequest.ProtoReflect.Descriptor instead.
func (*UserProfileRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{12}
}

func (x *UserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserProfileRequest) GetWithRanking() bool {
	if x != nil {
		return x.WithRanking
	}
	return false
}

type UserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname    string           `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar      int32            `protobuf:"varint,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AvatarFrame int32            `protobuf:"varint,4,opt,name=avatarFrame,proto3" json:"avatarFrame,omitempty"`
	NameColor   int32            `protobuf:"varint,7,opt,name=nameColor,proto3" json:"nameColor,omitempty"`
	Country     string           `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Rank        *UserProfileRank `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *UserProfileResponse) Reset() {
	*x = UserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileResponse) ProtoMessage() {}

func (x *UserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileResponse.ProtoReflect.Descriptor instead.
func (*UserProfileResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{13}
}

func (x *UserProfileResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProfileResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserProfileResponse) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *UserProfileResponse) GetAvatarFrame() int32 {
	if x != nil {
		return x.AvatarFrame
	}
	return 0
}

func (x *UserProfileResponse) GetNameColor() int32 {
	if x != nil {
		return x.NameColor
	}
	return 0
}

func (x *UserProfileResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UserProfileResponse) GetRank() *UserProfileRank {
	if x != nil {
		return x.Rank
	}
	return nil
}

type UserProfileRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trophies  int32 `protobuf:"varint,1,opt,name=trophies,proto3" json:"trophies,omitempty"`
	RankLevel int32 `protobuf:"varint,2,opt,name=rankLevel,proto3" json:"rankLevel,omitempty"`
}

func (x *UserProfileRank) Reset() {
	*x = UserProfileRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRank) ProtoMessage() {}

func (x *UserProfileRank) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRank.ProtoReflect.Descriptor instead.
func (*UserProfileRank) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{14}
}

func (x *UserProfileRank) GetTrophies() int32 {
	if x != nil {
		return x.Trophies
	}
	return 0
}

func (x *UserProfileRank) GetRankLevel() int32 {
	if x != nil {
		return x.RankLevel
	}
	return 0
}

type UserSelectedMinionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserSelectedMinionRequest) Reset() {
	*x = UserSelectedMinionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSelectedMinionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSelectedMinionRequest) ProtoMessage() {}

func (x *UserSelectedMinionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSelectedMinionRequest.ProtoReflect.Descriptor instead.
func (*UserSelectedMinionRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{15}
}

func (x *UserSelectedMinionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserSelectedMinionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     string             `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Type       int32              `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Skin       int32              `protobuf:"varint,4,opt,name=skin,proto3" json:"skin,omitempty"`
	Nft        bool               `protobuf:"varint,5,opt,name=nft,proto3" json:"nft,omitempty"`
	Level      int32              `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	AddIns     map[string]int64   `protobuf:"bytes,7,rep,name=addIns,proto3" json:"addIns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Customized *v1.HeroCustomized `protobuf:"bytes,10,opt,name=customized,proto3" json:"customized,omitempty"`
	UpdatedAt  int64              `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatedAt  int64              `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *UserSelectedMinionResponse) Reset() {
	*x = UserSelectedMinionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSelectedMinionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSelectedMinionResponse) ProtoMessage() {}

func (x *UserSelectedMinionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSelectedMinionResponse.ProtoReflect.Descriptor instead.
func (*UserSelectedMinionResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{16}
}

func (x *UserSelectedMinionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSelectedMinionResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSelectedMinionResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetNft() bool {
	if x != nil {
		return x.Nft
	}
	return false
}

func (x *UserSelectedMinionResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetAddIns() map[string]int64 {
	if x != nil {
		return x.AddIns
	}
	return nil
}

func (x *UserSelectedMinionResponse) GetCustomized() *v1.HeroCustomized {
	if x != nil {
		return x.Customized
	}
	return nil
}

func (x *UserSelectedMinionResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserSelectedMinionResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type UserMinionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserMinionsRequest) Reset() {
	*x = UserMinionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMinionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMinionsRequest) ProtoMessage() {}

func (x *UserMinionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMinionsRequest.ProtoReflect.Descriptor instead.
func (*UserMinionsRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{17}
}

func (x *UserMinionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserMinionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minions []*Minion `protobuf:"bytes,1,rep,name=minions,proto3" json:"minions,omitempty"`
}

func (x *UserMinionsResponse) Reset() {
	*x = UserMinionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMinionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMinionsResponse) ProtoMessage() {}

func (x *UserMinionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMinionsResponse.ProtoReflect.Descriptor instead.
func (*UserMinionsResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{18}
}

func (x *UserMinionsResponse) GetMinions() []*Minion {
	if x != nil {
		return x.Minions
	}
	return nil
}

type Minion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     string             `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Type       int32              `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Skin       int32              `protobuf:"varint,4,opt,name=skin,proto3" json:"skin,omitempty"`
	Nft        bool               `protobuf:"varint,5,opt,name=nft,proto3" json:"nft,omitempty"`
	Level      int32              `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	AddIns     map[string]int64   `protobuf:"bytes,7,rep,name=addIns,proto3" json:"addIns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Customized *v1.HeroCustomized `protobuf:"bytes,10,opt,name=customized,proto3" json:"customized,omitempty"`
	UpdatedAt  int64              `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatedAt  int64              `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *Minion) Reset() {
	*x = Minion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Minion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Minion) ProtoMessage() {}

func (x *Minion) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Minion.ProtoReflect.Descriptor instead.
func (*Minion) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{19}
}

func (x *Minion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Minion) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Minion) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Minion) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *Minion) GetNft() bool {
	if x != nil {
		return x.Nft
	}
	return false
}

func (x *Minion) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Minion) GetAddIns() map[string]int64 {
	if x != nil {
		return x.AddIns
	}
	return nil
}

func (x *Minion) GetCustomized() *v1.HeroCustomized {
	if x != nil {
		return x.Customized
	}
	return nil
}

func (x *Minion) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Minion) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type MinionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinionID string `protobuf:"bytes,1,opt,name=minionID,proto3" json:"minionID,omitempty"`
}

func (x *MinionRequest) Reset() {
	*x = MinionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionRequest) ProtoMessage() {}

func (x *MinionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionRequest.ProtoReflect.Descriptor instead.
func (*MinionRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{20}
}

func (x *MinionRequest) GetMinionID() string {
	if x != nil {
		return x.MinionID
	}
	return ""
}

type MinionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minion *Minion `protobuf:"bytes,1,opt,name=minion,proto3" json:"minion,omitempty"`
}

func (x *MinionResponse) Reset() {
	*x = MinionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionResponse) ProtoMessage() {}

func (x *MinionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionResponse.ProtoReflect.Descriptor instead.
func (*MinionResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{21}
}

func (x *MinionResponse) GetMinion() *Minion {
	if x != nil {
		return x.Minion
	}
	return nil
}

type CreateMinionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SkinId       int32  `protobuf:"varint,2,opt,name=skinId,proto3" json:"skinId,omitempty"`
	ChangeSource int32  `protobuf:"varint,4,opt,name=changeSource,proto3" json:"changeSource,omitempty"`
}

func (x *CreateMinionRequest) Reset() {
	*x = CreateMinionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMinionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMinionRequest) ProtoMessage() {}

func (x *CreateMinionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMinionRequest.ProtoReflect.Descriptor instead.
func (*CreateMinionRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{22}
}

func (x *CreateMinionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMinionRequest) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *CreateMinionRequest) GetChangeSource() int32 {
	if x != nil {
		return x.ChangeSource
	}
	return 0
}

type CreateMinionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minion *Minion `protobuf:"bytes,1,opt,name=minion,proto3" json:"minion,omitempty"`
}

func (x *CreateMinionResponse) Reset() {
	*x = CreateMinionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMinionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMinionResponse) ProtoMessage() {}

func (x *CreateMinionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMinionResponse.ProtoReflect.Descriptor instead.
func (*CreateMinionResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{23}
}

func (x *CreateMinionResponse) GetMinion() *Minion {
	if x != nil {
		return x.Minion
	}
	return nil
}

type GetUserFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserFriendRequest) Reset() {
	*x = GetUserFriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendRequest) ProtoMessage() {}

func (x *GetUserFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendRequest.ProtoReflect.Descriptor instead.
func (*GetUserFriendRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{24}
}

func (x *GetUserFriendRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*FriendInfo `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends,omitempty"`
}

func (x *GetUserFriendResponse) Reset() {
	*x = GetUserFriendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendResponse) ProtoMessage() {}

func (x *GetUserFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendResponse.ProtoReflect.Descriptor instead.
func (*GetUserFriendResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{25}
}

func (x *GetUserFriendResponse) GetFriends() []*FriendInfo {
	if x != nil {
		return x.Friends
	}
	return nil
}

type FriendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendId    string                   `protobuf:"bytes,1,opt,name=friendId,proto3" json:"friendId,omitempty"`
	Status      FriendInfo_FRIEND_STATUS `protobuf:"varint,2,opt,name=status,proto3,enum=thetan.rivals.v1.FriendInfo_FRIEND_STATUS" json:"status,omitempty"`
	Profile     *UserProfileResponse     `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	RequestedAt int64                    `protobuf:"varint,4,opt,name=requestedAt,proto3" json:"requestedAt,omitempty"`
}

func (x *FriendInfo) Reset() {
	*x = FriendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendInfo) ProtoMessage() {}

func (x *FriendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendInfo.ProtoReflect.Descriptor instead.
func (*FriendInfo) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{26}
}

func (x *FriendInfo) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

func (x *FriendInfo) GetStatus() FriendInfo_FRIEND_STATUS {
	if x != nil {
		return x.Status
	}
	return FriendInfo_REQUESTED
}

func (x *FriendInfo) GetProfile() *UserProfileResponse {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *FriendInfo) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

type GetMatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string     `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	LastRound       *RoundStat `protobuf:"bytes,2,opt,name=lastRound,proto3,oneof" json:"lastRound,omitempty"`
	OperationSystem string     `protobuf:"bytes,3,opt,name=operationSystem,proto3" json:"operationSystem,omitempty"`
	AppVersion      string     `protobuf:"bytes,4,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *GetMatchInfoRequest) Reset() {
	*x = GetMatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchInfoRequest) ProtoMessage() {}

func (x *GetMatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{27}
}

func (x *GetMatchInfoRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMatchInfoRequest) GetLastRound() *RoundStat {
	if x != nil {
		return x.LastRound
	}
	return nil
}

func (x *GetMatchInfoRequest) GetOperationSystem() string {
	if x != nil {
		return x.OperationSystem
	}
	return ""
}

func (x *GetMatchInfoRequest) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

type GetMatchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo            *v1.PlayerInfoMatchProto `protobuf:"bytes,1,opt,name=playerInfo,proto3,oneof" json:"playerInfo,omitempty"`
	MatchID               string                   `protobuf:"bytes,2,opt,name=matchID,proto3" json:"matchID,omitempty"`
	MapIds                []*MapData               `protobuf:"bytes,4,rep,name=mapIds,proto3" json:"mapIds,omitempty"`
	ListMaxPlayerPerRound []int32                  `protobuf:"varint,5,rep,packed,name=listMaxPlayerPerRound,proto3" json:"listMaxPlayerPerRound,omitempty"`
	PlayerStat            *PlayerStat              `protobuf:"bytes,6,opt,name=playerStat,proto3" json:"playerStat,omitempty"`
}

func (x *GetMatchInfoResponse) Reset() {
	*x = GetMatchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchInfoResponse) ProtoMessage() {}

func (x *GetMatchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchInfoResponse.ProtoReflect.Descriptor instead.
func (*GetMatchInfoResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{28}
}

func (x *GetMatchInfoResponse) GetPlayerInfo() *v1.PlayerInfoMatchProto {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *GetMatchInfoResponse) GetMatchID() string {
	if x != nil {
		return x.MatchID
	}
	return ""
}

func (x *GetMatchInfoResponse) GetMapIds() []*MapData {
	if x != nil {
		return x.MapIds
	}
	return nil
}

func (x *GetMatchInfoResponse) GetListMaxPlayerPerRound() []int32 {
	if x != nil {
		return x.ListMaxPlayerPerRound
	}
	return nil
}

func (x *GetMatchInfoResponse) GetPlayerStat() *PlayerStat {
	if x != nil {
		return x.PlayerStat
	}
	return nil
}

type RoundStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId           int32   `protobuf:"varint,1,opt,name=roundId,proto3" json:"roundId,omitempty"`
	MapId             int32   `protobuf:"varint,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapDifficulty     int32   `protobuf:"varint,3,opt,name=mapDifficulty,proto3" json:"mapDifficulty,omitempty"`
	TimeInRound       float32 `protobuf:"fixed32,4,opt,name=timeInRound,proto3" json:"timeInRound,omitempty"`
	RoundComplete     bool    `protobuf:"varint,5,opt,name=roundComplete,proto3" json:"roundComplete,omitempty"`
	ControlDoubleJump int32   `protobuf:"varint,6,opt,name=controlDoubleJump,proto3" json:"controlDoubleJump,omitempty"`
	ControlMoveCamera int32   `protobuf:"varint,7,opt,name=controlMoveCamera,proto3" json:"controlMoveCamera,omitempty"`
	PassedCP          int32   `protobuf:"varint,8,opt,name=passedCP,proto3" json:"passedCP,omitempty"`
	MaxCP             int32   `protobuf:"varint,9,opt,name=maxCP,proto3" json:"maxCP,omitempty"`
	Death             int32   `protobuf:"varint,10,opt,name=Death,proto3" json:"Death,omitempty"`
}

func (x *RoundStat) Reset() {
	*x = RoundStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStat) ProtoMessage() {}

func (x *RoundStat) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStat.ProtoReflect.Descriptor instead.
func (*RoundStat) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{29}
}

func (x *RoundStat) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundStat) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *RoundStat) GetMapDifficulty() int32 {
	if x != nil {
		return x.MapDifficulty
	}
	return 0
}

func (x *RoundStat) GetTimeInRound() float32 {
	if x != nil {
		return x.TimeInRound
	}
	return 0
}

func (x *RoundStat) GetRoundComplete() bool {
	if x != nil {
		return x.RoundComplete
	}
	return false
}

func (x *RoundStat) GetControlDoubleJump() int32 {
	if x != nil {
		return x.ControlDoubleJump
	}
	return 0
}

func (x *RoundStat) GetControlMoveCamera() int32 {
	if x != nil {
		return x.ControlMoveCamera
	}
	return 0
}

func (x *RoundStat) GetPassedCP() int32 {
	if x != nil {
		return x.PassedCP
	}
	return 0
}

func (x *RoundStat) GetMaxCP() int32 {
	if x != nil {
		return x.MaxCP
	}
	return 0
}

func (x *RoundStat) GetDeath() int32 {
	if x != nil {
		return x.Death
	}
	return 0
}

type MapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePlay      int32 `protobuf:"varint,1,opt,name=gamePlay,proto3" json:"gamePlay,omitempty"`
	MapId         int32 `protobuf:"varint,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapDifficulty int32 `protobuf:"varint,3,opt,name=mapDifficulty,proto3" json:"mapDifficulty,omitempty"`
}

func (x *MapData) Reset() {
	*x = MapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapData) ProtoMessage() {}

func (x *MapData) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapData.ProtoReflect.Descriptor instead.
func (*MapData) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{30}
}

func (x *MapData) GetGamePlay() int32 {
	if x != nil {
		return x.GamePlay
	}
	return 0
}

func (x *MapData) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapData) GetMapDifficulty() int32 {
	if x != nil {
		return x.MapDifficulty
	}
	return 0
}

type PlayerStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundScoreAll   int32            `protobuf:"varint,1,opt,name=roundScoreAll,proto3" json:"roundScoreAll,omitempty"`
	RaceScoreAll    float32          `protobuf:"fixed32,2,opt,name=raceScoreAll,proto3" json:"raceScoreAll,omitempty"`
	QualifyScoreAll int32            `protobuf:"varint,3,opt,name=qualifyScoreAll,proto3" json:"qualifyScoreAll,omitempty"`
	PlayerScore     float32          `protobuf:"fixed32,4,opt,name=playerScore,proto3" json:"playerScore,omitempty"`
	RoundPlayed     map[string]int32 `protobuf:"bytes,5,rep,name=roundPlayed,proto3" json:"roundPlayed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlayerStat) Reset() {
	*x = PlayerStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStat) ProtoMessage() {}

func (x *PlayerStat) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStat.ProtoReflect.Descriptor instead.
func (*PlayerStat) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{31}
}

func (x *PlayerStat) GetRoundScoreAll() int32 {
	if x != nil {
		return x.RoundScoreAll
	}
	return 0
}

func (x *PlayerStat) GetRaceScoreAll() float32 {
	if x != nil {
		return x.RaceScoreAll
	}
	return 0
}

func (x *PlayerStat) GetQualifyScoreAll() int32 {
	if x != nil {
		return x.QualifyScoreAll
	}
	return 0
}

func (x *PlayerStat) GetPlayerScore() float32 {
	if x != nil {
		return x.PlayerScore
	}
	return 0
}

func (x *PlayerStat) GetRoundPlayed() map[string]int32 {
	if x != nil {
		return x.RoundPlayed
	}
	return nil
}

// =========Lobby================
type GetActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TownID string `protobuf:"bytes,1,opt,name=townID,proto3" json:"townID,omitempty"`
}

func (x *GetActivityRequest) Reset() {
	*x = GetActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityRequest) ProtoMessage() {}

func (x *GetActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityRequest.ProtoReflect.Descriptor instead.
func (*GetActivityRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{32}
}

func (x *GetActivityRequest) GetTownID() string {
	if x != nil {
		return x.TownID
	}
	return ""
}

type GetActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityID string       `protobuf:"bytes,1,opt,name=activityID,proto3" json:"activityID,omitempty"`
	TownID     string       `protobuf:"bytes,2,opt,name=townID,proto3" json:"townID,omitempty"`
	Classes    []*ClassInfo `protobuf:"bytes,3,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *GetActivityResponse) Reset() {
	*x = GetActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityResponse) ProtoMessage() {}

func (x *GetActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityResponse.ProtoReflect.Descriptor instead.
func (*GetActivityResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{33}
}

func (x *GetActivityResponse) GetActivityID() string {
	if x != nil {
		return x.ActivityID
	}
	return ""
}

func (x *GetActivityResponse) GetTownID() string {
	if x != nil {
		return x.TownID
	}
	return ""
}

func (x *GetActivityResponse) GetClasses() []*ClassInfo {
	if x != nil {
		return x.Classes
	}
	return nil
}

type ClassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassID            int32         `protobuf:"varint,1,opt,name=classID,proto3" json:"classID,omitempty"`
	ClassName          string        `protobuf:"bytes,2,opt,name=className,proto3" json:"className,omitempty"`
	Level              int32         `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	DailyActivityLimit int32         `protobuf:"varint,4,opt,name=dailyActivityLimit,proto3" json:"dailyActivityLimit,omitempty"`
	MemberPerClass     int32         `protobuf:"varint,5,opt,name=memberPerClass,proto3" json:"memberPerClass,omitempty"`
	TimePerClass       float64       `protobuf:"fixed64,6,opt,name=timePerClass,proto3" json:"timePerClass,omitempty"`
	ClassPerMasterL    float64       `protobuf:"fixed64,7,opt,name=classPerMasterL,proto3" json:"classPerMasterL,omitempty"`
	Rewards            []*SimpleItem `protobuf:"bytes,8,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *ClassInfo) Reset() {
	*x = ClassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassInfo) ProtoMessage() {}

func (x *ClassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassInfo.ProtoReflect.Descriptor instead.
func (*ClassInfo) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{34}
}

func (x *ClassInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ClassInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ClassInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ClassInfo) GetDailyActivityLimit() int32 {
	if x != nil {
		return x.DailyActivityLimit
	}
	return 0
}

func (x *ClassInfo) GetMemberPerClass() int32 {
	if x != nil {
		return x.MemberPerClass
	}
	return 0
}

func (x *ClassInfo) GetTimePerClass() float64 {
	if x != nil {
		return x.TimePerClass
	}
	return 0
}

func (x *ClassInfo) GetClassPerMasterL() float64 {
	if x != nil {
		return x.ClassPerMasterL
	}
	return 0
}

func (x *ClassInfo) GetRewards() []*SimpleItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SimpleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType      string  `protobuf:"bytes,1,opt,name=itemType,proto3" json:"itemType,omitempty"`
	TypeID        int32   `protobuf:"varint,2,opt,name=typeID,proto3" json:"typeID,omitempty"`
	Amount        float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	InventoryKind int32   `protobuf:"varint,4,opt,name=inventoryKind,proto3" json:"inventoryKind,omitempty"`
}

func (x *SimpleItem) Reset() {
	*x = SimpleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleItem) ProtoMessage() {}

func (x *SimpleItem) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleItem.ProtoReflect.Descriptor instead.
func (*SimpleItem) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{35}
}

func (x *SimpleItem) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *SimpleItem) GetTypeID() int32 {
	if x != nil {
		return x.TypeID
	}
	return 0
}

func (x *SimpleItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SimpleItem) GetInventoryKind() int32 {
	if x != nil {
		return x.InventoryKind
	}
	return 0
}

type GetTownUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserLanguage string `protobuf:"bytes,2,opt,name=userLanguage,proto3" json:"userLanguage,omitempty"`
	UserAge      int32  `protobuf:"varint,3,opt,name=userAge,proto3" json:"userAge,omitempty"`
}

func (x *GetTownUserRequest) Reset() {
	*x = GetTownUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTownUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTownUserRequest) ProtoMessage() {}

func (x *GetTownUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTownUserRequest.ProtoReflect.Descriptor instead.
func (*GetTownUserRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{36}
}

func (x *GetTownUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetTownUserRequest) GetUserLanguage() string {
	if x != nil {
		return x.UserLanguage
	}
	return ""
}

func (x *GetTownUserRequest) GetUserAge() int32 {
	if x != nil {
		return x.UserAge
	}
	return 0
}

type LobbyTown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TownID       string  `protobuf:"bytes,1,opt,name=townID,proto3" json:"townID,omitempty"`
	TownName     string  `protobuf:"bytes,2,opt,name=townName,proto3" json:"townName,omitempty"`
	ActiveTime   int64   `protobuf:"varint,3,opt,name=activeTime,proto3" json:"activeTime,omitempty"`
	TownCountry  string  `protobuf:"bytes,4,opt,name=townCountry,proto3" json:"townCountry,omitempty"`
	TownRegion   string  `protobuf:"bytes,5,opt,name=townRegion,proto3" json:"townRegion,omitempty"`
	TownTime     int32   `protobuf:"varint,6,opt,name=townTime,proto3" json:"townTime,omitempty"`
	TownLanguage string  `protobuf:"bytes,7,opt,name=townLanguage,proto3" json:"townLanguage,omitempty"`
	TownScore    float64 `protobuf:"fixed64,8,opt,name=townScore,proto3" json:"townScore,omitempty"`
}

func (x *LobbyTown) Reset() {
	*x = LobbyTown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyTown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyTown) ProtoMessage() {}

func (x *LobbyTown) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyTown.ProtoReflect.Descriptor instead.
func (*LobbyTown) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{37}
}

func (x *LobbyTown) GetTownID() string {
	if x != nil {
		return x.TownID
	}
	return ""
}

func (x *LobbyTown) GetTownName() string {
	if x != nil {
		return x.TownName
	}
	return ""
}

func (x *LobbyTown) GetActiveTime() int64 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

func (x *LobbyTown) GetTownCountry() string {
	if x != nil {
		return x.TownCountry
	}
	return ""
}

func (x *LobbyTown) GetTownRegion() string {
	if x != nil {
		return x.TownRegion
	}
	return ""
}

func (x *LobbyTown) GetTownTime() int32 {
	if x != nil {
		return x.TownTime
	}
	return 0
}

func (x *LobbyTown) GetTownLanguage() string {
	if x != nil {
		return x.TownLanguage
	}
	return ""
}

func (x *LobbyTown) GetTownScore() float64 {
	if x != nil {
		return x.TownScore
	}
	return 0
}

type PickTownUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	TownID string `protobuf:"bytes,2,opt,name=townID,proto3" json:"townID,omitempty"`
}

func (x *PickTownUserRequest) Reset() {
	*x = PickTownUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickTownUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickTownUserRequest) ProtoMessage() {}

func (x *PickTownUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickTownUserRequest.ProtoReflect.Descriptor instead.
func (*PickTownUserRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{38}
}

func (x *PickTownUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PickTownUserRequest) GetTownID() string {
	if x != nil {
		return x.TownID
	}
	return ""
}

type TrackSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Action    string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	SessionID string `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *TrackSessionRequest) Reset() {
	*x = TrackSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSessionRequest) ProtoMessage() {}

func (x *TrackSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSessionRequest.ProtoReflect.Descriptor instead.
func (*TrackSessionRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{39}
}

func (x *TrackSessionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TrackSessionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TrackSessionRequest) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type TrackSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrackSessionResponse) Reset() {
	*x = TrackSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSessionResponse) ProtoMessage() {}

func (x *TrackSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSessionResponse.ProtoReflect.Descriptor instead.
func (*TrackSessionResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{40}
}

type FindMatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayersID []string `protobuf:"bytes,1,rep,name=playersID,proto3" json:"playersID,omitempty"`
}

func (x *FindMatchInfoRequest) Reset() {
	*x = FindMatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMatchInfoRequest) ProtoMessage() {}

func (x *FindMatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMatchInfoRequest.ProtoReflect.Descriptor instead.
func (*FindMatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{41}
}

func (x *FindMatchInfoRequest) GetPlayersID() []string {
	if x != nil {
		return x.PlayersID
	}
	return nil
}

type FindMatchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*v1.PlayerInfoMatchProto `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *FindMatchInfoResponse) Reset() {
	*x = FindMatchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMatchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMatchInfoResponse) ProtoMessage() {}

func (x *FindMatchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_rivals_v1_service_rivals_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMatchInfoResponse.ProtoReflect.Descriptor instead.
func (*FindMatchInfoResponse) Descriptor() ([]byte, []int) {
	return file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP(), []int{42}
}

func (x *FindMatchInfoResponse) GetPlayers() []*v1.PlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

var File_thetan_rivals_v1_service_rivals_proto protoreflect.FileDescriptor

var file_thetan_rivals_v1_service_rivals_proto_rawDesc = []byte{
	0x0a, 0x25, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x67, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x1b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x45, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6e, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69,
	0x6e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7a, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x6f, 0x72, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x22, 0x45, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x0f, 0x0a,
	0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xea,
	0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x4b, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x33, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x03,
	0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65,
	0x72, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2c, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x06, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x61,
	0x64, 0x64, 0x49, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2b, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x42, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x48,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x0a, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d,
	0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x78,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4a, 0x75,
	0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x76,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x43, 0x50, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x43, 0x50, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x78, 0x43, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78,
	0x43, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x44, 0x65, 0x61, 0x74, 0x68, 0x22, 0x61, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xb3, 0x02, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x41, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x22,
	0x84, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x12,
	0x35, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x7e, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64,
	0x22, 0x6a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x22, 0xff, 0x01, 0x0a,
	0x09, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x77, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x6e,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x77, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x77, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x77, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x77, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x45,
	0x0a, 0x13, 0x50, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x77, 0x6e, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x32, 0x92, 0x0d, 0x0a, 0x12, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x52, 0x69,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x6f, 0x77, 0x6e, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x50, 0x69, 0x63, 0x6b, 0x54, 0x6f,
	0x77, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x63,
	0x6b, 0x54, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x74, 0x12, 0x28,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x42, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x6f, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x77, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xc1, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2d,
	0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x5f, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54,
	0x52, 0x58, 0xaa, 0x02, 0x10, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5c, 0x52,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x54, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x5c, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e,
	0x3a, 0x3a, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thetan_rivals_v1_service_rivals_proto_rawDescOnce sync.Once
	file_thetan_rivals_v1_service_rivals_proto_rawDescData = file_thetan_rivals_v1_service_rivals_proto_rawDesc
)

func file_thetan_rivals_v1_service_rivals_proto_rawDescGZIP() []byte {
	file_thetan_rivals_v1_service_rivals_proto_rawDescOnce.Do(func() {
		file_thetan_rivals_v1_service_rivals_proto_rawDescData = protoimpl.X.CompressGZIP(file_thetan_rivals_v1_service_rivals_proto_rawDescData)
	})
	return file_thetan_rivals_v1_service_rivals_proto_rawDescData
}

var file_thetan_rivals_v1_service_rivals_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_thetan_rivals_v1_service_rivals_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_thetan_rivals_v1_service_rivals_proto_goTypes = []interface{}{
	(FriendInfo_FRIEND_STATUS)(0),             // 0: thetan.rivals.v1.FriendInfo.FRIEND_STATUS
	(*MatchFoundTournamentRequest)(nil),       // 1: thetan.rivals.v1.MatchFoundTournamentRequest
	(*MatchFoundTournamentResponse)(nil),      // 2: thetan.rivals.v1.MatchFoundTournamentResponse
	(*FindMatchInfoForTournamentRequest)(nil), // 3: thetan.rivals.v1.FindMatchInfoForTournamentRequest
	(*GetConfigForBotResponse)(nil),           // 4: thetan.rivals.v1.GetConfigForBotResponse
	(*SkinInfo)(nil),                          // 5: thetan.rivals.v1.SkinInfo
	(*CosmeticInfo)(nil),                      // 6: thetan.rivals.v1.CosmeticInfo
	(*GetConfigForBotRequest)(nil),            // 7: thetan.rivals.v1.GetConfigForBotRequest
	(*GetActiveTournamentsRequest)(nil),       // 8: thetan.rivals.v1.GetActiveTournamentsRequest
	(*GetActiveTournamentsResponse)(nil),      // 9: thetan.rivals.v1.GetActiveTournamentsResponse
	(*TournamentInfo)(nil),                    // 10: thetan.rivals.v1.TournamentInfo
	(*MapInfo)(nil),                           // 11: thetan.rivals.v1.MapInfo
	(*EmptyResponse)(nil),                     // 12: thetan.rivals.v1.EmptyResponse
	(*UserProfileRequest)(nil),                // 13: thetan.rivals.v1.UserProfileRequest
	(*UserProfileResponse)(nil),               // 14: thetan.rivals.v1.UserProfileResponse
	(*UserProfileRank)(nil),                   // 15: thetan.rivals.v1.UserProfileRank
	(*UserSelectedMinionRequest)(nil),         // 16: thetan.rivals.v1.UserSelectedMinionRequest
	(*UserSelectedMinionResponse)(nil),        // 17: thetan.rivals.v1.UserSelectedMinionResponse
	(*UserMinionsRequest)(nil),                // 18: thetan.rivals.v1.UserMinionsRequest
	(*UserMinionsResponse)(nil),               // 19: thetan.rivals.v1.UserMinionsResponse
	(*Minion)(nil),                            // 20: thetan.rivals.v1.Minion
	(*MinionRequest)(nil),                     // 21: thetan.rivals.v1.MinionRequest
	(*MinionResponse)(nil),                    // 22: thetan.rivals.v1.MinionResponse
	(*CreateMinionRequest)(nil),               // 23: thetan.rivals.v1.CreateMinionRequest
	(*CreateMinionResponse)(nil),              // 24: thetan.rivals.v1.CreateMinionResponse
	(*GetUserFriendRequest)(nil),              // 25: thetan.rivals.v1.GetUserFriendRequest
	(*GetUserFriendResponse)(nil),             // 26: thetan.rivals.v1.GetUserFriendResponse
	(*FriendInfo)(nil),                        // 27: thetan.rivals.v1.FriendInfo
	(*GetMatchInfoRequest)(nil),               // 28: thetan.rivals.v1.GetMatchInfoRequest
	(*GetMatchInfoResponse)(nil),              // 29: thetan.rivals.v1.GetMatchInfoResponse
	(*RoundStat)(nil),                         // 30: thetan.rivals.v1.RoundStat
	(*MapData)(nil),                           // 31: thetan.rivals.v1.MapData
	(*PlayerStat)(nil),                        // 32: thetan.rivals.v1.PlayerStat
	(*GetActivityRequest)(nil),                // 33: thetan.rivals.v1.GetActivityRequest
	(*GetActivityResponse)(nil),               // 34: thetan.rivals.v1.GetActivityResponse
	(*ClassInfo)(nil),                         // 35: thetan.rivals.v1.ClassInfo
	(*SimpleItem)(nil),                        // 36: thetan.rivals.v1.SimpleItem
	(*GetTownUserRequest)(nil),                // 37: thetan.rivals.v1.GetTownUserRequest
	(*LobbyTown)(nil),                         // 38: thetan.rivals.v1.LobbyTown
	(*PickTownUserRequest)(nil),               // 39: thetan.rivals.v1.PickTownUserRequest
	(*TrackSessionRequest)(nil),               // 40: thetan.rivals.v1.TrackSessionRequest
	(*TrackSessionResponse)(nil),              // 41: thetan.rivals.v1.TrackSessionResponse
	(*FindMatchInfoRequest)(nil),              // 42: thetan.rivals.v1.FindMatchInfoRequest
	(*FindMatchInfoResponse)(nil),             // 43: thetan.rivals.v1.FindMatchInfoResponse
	nil,                                       // 44: thetan.rivals.v1.UserSelectedMinionResponse.AddInsEntry
	nil,                                       // 45: thetan.rivals.v1.Minion.AddInsEntry
	nil,                                       // 46: thetan.rivals.v1.PlayerStat.RoundPlayedEntry
	(*v1.HeroCustomized)(nil),                 // 47: thetan.shared.v1.HeroCustomized
	(*v1.PlayerInfoMatchProto)(nil),           // 48: thetan.shared.v1.PlayerInfoMatchProto
}
var file_thetan_rivals_v1_service_rivals_proto_depIdxs = []int32{
	5,  // 0: thetan.rivals.v1.GetConfigForBotResponse.listSkinInfo:type_name -> thetan.rivals.v1.SkinInfo
	6,  // 1: thetan.rivals.v1.GetConfigForBotResponse.listCosmeticInfo:type_name -> thetan.rivals.v1.CosmeticInfo
	10, // 2: thetan.rivals.v1.GetActiveTournamentsResponse.Tournaments:type_name -> thetan.rivals.v1.TournamentInfo
	11, // 3: thetan.rivals.v1.TournamentInfo.currentMaps:type_name -> thetan.rivals.v1.MapInfo
	15, // 4: thetan.rivals.v1.UserProfileResponse.rank:type_name -> thetan.rivals.v1.UserProfileRank
	44, // 5: thetan.rivals.v1.UserSelectedMinionResponse.addIns:type_name -> thetan.rivals.v1.UserSelectedMinionResponse.AddInsEntry
	47, // 6: thetan.rivals.v1.UserSelectedMinionResponse.customized:type_name -> thetan.shared.v1.HeroCustomized
	20, // 7: thetan.rivals.v1.UserMinionsResponse.minions:type_name -> thetan.rivals.v1.Minion
	45, // 8: thetan.rivals.v1.Minion.addIns:type_name -> thetan.rivals.v1.Minion.AddInsEntry
	47, // 9: thetan.rivals.v1.Minion.customized:type_name -> thetan.shared.v1.HeroCustomized
	20, // 10: thetan.rivals.v1.MinionResponse.minion:type_name -> thetan.rivals.v1.Minion
	20, // 11: thetan.rivals.v1.CreateMinionResponse.minion:type_name -> thetan.rivals.v1.Minion
	27, // 12: thetan.rivals.v1.GetUserFriendResponse.friends:type_name -> thetan.rivals.v1.FriendInfo
	0,  // 13: thetan.rivals.v1.FriendInfo.status:type_name -> thetan.rivals.v1.FriendInfo.FRIEND_STATUS
	14, // 14: thetan.rivals.v1.FriendInfo.profile:type_name -> thetan.rivals.v1.UserProfileResponse
	30, // 15: thetan.rivals.v1.GetMatchInfoRequest.lastRound:type_name -> thetan.rivals.v1.RoundStat
	48, // 16: thetan.rivals.v1.GetMatchInfoResponse.playerInfo:type_name -> thetan.shared.v1.PlayerInfoMatchProto
	31, // 17: thetan.rivals.v1.GetMatchInfoResponse.mapIds:type_name -> thetan.rivals.v1.MapData
	32, // 18: thetan.rivals.v1.GetMatchInfoResponse.playerStat:type_name -> thetan.rivals.v1.PlayerStat
	46, // 19: thetan.rivals.v1.PlayerStat.roundPlayed:type_name -> thetan.rivals.v1.PlayerStat.RoundPlayedEntry
	35, // 20: thetan.rivals.v1.GetActivityResponse.classes:type_name -> thetan.rivals.v1.ClassInfo
	36, // 21: thetan.rivals.v1.ClassInfo.rewards:type_name -> thetan.rivals.v1.SimpleItem
	48, // 22: thetan.rivals.v1.FindMatchInfoResponse.players:type_name -> thetan.shared.v1.PlayerInfoMatchProto
	13, // 23: thetan.rivals.v1.ThetanRivalService.GetUserProfile:input_type -> thetan.rivals.v1.UserProfileRequest
	18, // 24: thetan.rivals.v1.ThetanRivalService.GetUserMinions:input_type -> thetan.rivals.v1.UserMinionsRequest
	16, // 25: thetan.rivals.v1.ThetanRivalService.GetUserSelectedMinion:input_type -> thetan.rivals.v1.UserSelectedMinionRequest
	21, // 26: thetan.rivals.v1.ThetanRivalService.GetMinion:input_type -> thetan.rivals.v1.MinionRequest
	23, // 27: thetan.rivals.v1.ThetanRivalService.CreateMinion:input_type -> thetan.rivals.v1.CreateMinionRequest
	25, // 28: thetan.rivals.v1.ThetanRivalService.GetListFriends:input_type -> thetan.rivals.v1.GetUserFriendRequest
	28, // 29: thetan.rivals.v1.ThetanRivalService.GetMatchInfoOnboarding:input_type -> thetan.rivals.v1.GetMatchInfoRequest
	33, // 30: thetan.rivals.v1.ThetanRivalService.GetLatestLobbyActivityInfo:input_type -> thetan.rivals.v1.GetActivityRequest
	37, // 31: thetan.rivals.v1.ThetanRivalService.GetTownUser:input_type -> thetan.rivals.v1.GetTownUserRequest
	39, // 32: thetan.rivals.v1.ThetanRivalService.PickTownForUser:input_type -> thetan.rivals.v1.PickTownUserRequest
	40, // 33: thetan.rivals.v1.ThetanRivalService.TrackSession:input_type -> thetan.rivals.v1.TrackSessionRequest
	42, // 34: thetan.rivals.v1.ThetanRivalService.GetFindMatchInfo:input_type -> thetan.rivals.v1.FindMatchInfoRequest
	7,  // 35: thetan.rivals.v1.ThetanRivalService.GetConfigForBot:input_type -> thetan.rivals.v1.GetConfigForBotRequest
	8,  // 36: thetan.rivals.v1.ThetanRivalService.GetActiveTournaments:input_type -> thetan.rivals.v1.GetActiveTournamentsRequest
	3,  // 37: thetan.rivals.v1.ThetanRivalService.GetFindMatchInfoForTournament:input_type -> thetan.rivals.v1.FindMatchInfoForTournamentRequest
	1,  // 38: thetan.rivals.v1.ThetanRivalService.MatchFoundTournament:input_type -> thetan.rivals.v1.MatchFoundTournamentRequest
	14, // 39: thetan.rivals.v1.ThetanRivalService.GetUserProfile:output_type -> thetan.rivals.v1.UserProfileResponse
	19, // 40: thetan.rivals.v1.ThetanRivalService.GetUserMinions:output_type -> thetan.rivals.v1.UserMinionsResponse
	17, // 41: thetan.rivals.v1.ThetanRivalService.GetUserSelectedMinion:output_type -> thetan.rivals.v1.UserSelectedMinionResponse
	22, // 42: thetan.rivals.v1.ThetanRivalService.GetMinion:output_type -> thetan.rivals.v1.MinionResponse
	24, // 43: thetan.rivals.v1.ThetanRivalService.CreateMinion:output_type -> thetan.rivals.v1.CreateMinionResponse
	26, // 44: thetan.rivals.v1.ThetanRivalService.GetListFriends:output_type -> thetan.rivals.v1.GetUserFriendResponse
	29, // 45: thetan.rivals.v1.ThetanRivalService.GetMatchInfoOnboarding:output_type -> thetan.rivals.v1.GetMatchInfoResponse
	34, // 46: thetan.rivals.v1.ThetanRivalService.GetLatestLobbyActivityInfo:output_type -> thetan.rivals.v1.GetActivityResponse
	38, // 47: thetan.rivals.v1.ThetanRivalService.GetTownUser:output_type -> thetan.rivals.v1.LobbyTown
	12, // 48: thetan.rivals.v1.ThetanRivalService.PickTownForUser:output_type -> thetan.rivals.v1.EmptyResponse
	41, // 49: thetan.rivals.v1.ThetanRivalService.TrackSession:output_type -> thetan.rivals.v1.TrackSessionResponse
	43, // 50: thetan.rivals.v1.ThetanRivalService.GetFindMatchInfo:output_type -> thetan.rivals.v1.FindMatchInfoResponse
	4,  // 51: thetan.rivals.v1.ThetanRivalService.GetConfigForBot:output_type -> thetan.rivals.v1.GetConfigForBotResponse
	9,  // 52: thetan.rivals.v1.ThetanRivalService.GetActiveTournaments:output_type -> thetan.rivals.v1.GetActiveTournamentsResponse
	43, // 53: thetan.rivals.v1.ThetanRivalService.GetFindMatchInfoForTournament:output_type -> thetan.rivals.v1.FindMatchInfoResponse
	2,  // 54: thetan.rivals.v1.ThetanRivalService.MatchFoundTournament:output_type -> thetan.rivals.v1.MatchFoundTournamentResponse
	39, // [39:55] is the sub-list for method output_type
	23, // [23:39] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_thetan_rivals_v1_service_rivals_proto_init() }
func file_thetan_rivals_v1_service_rivals_proto_init() {
	if File_thetan_rivals_v1_service_rivals_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFoundTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFoundTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMatchInfoForTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigForBotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmeticInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigForBotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveTournamentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveTournamentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSelectedMinionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSelectedMinionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMinionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMinionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Minion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMinionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMinionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFriendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTownUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyTown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickTownUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_rivals_v1_service_rivals_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMatchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_thetan_rivals_v1_service_rivals_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_thetan_rivals_v1_service_rivals_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thetan_rivals_v1_service_rivals_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_thetan_rivals_v1_service_rivals_proto_goTypes,
		DependencyIndexes: file_thetan_rivals_v1_service_rivals_proto_depIdxs,
		EnumInfos:         file_thetan_rivals_v1_service_rivals_proto_enumTypes,
		MessageInfos:      file_thetan_rivals_v1_service_rivals_proto_msgTypes,
	}.Build()
	File_thetan_rivals_v1_service_rivals_proto = out.File
	file_thetan_rivals_v1_service_rivals_proto_rawDesc = nil
	file_thetan_rivals_v1_service_rivals_proto_goTypes = nil
	file_thetan_rivals_v1_service_rivals_proto_depIdxs = nil
}
