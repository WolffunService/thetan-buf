// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/rivals/v1/rivals_match.proto

package thetan_rivals_v1

import (
	context "context"
	reflect "reflect"
	thetan_shared_v1 "thetan-buf/gen/go/thetan/shared/v1"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRivalMatchDirectorServiceClient is a mock of RivalMatchDirectorServiceClient interface.
type MockRivalMatchDirectorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRivalMatchDirectorServiceClientMockRecorder
}

// MockRivalMatchDirectorServiceClientMockRecorder is the mock recorder for MockRivalMatchDirectorServiceClient.
type MockRivalMatchDirectorServiceClientMockRecorder struct {
	mock *MockRivalMatchDirectorServiceClient
}

// NewMockRivalMatchDirectorServiceClient creates a new mock instance.
func NewMockRivalMatchDirectorServiceClient(ctrl *gomock.Controller) *MockRivalMatchDirectorServiceClient {
	mock := &MockRivalMatchDirectorServiceClient{ctrl: ctrl}
	mock.recorder = &MockRivalMatchDirectorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRivalMatchDirectorServiceClient) EXPECT() *MockRivalMatchDirectorServiceClientMockRecorder {
	return m.recorder
}

// CancelTicket mocks base method.
func (m *MockRivalMatchDirectorServiceClient) CancelTicket(ctx context.Context, in *RivalCancelTicketRequest, opts ...grpc.CallOption) (*RivalCancelTicketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelTicket", varargs...)
	ret0, _ := ret[0].(*RivalCancelTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTicket indicates an expected call of CancelTicket.
func (mr *MockRivalMatchDirectorServiceClientMockRecorder) CancelTicket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTicket", reflect.TypeOf((*MockRivalMatchDirectorServiceClient)(nil).CancelTicket), varargs...)
}

// CreateMatchOnboard mocks base method.
func (m *MockRivalMatchDirectorServiceClient) CreateMatchOnboard(ctx context.Context, in *GetMatchInfoRequest, opts ...grpc.CallOption) (*thetan_shared_v1.MatchFoundResponseProto, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchOnboard", varargs...)
	ret0, _ := ret[0].(*thetan_shared_v1.MatchFoundResponseProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchOnboard indicates an expected call of CreateMatchOnboard.
func (mr *MockRivalMatchDirectorServiceClientMockRecorder) CreateMatchOnboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchOnboard", reflect.TypeOf((*MockRivalMatchDirectorServiceClient)(nil).CreateMatchOnboard), varargs...)
}

// MockRivalMatchDirectorServiceServer is a mock of RivalMatchDirectorServiceServer interface.
type MockRivalMatchDirectorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRivalMatchDirectorServiceServerMockRecorder
}

// MockRivalMatchDirectorServiceServerMockRecorder is the mock recorder for MockRivalMatchDirectorServiceServer.
type MockRivalMatchDirectorServiceServerMockRecorder struct {
	mock *MockRivalMatchDirectorServiceServer
}

// NewMockRivalMatchDirectorServiceServer creates a new mock instance.
func NewMockRivalMatchDirectorServiceServer(ctrl *gomock.Controller) *MockRivalMatchDirectorServiceServer {
	mock := &MockRivalMatchDirectorServiceServer{ctrl: ctrl}
	mock.recorder = &MockRivalMatchDirectorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRivalMatchDirectorServiceServer) EXPECT() *MockRivalMatchDirectorServiceServerMockRecorder {
	return m.recorder
}

// CancelTicket mocks base method.
func (m *MockRivalMatchDirectorServiceServer) CancelTicket(ctx context.Context, in *RivalCancelTicketRequest) (*RivalCancelTicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTicket", ctx, in)
	ret0, _ := ret[0].(*RivalCancelTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTicket indicates an expected call of CancelTicket.
func (mr *MockRivalMatchDirectorServiceServerMockRecorder) CancelTicket(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTicket", reflect.TypeOf((*MockRivalMatchDirectorServiceServer)(nil).CancelTicket), ctx, in)
}

// CreateMatchOnboard mocks base method.
func (m *MockRivalMatchDirectorServiceServer) CreateMatchOnboard(ctx context.Context, in *GetMatchInfoRequest) (*thetan_shared_v1.MatchFoundResponseProto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchOnboard", ctx, in)
	ret0, _ := ret[0].(*thetan_shared_v1.MatchFoundResponseProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchOnboard indicates an expected call of CreateMatchOnboard.
func (mr *MockRivalMatchDirectorServiceServerMockRecorder) CreateMatchOnboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchOnboard", reflect.TypeOf((*MockRivalMatchDirectorServiceServer)(nil).CreateMatchOnboard), ctx, in)
}
