// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/rivals/v1/rivals_blockchain.proto

package thetan_rivals_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RivalsBlockchainService_GetCheckInSig_FullMethodName = "/thetan.rivals.v1.RivalsBlockchainService/GetCheckInSig"
)

// RivalsBlockchainServiceClient is the client API for RivalsBlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RivalsBlockchainServiceClient interface {
	GetCheckInSig(ctx context.Context, in *GetCheckInSigRequest, opts ...grpc.CallOption) (*GetCheckInSigResponse, error)
}

type rivalsBlockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRivalsBlockchainServiceClient(cc grpc.ClientConnInterface) RivalsBlockchainServiceClient {
	return &rivalsBlockchainServiceClient{cc}
}

func (c *rivalsBlockchainServiceClient) GetCheckInSig(ctx context.Context, in *GetCheckInSigRequest, opts ...grpc.CallOption) (*GetCheckInSigResponse, error) {
	out := new(GetCheckInSigResponse)
	err := c.cc.Invoke(ctx, RivalsBlockchainService_GetCheckInSig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RivalsBlockchainServiceServer is the server API for RivalsBlockchainService service.
// All implementations must embed UnimplementedRivalsBlockchainServiceServer
// for forward compatibility
type RivalsBlockchainServiceServer interface {
	GetCheckInSig(context.Context, *GetCheckInSigRequest) (*GetCheckInSigResponse, error)
	mustEmbedUnimplementedRivalsBlockchainServiceServer()
}

// UnimplementedRivalsBlockchainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRivalsBlockchainServiceServer struct {
}

func (UnimplementedRivalsBlockchainServiceServer) GetCheckInSig(context.Context, *GetCheckInSigRequest) (*GetCheckInSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckInSig not implemented")
}
func (UnimplementedRivalsBlockchainServiceServer) mustEmbedUnimplementedRivalsBlockchainServiceServer() {
}

// UnsafeRivalsBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RivalsBlockchainServiceServer will
// result in compilation errors.
type UnsafeRivalsBlockchainServiceServer interface {
	mustEmbedUnimplementedRivalsBlockchainServiceServer()
}

func RegisterRivalsBlockchainServiceServer(s grpc.ServiceRegistrar, srv RivalsBlockchainServiceServer) {
	s.RegisterService(&RivalsBlockchainService_ServiceDesc, srv)
}

func _RivalsBlockchainService_GetCheckInSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckInSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalsBlockchainServiceServer).GetCheckInSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalsBlockchainService_GetCheckInSig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalsBlockchainServiceServer).GetCheckInSig(ctx, req.(*GetCheckInSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RivalsBlockchainService_ServiceDesc is the grpc.ServiceDesc for RivalsBlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RivalsBlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.rivals.v1.RivalsBlockchainService",
	HandlerType: (*RivalsBlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckInSig",
			Handler:    _RivalsBlockchainService_GetCheckInSig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/rivals/v1/rivals_blockchain.proto",
}
