// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/immortal/v1/immortal_match.proto

package thetan_immortal_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockImmortalMatchDirectorServiceClient is a mock of ImmortalMatchDirectorServiceClient interface.
type MockImmortalMatchDirectorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockImmortalMatchDirectorServiceClientMockRecorder
}

// MockImmortalMatchDirectorServiceClientMockRecorder is the mock recorder for MockImmortalMatchDirectorServiceClient.
type MockImmortalMatchDirectorServiceClientMockRecorder struct {
	mock *MockImmortalMatchDirectorServiceClient
}

// NewMockImmortalMatchDirectorServiceClient creates a new mock instance.
func NewMockImmortalMatchDirectorServiceClient(ctrl *gomock.Controller) *MockImmortalMatchDirectorServiceClient {
	mock := &MockImmortalMatchDirectorServiceClient{ctrl: ctrl}
	mock.recorder = &MockImmortalMatchDirectorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmortalMatchDirectorServiceClient) EXPECT() *MockImmortalMatchDirectorServiceClientMockRecorder {
	return m.recorder
}

// CancelTicket mocks base method.
func (m *MockImmortalMatchDirectorServiceClient) CancelTicket(ctx context.Context, in *ImmortalCancelTicketRequest, opts ...grpc.CallOption) (*ImmortalCancelTicketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelTicket", varargs...)
	ret0, _ := ret[0].(*ImmortalCancelTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTicket indicates an expected call of CancelTicket.
func (mr *MockImmortalMatchDirectorServiceClientMockRecorder) CancelTicket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTicket", reflect.TypeOf((*MockImmortalMatchDirectorServiceClient)(nil).CancelTicket), varargs...)
}

// MockImmortalMatchDirectorServiceServer is a mock of ImmortalMatchDirectorServiceServer interface.
type MockImmortalMatchDirectorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockImmortalMatchDirectorServiceServerMockRecorder
}

// MockImmortalMatchDirectorServiceServerMockRecorder is the mock recorder for MockImmortalMatchDirectorServiceServer.
type MockImmortalMatchDirectorServiceServerMockRecorder struct {
	mock *MockImmortalMatchDirectorServiceServer
}

// NewMockImmortalMatchDirectorServiceServer creates a new mock instance.
func NewMockImmortalMatchDirectorServiceServer(ctrl *gomock.Controller) *MockImmortalMatchDirectorServiceServer {
	mock := &MockImmortalMatchDirectorServiceServer{ctrl: ctrl}
	mock.recorder = &MockImmortalMatchDirectorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmortalMatchDirectorServiceServer) EXPECT() *MockImmortalMatchDirectorServiceServerMockRecorder {
	return m.recorder
}

// CancelTicket mocks base method.
func (m *MockImmortalMatchDirectorServiceServer) CancelTicket(ctx context.Context, in *ImmortalCancelTicketRequest) (*ImmortalCancelTicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTicket", ctx, in)
	ret0, _ := ret[0].(*ImmortalCancelTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTicket indicates an expected call of CancelTicket.
func (mr *MockImmortalMatchDirectorServiceServerMockRecorder) CancelTicket(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTicket", reflect.TypeOf((*MockImmortalMatchDirectorServiceServer)(nil).CancelTicket), ctx, in)
}
