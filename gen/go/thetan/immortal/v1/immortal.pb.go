// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: thetan/immortal/v1/immortal.proto

package thetan_immortal_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FriendInfo_FRIEND_STATUS int32

const (
	FriendInfo_REQUESTED  FriendInfo_FRIEND_STATUS = 0
	FriendInfo_REQUESTING FriendInfo_FRIEND_STATUS = 1
	FriendInfo_CONFIRMED  FriendInfo_FRIEND_STATUS = 2
)

// Enum value maps for FriendInfo_FRIEND_STATUS.
var (
	FriendInfo_FRIEND_STATUS_name = map[int32]string{
		0: "REQUESTED",
		1: "REQUESTING",
		2: "CONFIRMED",
	}
	FriendInfo_FRIEND_STATUS_value = map[string]int32{
		"REQUESTED":  0,
		"REQUESTING": 1,
		"CONFIRMED":  2,
	}
)

func (x FriendInfo_FRIEND_STATUS) Enum() *FriendInfo_FRIEND_STATUS {
	p := new(FriendInfo_FRIEND_STATUS)
	*p = x
	return p
}

func (x FriendInfo_FRIEND_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendInfo_FRIEND_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_thetan_immortal_v1_immortal_proto_enumTypes[0].Descriptor()
}

func (FriendInfo_FRIEND_STATUS) Type() protoreflect.EnumType {
	return &file_thetan_immortal_v1_immortal_proto_enumTypes[0]
}

func (x FriendInfo_FRIEND_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendInfo_FRIEND_STATUS.Descriptor instead.
func (FriendInfo_FRIEND_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{17, 0}
}

type SearchPlayerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerIDs  []string   `protobuf:"bytes,1,rep,name=playerIDs,proto3" json:"playerIDs,omitempty"`
	InGameMode InGameMode `protobuf:"varint,2,opt,name=inGameMode,proto3,enum=thetan.immortal.v1.InGameMode" json:"inGameMode,omitempty"`
}

func (x *SearchPlayerInfoRequest) Reset() {
	*x = SearchPlayerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlayerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlayerInfoRequest) ProtoMessage() {}

func (x *SearchPlayerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlayerInfoRequest.ProtoReflect.Descriptor instead.
func (*SearchPlayerInfoRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{0}
}

func (x *SearchPlayerInfoRequest) GetPlayerIDs() []string {
	if x != nil {
		return x.PlayerIDs
	}
	return nil
}

func (x *SearchPlayerInfoRequest) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_SOLO
}

type SearchPlayerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*PlayerInfoMatchProto `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *SearchPlayerInfoResponse) Reset() {
	*x = SearchPlayerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlayerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlayerInfoResponse) ProtoMessage() {}

func (x *SearchPlayerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlayerInfoResponse.ProtoReflect.Descriptor instead.
func (*SearchPlayerInfoResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{1}
}

func (x *SearchPlayerInfoResponse) GetPlayers() []*PlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

type GetUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetUserProfileRequest) Reset() {
	*x = GetUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileRequest) ProtoMessage() {}

func (x *GetUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileRequest.ProtoReflect.Descriptor instead.
func (*GetUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserProfileRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Country      string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	AvatarID     int32  `protobuf:"varint,4,opt,name=avatarID,proto3" json:"avatarID,omitempty"`
	FrameID      int32  `protobuf:"varint,5,opt,name=frameID,proto3" json:"frameID,omitempty"`
	NameColorID  int32  `protobuf:"varint,6,opt,name=nameColorID,proto3" json:"nameColorID,omitempty"`
	Rank         int32  `protobuf:"varint,7,opt,name=rank,proto3" json:"rank,omitempty"`
	Trophy       int32  `protobuf:"varint,8,opt,name=trophy,proto3" json:"trophy,omitempty"`
	BattlePassID int32  `protobuf:"varint,9,opt,name=battlePassID,proto3" json:"battlePassID,omitempty"`
}

func (x *GetUserProfileResponse) Reset() {
	*x = GetUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileResponse) ProtoMessage() {}

func (x *GetUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileResponse.ProtoReflect.Descriptor instead.
func (*GetUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserProfileResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserProfileResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetUserProfileResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetUserProfileResponse) GetAvatarID() int32 {
	if x != nil {
		return x.AvatarID
	}
	return 0
}

func (x *GetUserProfileResponse) GetFrameID() int32 {
	if x != nil {
		return x.FrameID
	}
	return 0
}

func (x *GetUserProfileResponse) GetNameColorID() int32 {
	if x != nil {
		return x.NameColorID
	}
	return 0
}

func (x *GetUserProfileResponse) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetUserProfileResponse) GetTrophy() int32 {
	if x != nil {
		return x.Trophy
	}
	return 0
}

func (x *GetUserProfileResponse) GetBattlePassID() int32 {
	if x != nil {
		return x.BattlePassID
	}
	return 0
}

type BattleEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName    string             `protobuf:"bytes,1,opt,name=roomName,proto3" json:"roomName,omitempty"` //matchID
	Players     []*PlayerMatchInfo `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	GameMode    GameMode           `protobuf:"varint,3,opt,name=gameMode,proto3,enum=thetan.immortal.v1.GameMode" json:"gameMode,omitempty"`
	InGameMode  InGameMode         `protobuf:"varint,4,opt,name=inGameMode,proto3,enum=thetan.immortal.v1.InGameMode" json:"inGameMode,omitempty"`
	DurationSec int32              `protobuf:"varint,5,opt,name=durationSec,proto3" json:"durationSec,omitempty"`
}

func (x *BattleEndRequest) Reset() {
	*x = BattleEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleEndRequest) ProtoMessage() {}

func (x *BattleEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleEndRequest.ProtoReflect.Descriptor instead.
func (*BattleEndRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{4}
}

func (x *BattleEndRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *BattleEndRequest) GetPlayers() []*PlayerMatchInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *BattleEndRequest) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_NONE_MODE
}

func (x *BattleEndRequest) GetInGameMode() InGameMode {
	if x != nil {
		return x.InGameMode
	}
	return InGameMode_SOLO
}

func (x *BattleEndRequest) GetDurationSec() int32 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

type PlayerMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID   string `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	GameResult int32  `protobuf:"varint,2,opt,name=gameResult,proto3" json:"gameResult,omitempty"`
	// Deprecated: Marked as deprecated in thetan/immortal/v1/immortal.proto.
	Hero             *Hero           `protobuf:"bytes,3,opt,name=hero,proto3" json:"hero,omitempty"`
	Skills           []*Skill        `protobuf:"bytes,4,rep,name=skills,proto3" json:"skills,omitempty"`
	Heroes           []*Hero         `protobuf:"bytes,5,rep,name=heroes,proto3" json:"heroes,omitempty"`
	BotBrain         int32           `protobuf:"varint,6,opt,name=botBrain,proto3" json:"botBrain,omitempty"`
	LastUsedHeroID   int32           `protobuf:"varint,7,opt,name=lastUsedHeroID,proto3" json:"lastUsedHeroID,omitempty"`
	Analysis         *PlayerAnalysis `protobuf:"bytes,8,opt,name=analysis,proto3" json:"analysis,omitempty"`
	AvatarID         int32           `protobuf:"varint,9,opt,name=avatarID,proto3" json:"avatarID,omitempty"`
	FrameID          int32           `protobuf:"varint,10,opt,name=frameID,proto3" json:"frameID,omitempty"`
	NameColorID      int32           `protobuf:"varint,11,opt,name=nameColorID,proto3" json:"nameColorID,omitempty"`
	ChallengeTitleID int32           `protobuf:"varint,12,opt,name=challengeTitleID,proto3" json:"challengeTitleID,omitempty"`
	TeamID           int32           `protobuf:"varint,13,opt,name=teamID,proto3" json:"teamID,omitempty"`
}

func (x *PlayerMatchInfo) Reset() {
	*x = PlayerMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchInfo) ProtoMessage() {}

func (x *PlayerMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchInfo.ProtoReflect.Descriptor instead.
func (*PlayerMatchInfo) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerMatchInfo) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *PlayerMatchInfo) GetGameResult() int32 {
	if x != nil {
		return x.GameResult
	}
	return 0
}

// Deprecated: Marked as deprecated in thetan/immortal/v1/immortal.proto.
func (x *PlayerMatchInfo) GetHero() *Hero {
	if x != nil {
		return x.Hero
	}
	return nil
}

func (x *PlayerMatchInfo) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *PlayerMatchInfo) GetHeroes() []*Hero {
	if x != nil {
		return x.Heroes
	}
	return nil
}

func (x *PlayerMatchInfo) GetBotBrain() int32 {
	if x != nil {
		return x.BotBrain
	}
	return 0
}

func (x *PlayerMatchInfo) GetLastUsedHeroID() int32 {
	if x != nil {
		return x.LastUsedHeroID
	}
	return 0
}

func (x *PlayerMatchInfo) GetAnalysis() *PlayerAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *PlayerMatchInfo) GetAvatarID() int32 {
	if x != nil {
		return x.AvatarID
	}
	return 0
}

func (x *PlayerMatchInfo) GetFrameID() int32 {
	if x != nil {
		return x.FrameID
	}
	return 0
}

func (x *PlayerMatchInfo) GetNameColorID() int32 {
	if x != nil {
		return x.NameColorID
	}
	return 0
}

func (x *PlayerMatchInfo) GetChallengeTitleID() int32 {
	if x != nil {
		return x.ChallengeTitleID
	}
	return 0
}

func (x *PlayerMatchInfo) GetTeamID() int32 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

type BattleEndResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID              string             `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	IsWin                 bool               `protobuf:"varint,2,opt,name=isWin,proto3" json:"isWin,omitempty"`
	PlayerScore           float64            `protobuf:"fixed64,3,opt,name=playerScore,proto3" json:"playerScore,omitempty"`
	Trophy                int32              `protobuf:"varint,4,opt,name=trophy,proto3" json:"trophy,omitempty"`
	BattlePoint           int32              `protobuf:"varint,5,opt,name=battlePoint,proto3" json:"battlePoint,omitempty"`
	BattleStar            int32              `protobuf:"varint,6,opt,name=battleStar,proto3" json:"battleStar,omitempty"`
	CumulativeBattlePoint int32              `protobuf:"varint,7,opt,name=cumulativeBattlePoint,proto3" json:"cumulativeBattlePoint,omitempty"`
	Arena                 Arena              `protobuf:"varint,8,opt,name=arena,proto3,enum=thetan.immortal.v1.Arena" json:"arena,omitempty"`
	Players               []*BattleEndPlayer `protobuf:"bytes,9,rep,name=players,proto3" json:"players,omitempty"`
	// Deprecated: Marked as deprecated in thetan/immortal/v1/immortal.proto.
	Hero                 *BattleEndHero           `protobuf:"bytes,10,opt,name=hero,proto3" json:"hero,omitempty"`
	Skills               []*Skill                 `protobuf:"bytes,11,rep,name=skills,proto3" json:"skills,omitempty"`
	Heroes               []*BattleEndHero         `protobuf:"bytes,12,rep,name=heroes,proto3" json:"heroes,omitempty"`
	X2BattlePoint        int32                    `protobuf:"varint,13,opt,name=x2BattlePoint,proto3" json:"x2BattlePoint,omitempty"`
	LastUsedHero         *BattleEndHero           `protobuf:"bytes,14,opt,name=lastUsedHero,proto3" json:"lastUsedHero,omitempty"`
	QuestProgressUpdates []*QuestProgressUpdate   `protobuf:"bytes,15,rep,name=questProgressUpdates,proto3" json:"questProgressUpdates,omitempty"`
	EventPointsUpdates   []*EventPointsUpdateInfo `protobuf:"bytes,16,rep,name=eventPointsUpdates,proto3" json:"eventPointsUpdates,omitempty"`
}

func (x *BattleEndResponse) Reset() {
	*x = BattleEndResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleEndResponse) ProtoMessage() {}

func (x *BattleEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleEndResponse.ProtoReflect.Descriptor instead.
func (*BattleEndResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{6}
}

func (x *BattleEndResponse) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *BattleEndResponse) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *BattleEndResponse) GetPlayerScore() float64 {
	if x != nil {
		return x.PlayerScore
	}
	return 0
}

func (x *BattleEndResponse) GetTrophy() int32 {
	if x != nil {
		return x.Trophy
	}
	return 0
}

func (x *BattleEndResponse) GetBattlePoint() int32 {
	if x != nil {
		return x.BattlePoint
	}
	return 0
}

func (x *BattleEndResponse) GetBattleStar() int32 {
	if x != nil {
		return x.BattleStar
	}
	return 0
}

func (x *BattleEndResponse) GetCumulativeBattlePoint() int32 {
	if x != nil {
		return x.CumulativeBattlePoint
	}
	return 0
}

func (x *BattleEndResponse) GetArena() Arena {
	if x != nil {
		return x.Arena
	}
	return Arena_NONE
}

func (x *BattleEndResponse) GetPlayers() []*BattleEndPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

// Deprecated: Marked as deprecated in thetan/immortal/v1/immortal.proto.
func (x *BattleEndResponse) GetHero() *BattleEndHero {
	if x != nil {
		return x.Hero
	}
	return nil
}

func (x *BattleEndResponse) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *BattleEndResponse) GetHeroes() []*BattleEndHero {
	if x != nil {
		return x.Heroes
	}
	return nil
}

func (x *BattleEndResponse) GetX2BattlePoint() int32 {
	if x != nil {
		return x.X2BattlePoint
	}
	return 0
}

func (x *BattleEndResponse) GetLastUsedHero() *BattleEndHero {
	if x != nil {
		return x.LastUsedHero
	}
	return nil
}

func (x *BattleEndResponse) GetQuestProgressUpdates() []*QuestProgressUpdate {
	if x != nil {
		return x.QuestProgressUpdates
	}
	return nil
}

func (x *BattleEndResponse) GetEventPointsUpdates() []*EventPointsUpdateInfo {
	if x != nil {
		return x.EventPointsUpdates
	}
	return nil
}

type BattleEndPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID    string       `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	SkillRating *SkillRating `protobuf:"bytes,2,opt,name=skillRating,proto3" json:"skillRating,omitempty"`
}

func (x *BattleEndPlayer) Reset() {
	*x = BattleEndPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleEndPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleEndPlayer) ProtoMessage() {}

func (x *BattleEndPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleEndPlayer.ProtoReflect.Descriptor instead.
func (*BattleEndPlayer) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{7}
}

func (x *BattleEndPlayer) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *BattleEndPlayer) GetSkillRating() *SkillRating {
	if x != nil {
		return x.SkillRating
	}
	return nil
}

type BattleEndHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinID  int32 `protobuf:"varint,1,opt,name=skinID,proto3" json:"skinID,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Type    int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Rarity  int32 `protobuf:"varint,4,opt,name=rarity,proto3" json:"rarity,omitempty"`
	IsAlive bool  `protobuf:"varint,5,opt,name=isAlive,proto3" json:"isAlive,omitempty"`
}

func (x *BattleEndHero) Reset() {
	*x = BattleEndHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleEndHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleEndHero) ProtoMessage() {}

func (x *BattleEndHero) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleEndHero.ProtoReflect.Descriptor instead.
func (*BattleEndHero) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{8}
}

func (x *BattleEndHero) GetSkinID() int32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *BattleEndHero) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattleEndHero) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BattleEndHero) GetRarity() int32 {
	if x != nil {
		return x.Rarity
	}
	return 0
}

func (x *BattleEndHero) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

type GetHeroConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHeroConfigRequest) Reset() {
	*x = GetHeroConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeroConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeroConfigRequest) ProtoMessage() {}

func (x *GetHeroConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeroConfigRequest.ProtoReflect.Descriptor instead.
func (*GetHeroConfigRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{9}
}

type GetHeroConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heroes       []*HeroFull           `protobuf:"bytes,1,rep,name=heroes,proto3" json:"heroes,omitempty"`
	HeroRarities map[int32]*HeroRarity `protobuf:"bytes,2,rep,name=heroRarities,proto3" json:"heroRarities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetHeroConfigResponse) Reset() {
	*x = GetHeroConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeroConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeroConfigResponse) ProtoMessage() {}

func (x *GetHeroConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeroConfigResponse.ProtoReflect.Descriptor instead.
func (*GetHeroConfigResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{10}
}

func (x *GetHeroConfigResponse) GetHeroes() []*HeroFull {
	if x != nil {
		return x.Heroes
	}
	return nil
}

func (x *GetHeroConfigResponse) GetHeroRarities() map[int32]*HeroRarity {
	if x != nil {
		return x.HeroRarities
	}
	return nil
}

type HeroRarity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultLevel int32 `protobuf:"varint,1,opt,name=defaultLevel,proto3" json:"defaultLevel,omitempty"`
	MaxLevel     int32 `protobuf:"varint,2,opt,name=maxLevel,proto3" json:"maxLevel,omitempty"`
}

func (x *HeroRarity) Reset() {
	*x = HeroRarity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroRarity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroRarity) ProtoMessage() {}

func (x *HeroRarity) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroRarity.ProtoReflect.Descriptor instead.
func (*HeroRarity) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{11}
}

func (x *HeroRarity) GetDefaultLevel() int32 {
	if x != nil {
		return x.DefaultLevel
	}
	return 0
}

func (x *HeroRarity) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

type GetSkillConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSkillConfigRequest) Reset() {
	*x = GetSkillConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkillConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillConfigRequest) ProtoMessage() {}

func (x *GetSkillConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSkillConfigRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{12}
}

type GetSkillConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skills        []*SkillFull           `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty"`
	SkillRarities map[int32]*SkillRarity `protobuf:"bytes,2,rep,name=skillRarities,proto3" json:"skillRarities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSkillConfigResponse) Reset() {
	*x = GetSkillConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkillConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillConfigResponse) ProtoMessage() {}

func (x *GetSkillConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillConfigResponse.ProtoReflect.Descriptor instead.
func (*GetSkillConfigResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{13}
}

func (x *GetSkillConfigResponse) GetSkills() []*SkillFull {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *GetSkillConfigResponse) GetSkillRarities() map[int32]*SkillRarity {
	if x != nil {
		return x.SkillRarities
	}
	return nil
}

type SkillRarity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultLevel int32 `protobuf:"varint,1,opt,name=defaultLevel,proto3" json:"defaultLevel,omitempty"`
	MaxLevel     int32 `protobuf:"varint,2,opt,name=maxLevel,proto3" json:"maxLevel,omitempty"`
}

func (x *SkillRarity) Reset() {
	*x = SkillRarity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillRarity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillRarity) ProtoMessage() {}

func (x *SkillRarity) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillRarity.ProtoReflect.Descriptor instead.
func (*SkillRarity) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{14}
}

func (x *SkillRarity) GetDefaultLevel() int32 {
	if x != nil {
		return x.DefaultLevel
	}
	return 0
}

func (x *SkillRarity) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

type GetUserFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserFriendRequest) Reset() {
	*x = GetUserFriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendRequest) ProtoMessage() {}

func (x *GetUserFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendRequest.ProtoReflect.Descriptor instead.
func (*GetUserFriendRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{15}
}

func (x *GetUserFriendRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*FriendInfo `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends,omitempty"`
}

func (x *GetUserFriendResponse) Reset() {
	*x = GetUserFriendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendResponse) ProtoMessage() {}

func (x *GetUserFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendResponse.ProtoReflect.Descriptor instead.
func (*GetUserFriendResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserFriendResponse) GetFriends() []*FriendInfo {
	if x != nil {
		return x.Friends
	}
	return nil
}

type FriendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendId    string                   `protobuf:"bytes,1,opt,name=friendId,proto3" json:"friendId,omitempty"`
	Status      FriendInfo_FRIEND_STATUS `protobuf:"varint,2,opt,name=status,proto3,enum=thetan.immortal.v1.FriendInfo_FRIEND_STATUS" json:"status,omitempty"`
	Profile     *GetUserProfileResponse  `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	RequestedAt int64                    `protobuf:"varint,4,opt,name=requestedAt,proto3" json:"requestedAt,omitempty"`
}

func (x *FriendInfo) Reset() {
	*x = FriendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendInfo) ProtoMessage() {}

func (x *FriendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendInfo.ProtoReflect.Descriptor instead.
func (*FriendInfo) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{17}
}

func (x *FriendInfo) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

func (x *FriendInfo) GetStatus() FriendInfo_FRIEND_STATUS {
	if x != nil {
		return x.Status
	}
	return FriendInfo_REQUESTED
}

func (x *FriendInfo) GetProfile() *GetUserProfileResponse {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *FriendInfo) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

type GetSeasonalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSeasonalRequest) Reset() {
	*x = GetSeasonalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSeasonalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeasonalRequest) ProtoMessage() {}

func (x *GetSeasonalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeasonalRequest.ProtoReflect.Descriptor instead.
func (*GetSeasonalRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{18}
}

type GetSeasonalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID int32 `protobuf:"varint,1,opt,name=seasonID,proto3" json:"seasonID,omitempty"`
}

func (x *GetSeasonalResponse) Reset() {
	*x = GetSeasonalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSeasonalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeasonalResponse) ProtoMessage() {}

func (x *GetSeasonalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeasonalResponse.ProtoReflect.Descriptor instead.
func (*GetSeasonalResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{19}
}

func (x *GetSeasonalResponse) GetSeasonID() int32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

type TrackSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *TrackSessionRequest) Reset() {
	*x = TrackSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSessionRequest) ProtoMessage() {}

func (x *TrackSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSessionRequest.ProtoReflect.Descriptor instead.
func (*TrackSessionRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{20}
}

func (x *TrackSessionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type TrackSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrackSessionResponse) Reset() {
	*x = TrackSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSessionResponse) ProtoMessage() {}

func (x *TrackSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSessionResponse.ProtoReflect.Descriptor instead.
func (*TrackSessionResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{21}
}

type GetGameDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetGameDataRequest) Reset() {
	*x = GetGameDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameDataRequest) ProtoMessage() {}

func (x *GetGameDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameDataRequest.ProtoReflect.Descriptor instead.
func (*GetGameDataRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{22}
}

func (x *GetGameDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetGameDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListHeroes []*Hero  `protobuf:"bytes,1,rep,name=listHeroes,proto3" json:"listHeroes,omitempty"`
	ListSkills []*Skill `protobuf:"bytes,2,rep,name=listSkills,proto3" json:"listSkills,omitempty"`
}

func (x *GetGameDataResponse) Reset() {
	*x = GetGameDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameDataResponse) ProtoMessage() {}

func (x *GetGameDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameDataResponse.ProtoReflect.Descriptor instead.
func (*GetGameDataResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{23}
}

func (x *GetGameDataResponse) GetListHeroes() []*Hero {
	if x != nil {
		return x.ListHeroes
	}
	return nil
}

func (x *GetGameDataResponse) GetListSkills() []*Skill {
	if x != nil {
		return x.ListSkills
	}
	return nil
}

type EventPointsUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     int64 `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	PointsAdded int32 `protobuf:"varint,2,opt,name=pointsAdded,proto3" json:"pointsAdded,omitempty"`
}

func (x *EventPointsUpdateInfo) Reset() {
	*x = EventPointsUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventPointsUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPointsUpdateInfo) ProtoMessage() {}

func (x *EventPointsUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPointsUpdateInfo.ProtoReflect.Descriptor instead.
func (*EventPointsUpdateInfo) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{24}
}

func (x *EventPointsUpdateInfo) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *EventPointsUpdateInfo) GetPointsAdded() int32 {
	if x != nil {
		return x.PointsAdded
	}
	return 0
}

var File_thetan_immortal_v1_immortal_proto protoreflect.FileDescriptor

var file_thetan_immortal_v1_immortal_proto_rawDesc = []byte{
	0x0a, 0x21, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77,
	0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5e, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x72, 0x6f, 0x70, 0x68, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x22, 0x89, 0x02, 0x0a, 0x10, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e,
	0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x22, 0x84, 0x04, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e,
	0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x65, 0x72, 0x6f, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x74, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x6f, 0x74, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44,
	0x12, 0x3e, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0xb5, 0x06, 0x0a,
	0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x12, 0x34, 0x0a, 0x15, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69,
	0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x52, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x65, 0x72,
	0x6f, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x78, 0x32, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x78, 0x32, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x48, 0x65, 0x72, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x5b, 0x0a, 0x14,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69,
	0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x16, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x11, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x0a, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x02,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x63, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0a, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2d, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x8a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x48,
	0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69,
	0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x53, 0x0a, 0x15,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x32, 0xb5, 0x07, 0x0a, 0x0f, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x24,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x28, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xca, 0x01, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2d, 0x62, 0x75,
	0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x5f, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x54, 0x49, 0x58, 0xaa, 0x02, 0x12, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x49, 0x6d,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x54, 0x68, 0x65, 0x74,
	0x61, 0x6e, 0x5c, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5c, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x14, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x3a, 0x3a, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thetan_immortal_v1_immortal_proto_rawDescOnce sync.Once
	file_thetan_immortal_v1_immortal_proto_rawDescData = file_thetan_immortal_v1_immortal_proto_rawDesc
)

func file_thetan_immortal_v1_immortal_proto_rawDescGZIP() []byte {
	file_thetan_immortal_v1_immortal_proto_rawDescOnce.Do(func() {
		file_thetan_immortal_v1_immortal_proto_rawDescData = protoimpl.X.CompressGZIP(file_thetan_immortal_v1_immortal_proto_rawDescData)
	})
	return file_thetan_immortal_v1_immortal_proto_rawDescData
}

var file_thetan_immortal_v1_immortal_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_thetan_immortal_v1_immortal_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_thetan_immortal_v1_immortal_proto_goTypes = []interface{}{
	(FriendInfo_FRIEND_STATUS)(0),    // 0: thetan.immortal.v1.FriendInfo.FRIEND_STATUS
	(*SearchPlayerInfoRequest)(nil),  // 1: thetan.immortal.v1.SearchPlayerInfoRequest
	(*SearchPlayerInfoResponse)(nil), // 2: thetan.immortal.v1.SearchPlayerInfoResponse
	(*GetUserProfileRequest)(nil),    // 3: thetan.immortal.v1.GetUserProfileRequest
	(*GetUserProfileResponse)(nil),   // 4: thetan.immortal.v1.GetUserProfileResponse
	(*BattleEndRequest)(nil),         // 5: thetan.immortal.v1.BattleEndRequest
	(*PlayerMatchInfo)(nil),          // 6: thetan.immortal.v1.PlayerMatchInfo
	(*BattleEndResponse)(nil),        // 7: thetan.immortal.v1.BattleEndResponse
	(*BattleEndPlayer)(nil),          // 8: thetan.immortal.v1.BattleEndPlayer
	(*BattleEndHero)(nil),            // 9: thetan.immortal.v1.BattleEndHero
	(*GetHeroConfigRequest)(nil),     // 10: thetan.immortal.v1.GetHeroConfigRequest
	(*GetHeroConfigResponse)(nil),    // 11: thetan.immortal.v1.GetHeroConfigResponse
	(*HeroRarity)(nil),               // 12: thetan.immortal.v1.HeroRarity
	(*GetSkillConfigRequest)(nil),    // 13: thetan.immortal.v1.GetSkillConfigRequest
	(*GetSkillConfigResponse)(nil),   // 14: thetan.immortal.v1.GetSkillConfigResponse
	(*SkillRarity)(nil),              // 15: thetan.immortal.v1.SkillRarity
	(*GetUserFriendRequest)(nil),     // 16: thetan.immortal.v1.GetUserFriendRequest
	(*GetUserFriendResponse)(nil),    // 17: thetan.immortal.v1.GetUserFriendResponse
	(*FriendInfo)(nil),               // 18: thetan.immortal.v1.FriendInfo
	(*GetSeasonalRequest)(nil),       // 19: thetan.immortal.v1.GetSeasonalRequest
	(*GetSeasonalResponse)(nil),      // 20: thetan.immortal.v1.GetSeasonalResponse
	(*TrackSessionRequest)(nil),      // 21: thetan.immortal.v1.TrackSessionRequest
	(*TrackSessionResponse)(nil),     // 22: thetan.immortal.v1.TrackSessionResponse
	(*GetGameDataRequest)(nil),       // 23: thetan.immortal.v1.GetGameDataRequest
	(*GetGameDataResponse)(nil),      // 24: thetan.immortal.v1.GetGameDataResponse
	(*EventPointsUpdateInfo)(nil),    // 25: thetan.immortal.v1.EventPointsUpdateInfo
	nil,                              // 26: thetan.immortal.v1.GetHeroConfigResponse.HeroRaritiesEntry
	nil,                              // 27: thetan.immortal.v1.GetSkillConfigResponse.SkillRaritiesEntry
	(InGameMode)(0),                  // 28: thetan.immortal.v1.InGameMode
	(*PlayerInfoMatchProto)(nil),     // 29: thetan.immortal.v1.PlayerInfoMatchProto
	(GameMode)(0),                    // 30: thetan.immortal.v1.GameMode
	(*Hero)(nil),                     // 31: thetan.immortal.v1.Hero
	(*Skill)(nil),                    // 32: thetan.immortal.v1.Skill
	(*PlayerAnalysis)(nil),           // 33: thetan.immortal.v1.PlayerAnalysis
	(Arena)(0),                       // 34: thetan.immortal.v1.Arena
	(*QuestProgressUpdate)(nil),      // 35: thetan.immortal.v1.QuestProgressUpdate
	(*SkillRating)(nil),              // 36: thetan.immortal.v1.SkillRating
	(*HeroFull)(nil),                 // 37: thetan.immortal.v1.HeroFull
	(*SkillFull)(nil),                // 38: thetan.immortal.v1.SkillFull
}
var file_thetan_immortal_v1_immortal_proto_depIdxs = []int32{
	28, // 0: thetan.immortal.v1.SearchPlayerInfoRequest.inGameMode:type_name -> thetan.immortal.v1.InGameMode
	29, // 1: thetan.immortal.v1.SearchPlayerInfoResponse.players:type_name -> thetan.immortal.v1.PlayerInfoMatchProto
	6,  // 2: thetan.immortal.v1.BattleEndRequest.players:type_name -> thetan.immortal.v1.PlayerMatchInfo
	30, // 3: thetan.immortal.v1.BattleEndRequest.gameMode:type_name -> thetan.immortal.v1.GameMode
	28, // 4: thetan.immortal.v1.BattleEndRequest.inGameMode:type_name -> thetan.immortal.v1.InGameMode
	31, // 5: thetan.immortal.v1.PlayerMatchInfo.hero:type_name -> thetan.immortal.v1.Hero
	32, // 6: thetan.immortal.v1.PlayerMatchInfo.skills:type_name -> thetan.immortal.v1.Skill
	31, // 7: thetan.immortal.v1.PlayerMatchInfo.heroes:type_name -> thetan.immortal.v1.Hero
	33, // 8: thetan.immortal.v1.PlayerMatchInfo.analysis:type_name -> thetan.immortal.v1.PlayerAnalysis
	34, // 9: thetan.immortal.v1.BattleEndResponse.arena:type_name -> thetan.immortal.v1.Arena
	8,  // 10: thetan.immortal.v1.BattleEndResponse.players:type_name -> thetan.immortal.v1.BattleEndPlayer
	9,  // 11: thetan.immortal.v1.BattleEndResponse.hero:type_name -> thetan.immortal.v1.BattleEndHero
	32, // 12: thetan.immortal.v1.BattleEndResponse.skills:type_name -> thetan.immortal.v1.Skill
	9,  // 13: thetan.immortal.v1.BattleEndResponse.heroes:type_name -> thetan.immortal.v1.BattleEndHero
	9,  // 14: thetan.immortal.v1.BattleEndResponse.lastUsedHero:type_name -> thetan.immortal.v1.BattleEndHero
	35, // 15: thetan.immortal.v1.BattleEndResponse.questProgressUpdates:type_name -> thetan.immortal.v1.QuestProgressUpdate
	25, // 16: thetan.immortal.v1.BattleEndResponse.eventPointsUpdates:type_name -> thetan.immortal.v1.EventPointsUpdateInfo
	36, // 17: thetan.immortal.v1.BattleEndPlayer.skillRating:type_name -> thetan.immortal.v1.SkillRating
	37, // 18: thetan.immortal.v1.GetHeroConfigResponse.heroes:type_name -> thetan.immortal.v1.HeroFull
	26, // 19: thetan.immortal.v1.GetHeroConfigResponse.heroRarities:type_name -> thetan.immortal.v1.GetHeroConfigResponse.HeroRaritiesEntry
	38, // 20: thetan.immortal.v1.GetSkillConfigResponse.skills:type_name -> thetan.immortal.v1.SkillFull
	27, // 21: thetan.immortal.v1.GetSkillConfigResponse.skillRarities:type_name -> thetan.immortal.v1.GetSkillConfigResponse.SkillRaritiesEntry
	18, // 22: thetan.immortal.v1.GetUserFriendResponse.friends:type_name -> thetan.immortal.v1.FriendInfo
	0,  // 23: thetan.immortal.v1.FriendInfo.status:type_name -> thetan.immortal.v1.FriendInfo.FRIEND_STATUS
	4,  // 24: thetan.immortal.v1.FriendInfo.profile:type_name -> thetan.immortal.v1.GetUserProfileResponse
	31, // 25: thetan.immortal.v1.GetGameDataResponse.listHeroes:type_name -> thetan.immortal.v1.Hero
	32, // 26: thetan.immortal.v1.GetGameDataResponse.listSkills:type_name -> thetan.immortal.v1.Skill
	12, // 27: thetan.immortal.v1.GetHeroConfigResponse.HeroRaritiesEntry.value:type_name -> thetan.immortal.v1.HeroRarity
	15, // 28: thetan.immortal.v1.GetSkillConfigResponse.SkillRaritiesEntry.value:type_name -> thetan.immortal.v1.SkillRarity
	1,  // 29: thetan.immortal.v1.ImmortalService.SearchPlayerInfo:input_type -> thetan.immortal.v1.SearchPlayerInfoRequest
	3,  // 30: thetan.immortal.v1.ImmortalService.GetUserProfile:input_type -> thetan.immortal.v1.GetUserProfileRequest
	5,  // 31: thetan.immortal.v1.ImmortalService.BattleEnd:input_type -> thetan.immortal.v1.BattleEndRequest
	10, // 32: thetan.immortal.v1.ImmortalService.GetHeroConfig:input_type -> thetan.immortal.v1.GetHeroConfigRequest
	13, // 33: thetan.immortal.v1.ImmortalService.GetSkillConfig:input_type -> thetan.immortal.v1.GetSkillConfigRequest
	16, // 34: thetan.immortal.v1.ImmortalService.GetListFriends:input_type -> thetan.immortal.v1.GetUserFriendRequest
	19, // 35: thetan.immortal.v1.ImmortalService.GetSeasonal:input_type -> thetan.immortal.v1.GetSeasonalRequest
	21, // 36: thetan.immortal.v1.ImmortalService.TrackStartSession:input_type -> thetan.immortal.v1.TrackSessionRequest
	23, // 37: thetan.immortal.v1.ImmortalService.GetGameData:input_type -> thetan.immortal.v1.GetGameDataRequest
	2,  // 38: thetan.immortal.v1.ImmortalService.SearchPlayerInfo:output_type -> thetan.immortal.v1.SearchPlayerInfoResponse
	4,  // 39: thetan.immortal.v1.ImmortalService.GetUserProfile:output_type -> thetan.immortal.v1.GetUserProfileResponse
	7,  // 40: thetan.immortal.v1.ImmortalService.BattleEnd:output_type -> thetan.immortal.v1.BattleEndResponse
	11, // 41: thetan.immortal.v1.ImmortalService.GetHeroConfig:output_type -> thetan.immortal.v1.GetHeroConfigResponse
	14, // 42: thetan.immortal.v1.ImmortalService.GetSkillConfig:output_type -> thetan.immortal.v1.GetSkillConfigResponse
	17, // 43: thetan.immortal.v1.ImmortalService.GetListFriends:output_type -> thetan.immortal.v1.GetUserFriendResponse
	20, // 44: thetan.immortal.v1.ImmortalService.GetSeasonal:output_type -> thetan.immortal.v1.GetSeasonalResponse
	22, // 45: thetan.immortal.v1.ImmortalService.TrackStartSession:output_type -> thetan.immortal.v1.TrackSessionResponse
	24, // 46: thetan.immortal.v1.ImmortalService.GetGameData:output_type -> thetan.immortal.v1.GetGameDataResponse
	38, // [38:47] is the sub-list for method output_type
	29, // [29:38] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_thetan_immortal_v1_immortal_proto_init() }
func file_thetan_immortal_v1_immortal_proto_init() {
	if File_thetan_immortal_v1_immortal_proto != nil {
		return
	}
	file_thetan_immortal_v1_immortal_shared_proto_init()
	file_thetan_immortal_v1_immortal_game_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_thetan_immortal_v1_immortal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPlayerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPlayerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleEndResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleEndPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleEndHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeroConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeroConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroRarity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkillConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkillConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillRarity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFriendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSeasonalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSeasonalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventPointsUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thetan_immortal_v1_immortal_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_thetan_immortal_v1_immortal_proto_goTypes,
		DependencyIndexes: file_thetan_immortal_v1_immortal_proto_depIdxs,
		EnumInfos:         file_thetan_immortal_v1_immortal_proto_enumTypes,
		MessageInfos:      file_thetan_immortal_v1_immortal_proto_msgTypes,
	}.Build()
	File_thetan_immortal_v1_immortal_proto = out.File
	file_thetan_immortal_v1_immortal_proto_rawDesc = nil
	file_thetan_immortal_v1_immortal_proto_goTypes = nil
	file_thetan_immortal_v1_immortal_proto_depIdxs = nil
}
