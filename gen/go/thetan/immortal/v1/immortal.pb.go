// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: thetan/immortal/v1/immortal.proto

package thetan_immortal_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImmortalMatchFoundResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchID string                          `protobuf:"bytes,1,opt,name=matchID,proto3" json:"matchID,omitempty"`
	Players []*ImmortalPlayerInfoMatchProto `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *ImmortalMatchFoundResponseProto) Reset() {
	*x = ImmortalMatchFoundResponseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmortalMatchFoundResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmortalMatchFoundResponseProto) ProtoMessage() {}

func (x *ImmortalMatchFoundResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmortalMatchFoundResponseProto.ProtoReflect.Descriptor instead.
func (*ImmortalMatchFoundResponseProto) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{0}
}

func (x *ImmortalMatchFoundResponseProto) GetMatchID() string {
	if x != nil {
		return x.MatchID
	}
	return ""
}

func (x *ImmortalMatchFoundResponseProto) GetPlayers() []*ImmortalPlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

type ImmortalPlayerInfoMatchProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID     string   `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	PartyID      string   `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	SkinID       int32    `protobuf:"varint,3,opt,name=skinID,proto3" json:"skinID,omitempty"`
	Trophies     int32    `protobuf:"varint,4,opt,name=trophies,proto3" json:"trophies,omitempty"`
	HeroLevel    int32    `protobuf:"varint,5,opt,name=heroLevel,proto3" json:"heroLevel,omitempty"`
	Regions      []int32  `protobuf:"varint,6,rep,packed,name=regions,proto3" json:"regions,omitempty"`
	PlayerName   string   `protobuf:"bytes,7,opt,name=playerName,proto3" json:"playerName,omitempty"`
	AvatarID     int32    `protobuf:"varint,8,opt,name=avatarID,proto3" json:"avatarID,omitempty"`
	FrameID      int32    `protobuf:"varint,9,opt,name=frameID,proto3" json:"frameID,omitempty"`
	HeroID       string   `protobuf:"bytes,10,opt,name=heroID,proto3" json:"heroID,omitempty"`
	TrophySearch int32    `protobuf:"varint,11,opt,name=trophySearch,proto3" json:"trophySearch,omitempty"`
	BrainType    int32    `protobuf:"varint,12,opt,name=brainType,proto3" json:"brainType,omitempty"`
	TeamID       int32    `protobuf:"varint,13,opt,name=teamID,proto3" json:"teamID,omitempty"`
	BattleCount  int32    `protobuf:"varint,14,opt,name=battleCount,proto3" json:"battleCount,omitempty"`
	NameColorID  int32    `protobuf:"varint,15,opt,name=nameColorID,proto3" json:"nameColorID,omitempty"`
	Rank         int32    `protobuf:"varint,16,opt,name=rank,proto3" json:"rank,omitempty"`
	Skills       []uint32 `protobuf:"varint,17,rep,packed,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ImmortalPlayerInfoMatchProto) Reset() {
	*x = ImmortalPlayerInfoMatchProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmortalPlayerInfoMatchProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmortalPlayerInfoMatchProto) ProtoMessage() {}

func (x *ImmortalPlayerInfoMatchProto) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmortalPlayerInfoMatchProto.ProtoReflect.Descriptor instead.
func (*ImmortalPlayerInfoMatchProto) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{1}
}

func (x *ImmortalPlayerInfoMatchProto) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *ImmortalPlayerInfoMatchProto) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *ImmortalPlayerInfoMatchProto) GetSkinID() int32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetTrophies() int32 {
	if x != nil {
		return x.Trophies
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetRegions() []int32 {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *ImmortalPlayerInfoMatchProto) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *ImmortalPlayerInfoMatchProto) GetAvatarID() int32 {
	if x != nil {
		return x.AvatarID
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetFrameID() int32 {
	if x != nil {
		return x.FrameID
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetHeroID() string {
	if x != nil {
		return x.HeroID
	}
	return ""
}

func (x *ImmortalPlayerInfoMatchProto) GetTrophySearch() int32 {
	if x != nil {
		return x.TrophySearch
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetBrainType() int32 {
	if x != nil {
		return x.BrainType
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetTeamID() int32 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetBattleCount() int32 {
	if x != nil {
		return x.BattleCount
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetNameColorID() int32 {
	if x != nil {
		return x.NameColorID
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ImmortalPlayerInfoMatchProto) GetSkills() []uint32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

type ImmortalCancelTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID int32 `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	PartyID  int32 `protobuf:"varint,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	TicketID int32 `protobuf:"varint,3,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *ImmortalCancelTicketRequest) Reset() {
	*x = ImmortalCancelTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmortalCancelTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmortalCancelTicketRequest) ProtoMessage() {}

func (x *ImmortalCancelTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmortalCancelTicketRequest.ProtoReflect.Descriptor instead.
func (*ImmortalCancelTicketRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{2}
}

func (x *ImmortalCancelTicketRequest) GetPlayerID() int32 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *ImmortalCancelTicketRequest) GetPartyID() int32 {
	if x != nil {
		return x.PartyID
	}
	return 0
}

func (x *ImmortalCancelTicketRequest) GetTicketID() int32 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

type ImmortalCancelTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID int32 `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	PartyID  int32 `protobuf:"varint,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	TicketID int32 `protobuf:"varint,3,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *ImmortalCancelTicketResponse) Reset() {
	*x = ImmortalCancelTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmortalCancelTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmortalCancelTicketResponse) ProtoMessage() {}

func (x *ImmortalCancelTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmortalCancelTicketResponse.ProtoReflect.Descriptor instead.
func (*ImmortalCancelTicketResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{3}
}

func (x *ImmortalCancelTicketResponse) GetPlayerID() int32 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *ImmortalCancelTicketResponse) GetPartyID() int32 {
	if x != nil {
		return x.PartyID
	}
	return 0
}

func (x *ImmortalCancelTicketResponse) GetTicketID() int32 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

type SearchUserRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *SearchUserRankingRequest) Reset() {
	*x = SearchUserRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserRankingRequest) ProtoMessage() {}

func (x *SearchUserRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserRankingRequest.ProtoReflect.Descriptor instead.
func (*SearchUserRankingRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{4}
}

func (x *SearchUserRankingRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type SearchUserRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRankingByUserID map[string]*UserRanking `protobuf:"bytes,1,rep,name=userRankingByUserID,proto3" json:"userRankingByUserID,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchUserRankingResponse) Reset() {
	*x = SearchUserRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserRankingResponse) ProtoMessage() {}

func (x *SearchUserRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserRankingResponse.ProtoReflect.Descriptor instead.
func (*SearchUserRankingResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{5}
}

func (x *SearchUserRankingResponse) GetUserRankingByUserID() map[string]*UserRanking {
	if x != nil {
		return x.UserRankingByUserID
	}
	return nil
}

type UserRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Rank   int32  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Trophy int32  `protobuf:"varint,3,opt,name=trophy,proto3" json:"trophy,omitempty"`
}

func (x *UserRanking) Reset() {
	*x = UserRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRanking) ProtoMessage() {}

func (x *UserRanking) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRanking.ProtoReflect.Descriptor instead.
func (*UserRanking) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{6}
}

func (x *UserRanking) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserRanking) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UserRanking) GetTrophy() int32 {
	if x != nil {
		return x.Trophy
	}
	return 0
}

type CreateManyUserRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListUserRanking []*UserRanking `protobuf:"bytes,1,rep,name=ListUserRanking,proto3" json:"ListUserRanking,omitempty"`
}

func (x *CreateManyUserRankingRequest) Reset() {
	*x = CreateManyUserRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManyUserRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManyUserRankingRequest) ProtoMessage() {}

func (x *CreateManyUserRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManyUserRankingRequest.ProtoReflect.Descriptor instead.
func (*CreateManyUserRankingRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{7}
}

func (x *CreateManyUserRankingRequest) GetListUserRanking() []*UserRanking {
	if x != nil {
		return x.ListUserRanking
	}
	return nil
}

type CreateManyUserRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRankingByUserID map[string]*UserRanking `protobuf:"bytes,1,rep,name=userRankingByUserID,proto3" json:"userRankingByUserID,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateManyUserRankingResponse) Reset() {
	*x = CreateManyUserRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManyUserRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManyUserRankingResponse) ProtoMessage() {}

func (x *CreateManyUserRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManyUserRankingResponse.ProtoReflect.Descriptor instead.
func (*CreateManyUserRankingResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{8}
}

func (x *CreateManyUserRankingResponse) GetUserRankingByUserID() map[string]*UserRanking {
	if x != nil {
		return x.UserRankingByUserID
	}
	return nil
}

type SearchPlayerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerIDs []string `protobuf:"bytes,1,rep,name=playerIDs,proto3" json:"playerIDs,omitempty"`
}

func (x *SearchPlayerInfoRequest) Reset() {
	*x = SearchPlayerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlayerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlayerInfoRequest) ProtoMessage() {}

func (x *SearchPlayerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlayerInfoRequest.ProtoReflect.Descriptor instead.
func (*SearchPlayerInfoRequest) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{9}
}

func (x *SearchPlayerInfoRequest) GetPlayerIDs() []string {
	if x != nil {
		return x.PlayerIDs
	}
	return nil
}

type SearchPlayerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*ImmortalPlayerInfoMatchProto `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *SearchPlayerInfoResponse) Reset() {
	*x = SearchPlayerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlayerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlayerInfoResponse) ProtoMessage() {}

func (x *SearchPlayerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlayerInfoResponse.ProtoReflect.Descriptor instead.
func (*SearchPlayerInfoResponse) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{10}
}

func (x *SearchPlayerInfoResponse) GetPlayers() []*ImmortalPlayerInfoMatchProto {
	if x != nil {
		return x.Players
	}
	return nil
}

type CancelTicketSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID int32 `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	PartyID  int32 `protobuf:"varint,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	TicketID int32 `protobuf:"varint,3,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *CancelTicketSuccess) Reset() {
	*x = CancelTicketSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTicketSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTicketSuccess) ProtoMessage() {}

func (x *CancelTicketSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_immortal_v1_immortal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTicketSuccess.ProtoReflect.Descriptor instead.
func (*CancelTicketSuccess) Descriptor() ([]byte, []int) {
	return file_thetan_immortal_v1_immortal_proto_rawDescGZIP(), []int{11}
}

func (x *CancelTicketSuccess) GetPlayerID() int32 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *CancelTicketSuccess) GetPartyID() int32 {
	if x != nil {
		return x.PartyID
	}
	return 0
}

func (x *CancelTicketSuccess) GetTicketID() int32 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

var File_thetan_immortal_v1_immortal_proto protoreflect.FileDescriptor

var file_thetan_immortal_v1_immortal_proto_rawDesc = []byte{
	0x0a, 0x21, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x22, 0x87, 0x01, 0x0a, 0x1f, 0x49, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x22, 0xf8, 0x03, 0x0a, 0x1c, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x6f, 0x0a, 0x1b,
	0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x70, 0x0a,
	0x1c, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22,
	0x34, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x67, 0x0a,
	0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x22, 0x69, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x86, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x1a, 0x67, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a,
	0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x66, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x67,
	0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x32, 0xf6, 0x02, 0x0a, 0x0f, 0x49, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x11, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x93, 0x01, 0x0a, 0x1c, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x73, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xca, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x42, 0x0d, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x37, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2d, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x69, 0x6d, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5f,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x49,
	0x58, 0xaa, 0x02, 0x12, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x49, 0x6d, 0x6d, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5c,
	0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x54, 0x68,
	0x65, 0x74, 0x61, 0x6e, 0x5c, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54,
	0x68, 0x65, 0x74, 0x61, 0x6e, 0x3a, 0x3a, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thetan_immortal_v1_immortal_proto_rawDescOnce sync.Once
	file_thetan_immortal_v1_immortal_proto_rawDescData = file_thetan_immortal_v1_immortal_proto_rawDesc
)

func file_thetan_immortal_v1_immortal_proto_rawDescGZIP() []byte {
	file_thetan_immortal_v1_immortal_proto_rawDescOnce.Do(func() {
		file_thetan_immortal_v1_immortal_proto_rawDescData = protoimpl.X.CompressGZIP(file_thetan_immortal_v1_immortal_proto_rawDescData)
	})
	return file_thetan_immortal_v1_immortal_proto_rawDescData
}

var file_thetan_immortal_v1_immortal_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_thetan_immortal_v1_immortal_proto_goTypes = []interface{}{
	(*ImmortalMatchFoundResponseProto)(nil), // 0: thetan.immortal.v1.ImmortalMatchFoundResponseProto
	(*ImmortalPlayerInfoMatchProto)(nil),    // 1: thetan.immortal.v1.ImmortalPlayerInfoMatchProto
	(*ImmortalCancelTicketRequest)(nil),     // 2: thetan.immortal.v1.ImmortalCancelTicketRequest
	(*ImmortalCancelTicketResponse)(nil),    // 3: thetan.immortal.v1.ImmortalCancelTicketResponse
	(*SearchUserRankingRequest)(nil),        // 4: thetan.immortal.v1.SearchUserRankingRequest
	(*SearchUserRankingResponse)(nil),       // 5: thetan.immortal.v1.SearchUserRankingResponse
	(*UserRanking)(nil),                     // 6: thetan.immortal.v1.UserRanking
	(*CreateManyUserRankingRequest)(nil),    // 7: thetan.immortal.v1.CreateManyUserRankingRequest
	(*CreateManyUserRankingResponse)(nil),   // 8: thetan.immortal.v1.CreateManyUserRankingResponse
	(*SearchPlayerInfoRequest)(nil),         // 9: thetan.immortal.v1.SearchPlayerInfoRequest
	(*SearchPlayerInfoResponse)(nil),        // 10: thetan.immortal.v1.SearchPlayerInfoResponse
	(*CancelTicketSuccess)(nil),             // 11: thetan.immortal.v1.CancelTicketSuccess
	nil,                                     // 12: thetan.immortal.v1.SearchUserRankingResponse.UserRankingByUserIDEntry
	nil,                                     // 13: thetan.immortal.v1.CreateManyUserRankingResponse.UserRankingByUserIDEntry
}
var file_thetan_immortal_v1_immortal_proto_depIdxs = []int32{
	1,  // 0: thetan.immortal.v1.ImmortalMatchFoundResponseProto.players:type_name -> thetan.immortal.v1.ImmortalPlayerInfoMatchProto
	12, // 1: thetan.immortal.v1.SearchUserRankingResponse.userRankingByUserID:type_name -> thetan.immortal.v1.SearchUserRankingResponse.UserRankingByUserIDEntry
	6,  // 2: thetan.immortal.v1.CreateManyUserRankingRequest.ListUserRanking:type_name -> thetan.immortal.v1.UserRanking
	13, // 3: thetan.immortal.v1.CreateManyUserRankingResponse.userRankingByUserID:type_name -> thetan.immortal.v1.CreateManyUserRankingResponse.UserRankingByUserIDEntry
	1,  // 4: thetan.immortal.v1.SearchPlayerInfoResponse.players:type_name -> thetan.immortal.v1.ImmortalPlayerInfoMatchProto
	6,  // 5: thetan.immortal.v1.SearchUserRankingResponse.UserRankingByUserIDEntry.value:type_name -> thetan.immortal.v1.UserRanking
	6,  // 6: thetan.immortal.v1.CreateManyUserRankingResponse.UserRankingByUserIDEntry.value:type_name -> thetan.immortal.v1.UserRanking
	4,  // 7: thetan.immortal.v1.ImmortalService.SearchUserRanking:input_type -> thetan.immortal.v1.SearchUserRankingRequest
	7,  // 8: thetan.immortal.v1.ImmortalService.CreateManyUserRanking:input_type -> thetan.immortal.v1.CreateManyUserRankingRequest
	9,  // 9: thetan.immortal.v1.ImmortalService.SearchPlayerInfo:input_type -> thetan.immortal.v1.SearchPlayerInfoRequest
	2,  // 10: thetan.immortal.v1.ImmortalMatchDirectorService.CancelTicket:input_type -> thetan.immortal.v1.ImmortalCancelTicketRequest
	5,  // 11: thetan.immortal.v1.ImmortalService.SearchUserRanking:output_type -> thetan.immortal.v1.SearchUserRankingResponse
	8,  // 12: thetan.immortal.v1.ImmortalService.CreateManyUserRanking:output_type -> thetan.immortal.v1.CreateManyUserRankingResponse
	10, // 13: thetan.immortal.v1.ImmortalService.SearchPlayerInfo:output_type -> thetan.immortal.v1.SearchPlayerInfoResponse
	3,  // 14: thetan.immortal.v1.ImmortalMatchDirectorService.CancelTicket:output_type -> thetan.immortal.v1.ImmortalCancelTicketResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_thetan_immortal_v1_immortal_proto_init() }
func file_thetan_immortal_v1_immortal_proto_init() {
	if File_thetan_immortal_v1_immortal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_thetan_immortal_v1_immortal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmortalMatchFoundResponseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmortalPlayerInfoMatchProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmortalCancelTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmortalCancelTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManyUserRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManyUserRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPlayerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPlayerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_immortal_v1_immortal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTicketSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thetan_immortal_v1_immortal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_thetan_immortal_v1_immortal_proto_goTypes,
		DependencyIndexes: file_thetan_immortal_v1_immortal_proto_depIdxs,
		MessageInfos:      file_thetan_immortal_v1_immortal_proto_msgTypes,
	}.Build()
	File_thetan_immortal_v1_immortal_proto = out.File
	file_thetan_immortal_v1_immortal_proto_rawDesc = nil
	file_thetan_immortal_v1_immortal_proto_goTypes = nil
	file_thetan_immortal_v1_immortal_proto_depIdxs = nil
}
