// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/immortal/v1/immortal.proto

package thetan_immortal_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImmortalService_SearchPlayerInfo_FullMethodName = "/thetan.immortal.v1.ImmortalService/SearchPlayerInfo"
	ImmortalService_GetUserProfile_FullMethodName   = "/thetan.immortal.v1.ImmortalService/GetUserProfile"
	ImmortalService_BattleEnd_FullMethodName        = "/thetan.immortal.v1.ImmortalService/BattleEnd"
	ImmortalService_GetHeroes_FullMethodName        = "/thetan.immortal.v1.ImmortalService/GetHeroes"
	ImmortalService_GetSkills_FullMethodName        = "/thetan.immortal.v1.ImmortalService/GetSkills"
)

// ImmortalServiceClient is the client API for ImmortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImmortalServiceClient interface {
	SearchPlayerInfo(ctx context.Context, in *SearchPlayerInfoRequest, opts ...grpc.CallOption) (*SearchPlayerInfoResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	BattleEnd(ctx context.Context, in *BattleEndRequest, opts ...grpc.CallOption) (ImmortalService_BattleEndClient, error)
	GetHeroes(ctx context.Context, in *GetHeroesRequest, opts ...grpc.CallOption) (*GetHeroesResponse, error)
	GetSkills(ctx context.Context, in *GetSkillsRequest, opts ...grpc.CallOption) (*GetSkillsResponse, error)
}

type immortalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImmortalServiceClient(cc grpc.ClientConnInterface) ImmortalServiceClient {
	return &immortalServiceClient{cc}
}

func (c *immortalServiceClient) SearchPlayerInfo(ctx context.Context, in *SearchPlayerInfoRequest, opts ...grpc.CallOption) (*SearchPlayerInfoResponse, error) {
	out := new(SearchPlayerInfoResponse)
	err := c.cc.Invoke(ctx, ImmortalService_SearchPlayerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immortalServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, ImmortalService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immortalServiceClient) BattleEnd(ctx context.Context, in *BattleEndRequest, opts ...grpc.CallOption) (ImmortalService_BattleEndClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmortalService_ServiceDesc.Streams[0], ImmortalService_BattleEnd_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &immortalServiceBattleEndClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmortalService_BattleEndClient interface {
	Recv() (*BattleEndResponse, error)
	grpc.ClientStream
}

type immortalServiceBattleEndClient struct {
	grpc.ClientStream
}

func (x *immortalServiceBattleEndClient) Recv() (*BattleEndResponse, error) {
	m := new(BattleEndResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immortalServiceClient) GetHeroes(ctx context.Context, in *GetHeroesRequest, opts ...grpc.CallOption) (*GetHeroesResponse, error) {
	out := new(GetHeroesResponse)
	err := c.cc.Invoke(ctx, ImmortalService_GetHeroes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immortalServiceClient) GetSkills(ctx context.Context, in *GetSkillsRequest, opts ...grpc.CallOption) (*GetSkillsResponse, error) {
	out := new(GetSkillsResponse)
	err := c.cc.Invoke(ctx, ImmortalService_GetSkills_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImmortalServiceServer is the server API for ImmortalService service.
// All implementations must embed UnimplementedImmortalServiceServer
// for forward compatibility
type ImmortalServiceServer interface {
	SearchPlayerInfo(context.Context, *SearchPlayerInfoRequest) (*SearchPlayerInfoResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	BattleEnd(*BattleEndRequest, ImmortalService_BattleEndServer) error
	GetHeroes(context.Context, *GetHeroesRequest) (*GetHeroesResponse, error)
	GetSkills(context.Context, *GetSkillsRequest) (*GetSkillsResponse, error)
	mustEmbedUnimplementedImmortalServiceServer()
}

// UnimplementedImmortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImmortalServiceServer struct {
}

func (UnimplementedImmortalServiceServer) SearchPlayerInfo(context.Context, *SearchPlayerInfoRequest) (*SearchPlayerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlayerInfo not implemented")
}
func (UnimplementedImmortalServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedImmortalServiceServer) BattleEnd(*BattleEndRequest, ImmortalService_BattleEndServer) error {
	return status.Errorf(codes.Unimplemented, "method BattleEnd not implemented")
}
func (UnimplementedImmortalServiceServer) GetHeroes(context.Context, *GetHeroesRequest) (*GetHeroesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeroes not implemented")
}
func (UnimplementedImmortalServiceServer) GetSkills(context.Context, *GetSkillsRequest) (*GetSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkills not implemented")
}
func (UnimplementedImmortalServiceServer) mustEmbedUnimplementedImmortalServiceServer() {}

// UnsafeImmortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImmortalServiceServer will
// result in compilation errors.
type UnsafeImmortalServiceServer interface {
	mustEmbedUnimplementedImmortalServiceServer()
}

func RegisterImmortalServiceServer(s grpc.ServiceRegistrar, srv ImmortalServiceServer) {
	s.RegisterService(&ImmortalService_ServiceDesc, srv)
}

func _ImmortalService_SearchPlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmortalServiceServer).SearchPlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmortalService_SearchPlayerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmortalServiceServer).SearchPlayerInfo(ctx, req.(*SearchPlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmortalService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmortalServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmortalService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmortalServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmortalService_BattleEnd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BattleEndRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmortalServiceServer).BattleEnd(m, &immortalServiceBattleEndServer{stream})
}

type ImmortalService_BattleEndServer interface {
	Send(*BattleEndResponse) error
	grpc.ServerStream
}

type immortalServiceBattleEndServer struct {
	grpc.ServerStream
}

func (x *immortalServiceBattleEndServer) Send(m *BattleEndResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmortalService_GetHeroes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeroesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmortalServiceServer).GetHeroes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmortalService_GetHeroes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmortalServiceServer).GetHeroes(ctx, req.(*GetHeroesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmortalService_GetSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmortalServiceServer).GetSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmortalService_GetSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmortalServiceServer).GetSkills(ctx, req.(*GetSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImmortalService_ServiceDesc is the grpc.ServiceDesc for ImmortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImmortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.immortal.v1.ImmortalService",
	HandlerType: (*ImmortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchPlayerInfo",
			Handler:    _ImmortalService_SearchPlayerInfo_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _ImmortalService_GetUserProfile_Handler,
		},
		{
			MethodName: "GetHeroes",
			Handler:    _ImmortalService_GetHeroes_Handler,
		},
		{
			MethodName: "GetSkills",
			Handler:    _ImmortalService_GetSkills_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BattleEnd",
			Handler:       _ImmortalService_BattleEnd_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "thetan/immortal/v1/immortal.proto",
}
