// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/immortal/v1/immortal_bot.proto

package thetan_immortal_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BotImmortalService_SearchBotRanking_FullMethodName     = "/thetan.immortal.v1.BotImmortalService/SearchBotRanking"
	BotImmortalService_CreateManyBotRanking_FullMethodName = "/thetan.immortal.v1.BotImmortalService/CreateManyBotRanking"
)

// BotImmortalServiceClient is the client API for BotImmortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotImmortalServiceClient interface {
	SearchBotRanking(ctx context.Context, in *SearchBotRankingRequest, opts ...grpc.CallOption) (*SearchBotRankingResponse, error)
	CreateManyBotRanking(ctx context.Context, in *CreateManyBotRankingRequest, opts ...grpc.CallOption) (*CreateManyBotRankingResponse, error)
}

type botImmortalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotImmortalServiceClient(cc grpc.ClientConnInterface) BotImmortalServiceClient {
	return &botImmortalServiceClient{cc}
}

func (c *botImmortalServiceClient) SearchBotRanking(ctx context.Context, in *SearchBotRankingRequest, opts ...grpc.CallOption) (*SearchBotRankingResponse, error) {
	out := new(SearchBotRankingResponse)
	err := c.cc.Invoke(ctx, BotImmortalService_SearchBotRanking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botImmortalServiceClient) CreateManyBotRanking(ctx context.Context, in *CreateManyBotRankingRequest, opts ...grpc.CallOption) (*CreateManyBotRankingResponse, error) {
	out := new(CreateManyBotRankingResponse)
	err := c.cc.Invoke(ctx, BotImmortalService_CreateManyBotRanking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotImmortalServiceServer is the server API for BotImmortalService service.
// All implementations must embed UnimplementedBotImmortalServiceServer
// for forward compatibility
type BotImmortalServiceServer interface {
	SearchBotRanking(context.Context, *SearchBotRankingRequest) (*SearchBotRankingResponse, error)
	CreateManyBotRanking(context.Context, *CreateManyBotRankingRequest) (*CreateManyBotRankingResponse, error)
	mustEmbedUnimplementedBotImmortalServiceServer()
}

// UnimplementedBotImmortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBotImmortalServiceServer struct {
}

func (UnimplementedBotImmortalServiceServer) SearchBotRanking(context.Context, *SearchBotRankingRequest) (*SearchBotRankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBotRanking not implemented")
}
func (UnimplementedBotImmortalServiceServer) CreateManyBotRanking(context.Context, *CreateManyBotRankingRequest) (*CreateManyBotRankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyBotRanking not implemented")
}
func (UnimplementedBotImmortalServiceServer) mustEmbedUnimplementedBotImmortalServiceServer() {}

// UnsafeBotImmortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotImmortalServiceServer will
// result in compilation errors.
type UnsafeBotImmortalServiceServer interface {
	mustEmbedUnimplementedBotImmortalServiceServer()
}

func RegisterBotImmortalServiceServer(s grpc.ServiceRegistrar, srv BotImmortalServiceServer) {
	s.RegisterService(&BotImmortalService_ServiceDesc, srv)
}

func _BotImmortalService_SearchBotRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBotRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotImmortalServiceServer).SearchBotRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotImmortalService_SearchBotRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotImmortalServiceServer).SearchBotRanking(ctx, req.(*SearchBotRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotImmortalService_CreateManyBotRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyBotRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotImmortalServiceServer).CreateManyBotRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotImmortalService_CreateManyBotRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotImmortalServiceServer).CreateManyBotRanking(ctx, req.(*CreateManyBotRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotImmortalService_ServiceDesc is the grpc.ServiceDesc for BotImmortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotImmortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.immortal.v1.BotImmortalService",
	HandlerType: (*BotImmortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchBotRanking",
			Handler:    _BotImmortalService_SearchBotRanking_Handler,
		},
		{
			MethodName: "CreateManyBotRanking",
			Handler:    _BotImmortalService_CreateManyBotRanking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/immortal/v1/immortal_bot.proto",
}
