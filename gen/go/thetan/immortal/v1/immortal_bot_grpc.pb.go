// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/immortal/v1/immortal_bot.proto

package thetan_immortal_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImmortalBotService_GetBotNames_FullMethodName = "/thetan.immortal.v1.ImmortalBotService/GetBotNames"
)

// ImmortalBotServiceClient is the client API for ImmortalBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImmortalBotServiceClient interface {
	GetBotNames(ctx context.Context, in *GetBotNamesRequest, opts ...grpc.CallOption) (*GetBotNamesResponse, error)
}

type immortalBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImmortalBotServiceClient(cc grpc.ClientConnInterface) ImmortalBotServiceClient {
	return &immortalBotServiceClient{cc}
}

func (c *immortalBotServiceClient) GetBotNames(ctx context.Context, in *GetBotNamesRequest, opts ...grpc.CallOption) (*GetBotNamesResponse, error) {
	out := new(GetBotNamesResponse)
	err := c.cc.Invoke(ctx, ImmortalBotService_GetBotNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImmortalBotServiceServer is the server API for ImmortalBotService service.
// All implementations must embed UnimplementedImmortalBotServiceServer
// for forward compatibility
type ImmortalBotServiceServer interface {
	GetBotNames(context.Context, *GetBotNamesRequest) (*GetBotNamesResponse, error)
	mustEmbedUnimplementedImmortalBotServiceServer()
}

// UnimplementedImmortalBotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImmortalBotServiceServer struct {
}

func (UnimplementedImmortalBotServiceServer) GetBotNames(context.Context, *GetBotNamesRequest) (*GetBotNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotNames not implemented")
}
func (UnimplementedImmortalBotServiceServer) mustEmbedUnimplementedImmortalBotServiceServer() {}

// UnsafeImmortalBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImmortalBotServiceServer will
// result in compilation errors.
type UnsafeImmortalBotServiceServer interface {
	mustEmbedUnimplementedImmortalBotServiceServer()
}

func RegisterImmortalBotServiceServer(s grpc.ServiceRegistrar, srv ImmortalBotServiceServer) {
	s.RegisterService(&ImmortalBotService_ServiceDesc, srv)
}

func _ImmortalBotService_GetBotNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmortalBotServiceServer).GetBotNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmortalBotService_GetBotNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmortalBotServiceServer).GetBotNames(ctx, req.(*GetBotNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImmortalBotService_ServiceDesc is the grpc.ServiceDesc for ImmortalBotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImmortalBotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.immortal.v1.ImmortalBotService",
	HandlerType: (*ImmortalBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBotNames",
			Handler:    _ImmortalBotService_GetBotNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/immortal/v1/immortal_bot.proto",
}
