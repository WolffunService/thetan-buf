// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/immortal/v1/immortal_bot.proto

package thetan_immortal_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBotImmortalServiceClient is a mock of BotImmortalServiceClient interface.
type MockBotImmortalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBotImmortalServiceClientMockRecorder
}

// MockBotImmortalServiceClientMockRecorder is the mock recorder for MockBotImmortalServiceClient.
type MockBotImmortalServiceClientMockRecorder struct {
	mock *MockBotImmortalServiceClient
}

// NewMockBotImmortalServiceClient creates a new mock instance.
func NewMockBotImmortalServiceClient(ctrl *gomock.Controller) *MockBotImmortalServiceClient {
	mock := &MockBotImmortalServiceClient{ctrl: ctrl}
	mock.recorder = &MockBotImmortalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotImmortalServiceClient) EXPECT() *MockBotImmortalServiceClientMockRecorder {
	return m.recorder
}

// CreateManyBotRanking mocks base method.
func (m *MockBotImmortalServiceClient) CreateManyBotRanking(ctx context.Context, in *CreateManyBotRankingRequest, opts ...grpc.CallOption) (*CreateManyBotRankingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateManyBotRanking", varargs...)
	ret0, _ := ret[0].(*CreateManyBotRankingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManyBotRanking indicates an expected call of CreateManyBotRanking.
func (mr *MockBotImmortalServiceClientMockRecorder) CreateManyBotRanking(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManyBotRanking", reflect.TypeOf((*MockBotImmortalServiceClient)(nil).CreateManyBotRanking), varargs...)
}

// SearchBotRanking mocks base method.
func (m *MockBotImmortalServiceClient) SearchBotRanking(ctx context.Context, in *SearchBotRankingRequest, opts ...grpc.CallOption) (*SearchBotRankingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchBotRanking", varargs...)
	ret0, _ := ret[0].(*SearchBotRankingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBotRanking indicates an expected call of SearchBotRanking.
func (mr *MockBotImmortalServiceClientMockRecorder) SearchBotRanking(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBotRanking", reflect.TypeOf((*MockBotImmortalServiceClient)(nil).SearchBotRanking), varargs...)
}

// MockBotImmortalServiceServer is a mock of BotImmortalServiceServer interface.
type MockBotImmortalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBotImmortalServiceServerMockRecorder
}

// MockBotImmortalServiceServerMockRecorder is the mock recorder for MockBotImmortalServiceServer.
type MockBotImmortalServiceServerMockRecorder struct {
	mock *MockBotImmortalServiceServer
}

// NewMockBotImmortalServiceServer creates a new mock instance.
func NewMockBotImmortalServiceServer(ctrl *gomock.Controller) *MockBotImmortalServiceServer {
	mock := &MockBotImmortalServiceServer{ctrl: ctrl}
	mock.recorder = &MockBotImmortalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotImmortalServiceServer) EXPECT() *MockBotImmortalServiceServerMockRecorder {
	return m.recorder
}

// CreateManyBotRanking mocks base method.
func (m *MockBotImmortalServiceServer) CreateManyBotRanking(ctx context.Context, in *CreateManyBotRankingRequest) (*CreateManyBotRankingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManyBotRanking", ctx, in)
	ret0, _ := ret[0].(*CreateManyBotRankingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManyBotRanking indicates an expected call of CreateManyBotRanking.
func (mr *MockBotImmortalServiceServerMockRecorder) CreateManyBotRanking(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManyBotRanking", reflect.TypeOf((*MockBotImmortalServiceServer)(nil).CreateManyBotRanking), ctx, in)
}

// SearchBotRanking mocks base method.
func (m *MockBotImmortalServiceServer) SearchBotRanking(ctx context.Context, in *SearchBotRankingRequest) (*SearchBotRankingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBotRanking", ctx, in)
	ret0, _ := ret[0].(*SearchBotRankingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBotRanking indicates an expected call of SearchBotRanking.
func (mr *MockBotImmortalServiceServerMockRecorder) SearchBotRanking(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBotRanking", reflect.TypeOf((*MockBotImmortalServiceServer)(nil).SearchBotRanking), ctx, in)
}
