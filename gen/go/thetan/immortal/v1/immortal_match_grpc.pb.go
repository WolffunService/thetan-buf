// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/immortal/v1/immortal_match.proto

package thetan_immortal_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatchDirectorService_CancelTicket_FullMethodName = "/thetan.immortal.v1.MatchDirectorService/CancelTicket"
	MatchDirectorService_MatchBot_FullMethodName     = "/thetan.immortal.v1.MatchDirectorService/MatchBot"
)

// MatchDirectorServiceClient is the client API for MatchDirectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchDirectorServiceClient interface {
	CancelTicket(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*CancelTicketResponse, error)
	MatchBot(ctx context.Context, in *MatchBotRequest, opts ...grpc.CallOption) (*MatchBotResponse, error)
}

type matchDirectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchDirectorServiceClient(cc grpc.ClientConnInterface) MatchDirectorServiceClient {
	return &matchDirectorServiceClient{cc}
}

func (c *matchDirectorServiceClient) CancelTicket(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*CancelTicketResponse, error) {
	out := new(CancelTicketResponse)
	err := c.cc.Invoke(ctx, MatchDirectorService_CancelTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchDirectorServiceClient) MatchBot(ctx context.Context, in *MatchBotRequest, opts ...grpc.CallOption) (*MatchBotResponse, error) {
	out := new(MatchBotResponse)
	err := c.cc.Invoke(ctx, MatchDirectorService_MatchBot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchDirectorServiceServer is the server API for MatchDirectorService service.
// All implementations must embed UnimplementedMatchDirectorServiceServer
// for forward compatibility
type MatchDirectorServiceServer interface {
	CancelTicket(context.Context, *CancelTicketRequest) (*CancelTicketResponse, error)
	MatchBot(context.Context, *MatchBotRequest) (*MatchBotResponse, error)
	mustEmbedUnimplementedMatchDirectorServiceServer()
}

// UnimplementedMatchDirectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchDirectorServiceServer struct {
}

func (UnimplementedMatchDirectorServiceServer) CancelTicket(context.Context, *CancelTicketRequest) (*CancelTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTicket not implemented")
}
func (UnimplementedMatchDirectorServiceServer) MatchBot(context.Context, *MatchBotRequest) (*MatchBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchBot not implemented")
}
func (UnimplementedMatchDirectorServiceServer) mustEmbedUnimplementedMatchDirectorServiceServer() {}

// UnsafeMatchDirectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchDirectorServiceServer will
// result in compilation errors.
type UnsafeMatchDirectorServiceServer interface {
	mustEmbedUnimplementedMatchDirectorServiceServer()
}

func RegisterMatchDirectorServiceServer(s grpc.ServiceRegistrar, srv MatchDirectorServiceServer) {
	s.RegisterService(&MatchDirectorService_ServiceDesc, srv)
}

func _MatchDirectorService_CancelTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchDirectorServiceServer).CancelTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchDirectorService_CancelTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchDirectorServiceServer).CancelTicket(ctx, req.(*CancelTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchDirectorService_MatchBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchDirectorServiceServer).MatchBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchDirectorService_MatchBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchDirectorServiceServer).MatchBot(ctx, req.(*MatchBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchDirectorService_ServiceDesc is the grpc.ServiceDesc for MatchDirectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchDirectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.immortal.v1.MatchDirectorService",
	HandlerType: (*MatchDirectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelTicket",
			Handler:    _MatchDirectorService_CancelTicket_Handler,
		},
		{
			MethodName: "MatchBot",
			Handler:    _MatchDirectorService_MatchBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/immortal/v1/immortal_match.proto",
}
