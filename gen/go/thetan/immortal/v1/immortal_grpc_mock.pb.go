// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/immortal/v1/immortal.proto

package thetan_immortal_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockImmortalService_BattleEndClient is a mock of ImmortalService_BattleEndClient interface.
type MockImmortalService_BattleEndClient struct {
	ctrl     *gomock.Controller
	recorder *MockImmortalService_BattleEndClientMockRecorder
}

// MockImmortalService_BattleEndClientMockRecorder is the mock recorder for MockImmortalService_BattleEndClient.
type MockImmortalService_BattleEndClientMockRecorder struct {
	mock *MockImmortalService_BattleEndClient
}

// NewMockImmortalService_BattleEndClient creates a new mock instance.
func NewMockImmortalService_BattleEndClient(ctrl *gomock.Controller) *MockImmortalService_BattleEndClient {
	mock := &MockImmortalService_BattleEndClient{ctrl: ctrl}
	mock.recorder = &MockImmortalService_BattleEndClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmortalService_BattleEndClient) EXPECT() *MockImmortalService_BattleEndClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockImmortalService_BattleEndClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockImmortalService_BattleEndClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockImmortalService_BattleEndClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockImmortalService_BattleEndClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockImmortalService_BattleEndClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockImmortalService_BattleEndClient)(nil).Context))
}

// Header mocks base method.
func (m *MockImmortalService_BattleEndClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockImmortalService_BattleEndClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockImmortalService_BattleEndClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockImmortalService_BattleEndClient) Recv() (*BattleEndResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*BattleEndResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockImmortalService_BattleEndClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockImmortalService_BattleEndClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockImmortalService_BattleEndClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockImmortalService_BattleEndClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockImmortalService_BattleEndClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockImmortalService_BattleEndClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockImmortalService_BattleEndClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockImmortalService_BattleEndClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockImmortalService_BattleEndClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockImmortalService_BattleEndClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockImmortalService_BattleEndClient)(nil).Trailer))
}

// MockImmortalService_BattleEndServer is a mock of ImmortalService_BattleEndServer interface.
type MockImmortalService_BattleEndServer struct {
	ctrl     *gomock.Controller
	recorder *MockImmortalService_BattleEndServerMockRecorder
}

// MockImmortalService_BattleEndServerMockRecorder is the mock recorder for MockImmortalService_BattleEndServer.
type MockImmortalService_BattleEndServerMockRecorder struct {
	mock *MockImmortalService_BattleEndServer
}

// NewMockImmortalService_BattleEndServer creates a new mock instance.
func NewMockImmortalService_BattleEndServer(ctrl *gomock.Controller) *MockImmortalService_BattleEndServer {
	mock := &MockImmortalService_BattleEndServer{ctrl: ctrl}
	mock.recorder = &MockImmortalService_BattleEndServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmortalService_BattleEndServer) EXPECT() *MockImmortalService_BattleEndServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockImmortalService_BattleEndServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockImmortalService_BattleEndServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockImmortalService_BattleEndServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockImmortalService_BattleEndServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockImmortalService_BattleEndServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockImmortalService_BattleEndServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockImmortalService_BattleEndServer) Send(arg0 *BattleEndResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockImmortalService_BattleEndServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockImmortalService_BattleEndServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockImmortalService_BattleEndServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockImmortalService_BattleEndServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockImmortalService_BattleEndServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockImmortalService_BattleEndServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockImmortalService_BattleEndServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockImmortalService_BattleEndServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockImmortalService_BattleEndServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockImmortalService_BattleEndServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockImmortalService_BattleEndServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockImmortalService_BattleEndServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockImmortalService_BattleEndServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockImmortalService_BattleEndServer)(nil).SetTrailer), arg0)
}

// MockImmortalServiceClient is a mock of ImmortalServiceClient interface.
type MockImmortalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockImmortalServiceClientMockRecorder
}

// MockImmortalServiceClientMockRecorder is the mock recorder for MockImmortalServiceClient.
type MockImmortalServiceClientMockRecorder struct {
	mock *MockImmortalServiceClient
}

// NewMockImmortalServiceClient creates a new mock instance.
func NewMockImmortalServiceClient(ctrl *gomock.Controller) *MockImmortalServiceClient {
	mock := &MockImmortalServiceClient{ctrl: ctrl}
	mock.recorder = &MockImmortalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmortalServiceClient) EXPECT() *MockImmortalServiceClientMockRecorder {
	return m.recorder
}

// BattleEnd mocks base method.
func (m *MockImmortalServiceClient) BattleEnd(ctx context.Context, in *BattleEndRequest, opts ...grpc.CallOption) (ImmortalService_BattleEndClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BattleEnd", varargs...)
	ret0, _ := ret[0].(ImmortalService_BattleEndClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BattleEnd indicates an expected call of BattleEnd.
func (mr *MockImmortalServiceClientMockRecorder) BattleEnd(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleEnd", reflect.TypeOf((*MockImmortalServiceClient)(nil).BattleEnd), varargs...)
}

// GetUserProfile mocks base method.
func (m *MockImmortalServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserProfile", varargs...)
	ret0, _ := ret[0].(*GetUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockImmortalServiceClientMockRecorder) GetUserProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockImmortalServiceClient)(nil).GetUserProfile), varargs...)
}

// SearchPlayerInfo mocks base method.
func (m *MockImmortalServiceClient) SearchPlayerInfo(ctx context.Context, in *SearchPlayerInfoRequest, opts ...grpc.CallOption) (*SearchPlayerInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPlayerInfo", varargs...)
	ret0, _ := ret[0].(*SearchPlayerInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlayerInfo indicates an expected call of SearchPlayerInfo.
func (mr *MockImmortalServiceClientMockRecorder) SearchPlayerInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlayerInfo", reflect.TypeOf((*MockImmortalServiceClient)(nil).SearchPlayerInfo), varargs...)
}

// MockImmortalServiceServer is a mock of ImmortalServiceServer interface.
type MockImmortalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockImmortalServiceServerMockRecorder
}

// MockImmortalServiceServerMockRecorder is the mock recorder for MockImmortalServiceServer.
type MockImmortalServiceServerMockRecorder struct {
	mock *MockImmortalServiceServer
}

// NewMockImmortalServiceServer creates a new mock instance.
func NewMockImmortalServiceServer(ctrl *gomock.Controller) *MockImmortalServiceServer {
	mock := &MockImmortalServiceServer{ctrl: ctrl}
	mock.recorder = &MockImmortalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmortalServiceServer) EXPECT() *MockImmortalServiceServerMockRecorder {
	return m.recorder
}

// BattleEnd mocks base method.
func (m *MockImmortalServiceServer) BattleEnd(blob *BattleEndRequest, server ImmortalService_BattleEndServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BattleEnd", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// BattleEnd indicates an expected call of BattleEnd.
func (mr *MockImmortalServiceServerMockRecorder) BattleEnd(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleEnd", reflect.TypeOf((*MockImmortalServiceServer)(nil).BattleEnd), blob, server)
}

// GetUserProfile mocks base method.
func (m *MockImmortalServiceServer) GetUserProfile(ctx context.Context, in *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, in)
	ret0, _ := ret[0].(*GetUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockImmortalServiceServerMockRecorder) GetUserProfile(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockImmortalServiceServer)(nil).GetUserProfile), ctx, in)
}

// SearchPlayerInfo mocks base method.
func (m *MockImmortalServiceServer) SearchPlayerInfo(ctx context.Context, in *SearchPlayerInfoRequest) (*SearchPlayerInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlayerInfo", ctx, in)
	ret0, _ := ret[0].(*SearchPlayerInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlayerInfo indicates an expected call of SearchPlayerInfo.
func (mr *MockImmortalServiceServerMockRecorder) SearchPlayerInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlayerInfo", reflect.TypeOf((*MockImmortalServiceServer)(nil).SearchPlayerInfo), ctx, in)
}
