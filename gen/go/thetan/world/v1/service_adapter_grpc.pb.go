// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/world/v1/service_adapter.proto

package thetan_world_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThetanWorldAdapterService_GetAvailableItems_FullMethodName = "/thetan.world.v1.ThetanWorldAdapterService/GetAvailableItems"
	ThetanWorldAdapterService_IsValidItems_FullMethodName      = "/thetan.world.v1.ThetanWorldAdapterService/IsValidItems"
	ThetanWorldAdapterService_SendItems_FullMethodName         = "/thetan.world.v1.ThetanWorldAdapterService/SendItems"
	ThetanWorldAdapterService_CreateNFTItem_FullMethodName     = "/thetan.world.v1.ThetanWorldAdapterService/CreateNFTItem"
	ThetanWorldAdapterService_GetItems_FullMethodName          = "/thetan.world.v1.ThetanWorldAdapterService/GetItems"
	ThetanWorldAdapterService_IsInUsed_FullMethodName          = "/thetan.world.v1.ThetanWorldAdapterService/IsInUsed"
	ThetanWorldAdapterService_RemoveNFT_FullMethodName         = "/thetan.world.v1.ThetanWorldAdapterService/RemoveNFT"
)

// ThetanWorldAdapterServiceClient is the client API for ThetanWorldAdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanWorldAdapterServiceClient interface {
	GetAvailableItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableItem, error)
	IsValidItems(ctx context.Context, in *IsValidItemsRequest, opts ...grpc.CallOption) (*CheckItemResponse, error)
	SendItems(ctx context.Context, in *SendItemsRequest, opts ...grpc.CallOption) (*SendItemsResponse, error)
	CreateNFTItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
	IsInUsed(ctx context.Context, in *InUsedRequest, opts ...grpc.CallOption) (*InUsedResponse, error)
	RemoveNFT(ctx context.Context, in *RemoveNFTRequest, opts ...grpc.CallOption) (*RemoveNFTResponse, error)
}

type thetanWorldAdapterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanWorldAdapterServiceClient(cc grpc.ClientConnInterface) ThetanWorldAdapterServiceClient {
	return &thetanWorldAdapterServiceClient{cc}
}

func (c *thetanWorldAdapterServiceClient) GetAvailableItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableItem, error) {
	out := new(AvailableItem)
	err := c.cc.Invoke(ctx, ThetanWorldAdapterService_GetAvailableItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanWorldAdapterServiceClient) IsValidItems(ctx context.Context, in *IsValidItemsRequest, opts ...grpc.CallOption) (*CheckItemResponse, error) {
	out := new(CheckItemResponse)
	err := c.cc.Invoke(ctx, ThetanWorldAdapterService_IsValidItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanWorldAdapterServiceClient) SendItems(ctx context.Context, in *SendItemsRequest, opts ...grpc.CallOption) (*SendItemsResponse, error) {
	out := new(SendItemsResponse)
	err := c.cc.Invoke(ctx, ThetanWorldAdapterService_SendItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanWorldAdapterServiceClient) CreateNFTItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, ThetanWorldAdapterService_CreateNFTItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanWorldAdapterServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, ThetanWorldAdapterService_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanWorldAdapterServiceClient) IsInUsed(ctx context.Context, in *InUsedRequest, opts ...grpc.CallOption) (*InUsedResponse, error) {
	out := new(InUsedResponse)
	err := c.cc.Invoke(ctx, ThetanWorldAdapterService_IsInUsed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanWorldAdapterServiceClient) RemoveNFT(ctx context.Context, in *RemoveNFTRequest, opts ...grpc.CallOption) (*RemoveNFTResponse, error) {
	out := new(RemoveNFTResponse)
	err := c.cc.Invoke(ctx, ThetanWorldAdapterService_RemoveNFT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanWorldAdapterServiceServer is the server API for ThetanWorldAdapterService service.
// All implementations must embed UnimplementedThetanWorldAdapterServiceServer
// for forward compatibility
type ThetanWorldAdapterServiceServer interface {
	GetAvailableItems(context.Context, *emptypb.Empty) (*AvailableItem, error)
	IsValidItems(context.Context, *IsValidItemsRequest) (*CheckItemResponse, error)
	SendItems(context.Context, *SendItemsRequest) (*SendItemsResponse, error)
	CreateNFTItem(context.Context, *CreateItemRequest) (*ItemResponse, error)
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	IsInUsed(context.Context, *InUsedRequest) (*InUsedResponse, error)
	RemoveNFT(context.Context, *RemoveNFTRequest) (*RemoveNFTResponse, error)
	mustEmbedUnimplementedThetanWorldAdapterServiceServer()
}

// UnimplementedThetanWorldAdapterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThetanWorldAdapterServiceServer struct {
}

func (UnimplementedThetanWorldAdapterServiceServer) GetAvailableItems(context.Context, *emptypb.Empty) (*AvailableItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableItems not implemented")
}
func (UnimplementedThetanWorldAdapterServiceServer) IsValidItems(context.Context, *IsValidItemsRequest) (*CheckItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidItems not implemented")
}
func (UnimplementedThetanWorldAdapterServiceServer) SendItems(context.Context, *SendItemsRequest) (*SendItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendItems not implemented")
}
func (UnimplementedThetanWorldAdapterServiceServer) CreateNFTItem(context.Context, *CreateItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNFTItem not implemented")
}
func (UnimplementedThetanWorldAdapterServiceServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedThetanWorldAdapterServiceServer) IsInUsed(context.Context, *InUsedRequest) (*InUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInUsed not implemented")
}
func (UnimplementedThetanWorldAdapterServiceServer) RemoveNFT(context.Context, *RemoveNFTRequest) (*RemoveNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNFT not implemented")
}
func (UnimplementedThetanWorldAdapterServiceServer) mustEmbedUnimplementedThetanWorldAdapterServiceServer() {
}

// UnsafeThetanWorldAdapterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanWorldAdapterServiceServer will
// result in compilation errors.
type UnsafeThetanWorldAdapterServiceServer interface {
	mustEmbedUnimplementedThetanWorldAdapterServiceServer()
}

func RegisterThetanWorldAdapterServiceServer(s grpc.ServiceRegistrar, srv ThetanWorldAdapterServiceServer) {
	s.RegisterService(&ThetanWorldAdapterService_ServiceDesc, srv)
}

func _ThetanWorldAdapterService_GetAvailableItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanWorldAdapterServiceServer).GetAvailableItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanWorldAdapterService_GetAvailableItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanWorldAdapterServiceServer).GetAvailableItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanWorldAdapterService_IsValidItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanWorldAdapterServiceServer).IsValidItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanWorldAdapterService_IsValidItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanWorldAdapterServiceServer).IsValidItems(ctx, req.(*IsValidItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanWorldAdapterService_SendItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanWorldAdapterServiceServer).SendItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanWorldAdapterService_SendItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanWorldAdapterServiceServer).SendItems(ctx, req.(*SendItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanWorldAdapterService_CreateNFTItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanWorldAdapterServiceServer).CreateNFTItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanWorldAdapterService_CreateNFTItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanWorldAdapterServiceServer).CreateNFTItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanWorldAdapterService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanWorldAdapterServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanWorldAdapterService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanWorldAdapterServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanWorldAdapterService_IsInUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanWorldAdapterServiceServer).IsInUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanWorldAdapterService_IsInUsed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanWorldAdapterServiceServer).IsInUsed(ctx, req.(*InUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanWorldAdapterService_RemoveNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanWorldAdapterServiceServer).RemoveNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanWorldAdapterService_RemoveNFT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanWorldAdapterServiceServer).RemoveNFT(ctx, req.(*RemoveNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanWorldAdapterService_ServiceDesc is the grpc.ServiceDesc for ThetanWorldAdapterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanWorldAdapterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.world.v1.ThetanWorldAdapterService",
	HandlerType: (*ThetanWorldAdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableItems",
			Handler:    _ThetanWorldAdapterService_GetAvailableItems_Handler,
		},
		{
			MethodName: "IsValidItems",
			Handler:    _ThetanWorldAdapterService_IsValidItems_Handler,
		},
		{
			MethodName: "SendItems",
			Handler:    _ThetanWorldAdapterService_SendItems_Handler,
		},
		{
			MethodName: "CreateNFTItem",
			Handler:    _ThetanWorldAdapterService_CreateNFTItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _ThetanWorldAdapterService_GetItems_Handler,
		},
		{
			MethodName: "IsInUsed",
			Handler:    _ThetanWorldAdapterService_IsInUsed_Handler,
		},
		{
			MethodName: "RemoveNFT",
			Handler:    _ThetanWorldAdapterService_RemoveNFT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/world/v1/service_adapter.proto",
}
