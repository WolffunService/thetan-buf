// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/fishnet/immortal/v1/fistnet_immortal.proto

package thetan_fishnet_immortal_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "thetan-buf/gen/go/thetan/immortal/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThetanFishNetImmortal_CreateRoom_FullMethodName = "/thetan.fishnet.immortal.v1.ThetanFishNetImmortal/CreateRoom"
)

// ThetanFishNetImmortalClient is the client API for ThetanFishNetImmortal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanFishNetImmortalClient interface {
	CreateRoom(ctx context.Context, in *v1.ImmortalMatchFoundResponseProto, opts ...grpc.CallOption) (*CreateRoomResp, error)
}

type thetanFishNetImmortalClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanFishNetImmortalClient(cc grpc.ClientConnInterface) ThetanFishNetImmortalClient {
	return &thetanFishNetImmortalClient{cc}
}

func (c *thetanFishNetImmortalClient) CreateRoom(ctx context.Context, in *v1.ImmortalMatchFoundResponseProto, opts ...grpc.CallOption) (*CreateRoomResp, error) {
	out := new(CreateRoomResp)
	err := c.cc.Invoke(ctx, ThetanFishNetImmortal_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanFishNetImmortalServer is the server API for ThetanFishNetImmortal service.
// All implementations must embed UnimplementedThetanFishNetImmortalServer
// for forward compatibility
type ThetanFishNetImmortalServer interface {
	CreateRoom(context.Context, *v1.ImmortalMatchFoundResponseProto) (*CreateRoomResp, error)
	mustEmbedUnimplementedThetanFishNetImmortalServer()
}

// UnimplementedThetanFishNetImmortalServer must be embedded to have forward compatible implementations.
type UnimplementedThetanFishNetImmortalServer struct {
}

func (UnimplementedThetanFishNetImmortalServer) CreateRoom(context.Context, *v1.ImmortalMatchFoundResponseProto) (*CreateRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedThetanFishNetImmortalServer) mustEmbedUnimplementedThetanFishNetImmortalServer() {}

// UnsafeThetanFishNetImmortalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanFishNetImmortalServer will
// result in compilation errors.
type UnsafeThetanFishNetImmortalServer interface {
	mustEmbedUnimplementedThetanFishNetImmortalServer()
}

func RegisterThetanFishNetImmortalServer(s grpc.ServiceRegistrar, srv ThetanFishNetImmortalServer) {
	s.RegisterService(&ThetanFishNetImmortal_ServiceDesc, srv)
}

func _ThetanFishNetImmortal_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ImmortalMatchFoundResponseProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanFishNetImmortalServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanFishNetImmortal_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanFishNetImmortalServer).CreateRoom(ctx, req.(*v1.ImmortalMatchFoundResponseProto))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanFishNetImmortal_ServiceDesc is the grpc.ServiceDesc for ThetanFishNetImmortal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanFishNetImmortal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.fishnet.immortal.v1.ThetanFishNetImmortal",
	HandlerType: (*ThetanFishNetImmortalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _ThetanFishNetImmortal_CreateRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/fishnet/immortal/v1/fistnet_immortal.proto",
}
