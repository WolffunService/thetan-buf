// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/fishnet/rivalslobby/v1/fishnet_rivals_lobby.proto

package thetan_fishnet_rivalslobby_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThetanFishNetRivalsLobby_RoomAllocation_FullMethodName = "/thetan.fishnet.rivalslobby.v1.ThetanFishNetRivalsLobby/RoomAllocation"
	ThetanFishNetRivalsLobby_Shutdown_FullMethodName       = "/thetan.fishnet.rivalslobby.v1.ThetanFishNetRivalsLobby/Shutdown"
	ThetanFishNetRivalsLobby_GameServerInfo_FullMethodName = "/thetan.fishnet.rivalslobby.v1.ThetanFishNetRivalsLobby/GameServerInfo"
)

// ThetanFishNetRivalsLobbyClient is the client API for ThetanFishNetRivalsLobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanFishNetRivalsLobbyClient interface {
	RoomAllocation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoomAllocationResp, error)
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GameServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameServerInfoResp, error)
}

type thetanFishNetRivalsLobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanFishNetRivalsLobbyClient(cc grpc.ClientConnInterface) ThetanFishNetRivalsLobbyClient {
	return &thetanFishNetRivalsLobbyClient{cc}
}

func (c *thetanFishNetRivalsLobbyClient) RoomAllocation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoomAllocationResp, error) {
	out := new(RoomAllocationResp)
	err := c.cc.Invoke(ctx, ThetanFishNetRivalsLobby_RoomAllocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanFishNetRivalsLobbyClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThetanFishNetRivalsLobby_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanFishNetRivalsLobbyClient) GameServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameServerInfoResp, error) {
	out := new(GameServerInfoResp)
	err := c.cc.Invoke(ctx, ThetanFishNetRivalsLobby_GameServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanFishNetRivalsLobbyServer is the server API for ThetanFishNetRivalsLobby service.
// All implementations must embed UnimplementedThetanFishNetRivalsLobbyServer
// for forward compatibility
type ThetanFishNetRivalsLobbyServer interface {
	RoomAllocation(context.Context, *emptypb.Empty) (*RoomAllocationResp, error)
	Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GameServerInfo(context.Context, *emptypb.Empty) (*GameServerInfoResp, error)
	mustEmbedUnimplementedThetanFishNetRivalsLobbyServer()
}

// UnimplementedThetanFishNetRivalsLobbyServer must be embedded to have forward compatible implementations.
type UnimplementedThetanFishNetRivalsLobbyServer struct {
}

func (UnimplementedThetanFishNetRivalsLobbyServer) RoomAllocation(context.Context, *emptypb.Empty) (*RoomAllocationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAllocation not implemented")
}
func (UnimplementedThetanFishNetRivalsLobbyServer) Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedThetanFishNetRivalsLobbyServer) GameServerInfo(context.Context, *emptypb.Empty) (*GameServerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameServerInfo not implemented")
}
func (UnimplementedThetanFishNetRivalsLobbyServer) mustEmbedUnimplementedThetanFishNetRivalsLobbyServer() {
}

// UnsafeThetanFishNetRivalsLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanFishNetRivalsLobbyServer will
// result in compilation errors.
type UnsafeThetanFishNetRivalsLobbyServer interface {
	mustEmbedUnimplementedThetanFishNetRivalsLobbyServer()
}

func RegisterThetanFishNetRivalsLobbyServer(s grpc.ServiceRegistrar, srv ThetanFishNetRivalsLobbyServer) {
	s.RegisterService(&ThetanFishNetRivalsLobby_ServiceDesc, srv)
}

func _ThetanFishNetRivalsLobby_RoomAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanFishNetRivalsLobbyServer).RoomAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanFishNetRivalsLobby_RoomAllocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanFishNetRivalsLobbyServer).RoomAllocation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanFishNetRivalsLobby_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanFishNetRivalsLobbyServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanFishNetRivalsLobby_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanFishNetRivalsLobbyServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanFishNetRivalsLobby_GameServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanFishNetRivalsLobbyServer).GameServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanFishNetRivalsLobby_GameServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanFishNetRivalsLobbyServer).GameServerInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanFishNetRivalsLobby_ServiceDesc is the grpc.ServiceDesc for ThetanFishNetRivalsLobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanFishNetRivalsLobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.fishnet.rivalslobby.v1.ThetanFishNetRivalsLobby",
	HandlerType: (*ThetanFishNetRivalsLobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoomAllocation",
			Handler:    _ThetanFishNetRivalsLobby_RoomAllocation_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _ThetanFishNetRivalsLobby_Shutdown_Handler,
		},
		{
			MethodName: "GameServerInfo",
			Handler:    _ThetanFishNetRivalsLobby_GameServerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/fishnet/rivalslobby/v1/fishnet_rivals_lobby.proto",
}
