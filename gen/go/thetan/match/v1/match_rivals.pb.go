// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: thetan/match/v1/match_rivals.proto

package thetan_match_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	v1 "thetan-buf/gen/go/thetan/shared/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapID         int32 `protobuf:"varint,1,opt,name=mapID,proto3" json:"mapID,omitempty"`
	MapDifficulty int32 `protobuf:"varint,2,opt,name=mapDifficulty,proto3" json:"mapDifficulty,omitempty"`
	// List of players played in this round, playerID (ObjectID)
	PlayerInRounds []string `protobuf:"bytes,3,rep,name=playerInRounds,proto3" json:"playerInRounds,omitempty"`
	Inputs         []byte   `protobuf:"bytes,4,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *MatchRound) Reset() {
	*x = MatchRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_match_v1_match_rivals_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRound) ProtoMessage() {}

func (x *MatchRound) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_match_v1_match_rivals_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRound.ProtoReflect.Descriptor instead.
func (*MatchRound) Descriptor() ([]byte, []int) {
	return file_thetan_match_v1_match_rivals_proto_rawDescGZIP(), []int{0}
}

func (x *MatchRound) GetMapID() int32 {
	if x != nil {
		return x.MapID
	}
	return 0
}

func (x *MatchRound) GetMapDifficulty() int32 {
	if x != nil {
		return x.MapDifficulty
	}
	return 0
}

func (x *MatchRound) GetPlayerInRounds() []string {
	if x != nil {
		return x.PlayerInRounds
	}
	return nil
}

func (x *MatchRound) GetInputs() []byte {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type MatchPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID   string             `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	HeroID     string             `protobuf:"bytes,2,opt,name=heroID,proto3" json:"heroID,omitempty"`
	HeroSkin   int32              `protobuf:"varint,3,opt,name=heroSkin,proto3" json:"heroSkin,omitempty"`
	HeroLevel  int32              `protobuf:"varint,4,opt,name=heroLevel,proto3" json:"heroLevel,omitempty"`
	Cosmetics  map[string]int32   `protobuf:"bytes,5,rep,name=cosmetics,proto3" json:"cosmetics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Customized *v1.HeroCustomized `protobuf:"bytes,6,opt,name=customized,proto3" json:"customized,omitempty"`
	BattleRank int32              `protobuf:"varint,7,opt,name=battleRank,proto3" json:"battleRank,omitempty"`
}

func (x *MatchPlayer) Reset() {
	*x = MatchPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_match_v1_match_rivals_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPlayer) ProtoMessage() {}

func (x *MatchPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_match_v1_match_rivals_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPlayer.ProtoReflect.Descriptor instead.
func (*MatchPlayer) Descriptor() ([]byte, []int) {
	return file_thetan_match_v1_match_rivals_proto_rawDescGZIP(), []int{1}
}

func (x *MatchPlayer) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *MatchPlayer) GetHeroID() string {
	if x != nil {
		return x.HeroID
	}
	return ""
}

func (x *MatchPlayer) GetHeroSkin() int32 {
	if x != nil {
		return x.HeroSkin
	}
	return 0
}

func (x *MatchPlayer) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *MatchPlayer) GetCosmetics() map[string]int32 {
	if x != nil {
		return x.Cosmetics
	}
	return nil
}

func (x *MatchPlayer) GetCustomized() *v1.HeroCustomized {
	if x != nil {
		return x.Customized
	}
	return nil
}

func (x *MatchPlayer) GetBattleRank() int32 {
	if x != nil {
		return x.BattleRank
	}
	return 0
}

type MatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchID string         `protobuf:"bytes,1,opt,name=matchID,proto3" json:"matchID,omitempty"`
	Rounds  []*MatchRound  `protobuf:"bytes,2,rep,name=rounds,proto3" json:"rounds,omitempty"`
	Players []*MatchPlayer `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	StartAt int64          `protobuf:"varint,4,opt,name=startAt,proto3" json:"startAt,omitempty"`
	EndAt   int64          `protobuf:"varint,5,opt,name=endAt,proto3" json:"endAt,omitempty"`
}

func (x *MatchData) Reset() {
	*x = MatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_match_v1_match_rivals_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchData) ProtoMessage() {}

func (x *MatchData) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_match_v1_match_rivals_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchData.ProtoReflect.Descriptor instead.
func (*MatchData) Descriptor() ([]byte, []int) {
	return file_thetan_match_v1_match_rivals_proto_rawDescGZIP(), []int{2}
}

func (x *MatchData) GetMatchID() string {
	if x != nil {
		return x.MatchID
	}
	return ""
}

func (x *MatchData) GetRounds() []*MatchRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *MatchData) GetPlayers() []*MatchPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MatchData) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *MatchData) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

var File_thetan_match_v1_match_rivals_proto protoreflect.FileDescriptor

var file_thetan_match_v1_match_rivals_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x67, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88,
	0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x68, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x72,
	0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65,
	0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x32, 0x5f, 0x0a, 0x11, 0x54, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x12,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0xba, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x42, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2d, 0x62, 0x75, 0x66,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x4d, 0x58, 0xaa, 0x02, 0x0f,
	0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x10, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1c, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x11, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x3a, 0x3a, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thetan_match_v1_match_rivals_proto_rawDescOnce sync.Once
	file_thetan_match_v1_match_rivals_proto_rawDescData = file_thetan_match_v1_match_rivals_proto_rawDesc
)

func file_thetan_match_v1_match_rivals_proto_rawDescGZIP() []byte {
	file_thetan_match_v1_match_rivals_proto_rawDescOnce.Do(func() {
		file_thetan_match_v1_match_rivals_proto_rawDescData = protoimpl.X.CompressGZIP(file_thetan_match_v1_match_rivals_proto_rawDescData)
	})
	return file_thetan_match_v1_match_rivals_proto_rawDescData
}

var file_thetan_match_v1_match_rivals_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_thetan_match_v1_match_rivals_proto_goTypes = []interface{}{
	(*MatchRound)(nil),        // 0: thetan.match.v1.MatchRound
	(*MatchPlayer)(nil),       // 1: thetan.match.v1.MatchPlayer
	(*MatchData)(nil),         // 2: thetan.match.v1.MatchData
	nil,                       // 3: thetan.match.v1.MatchPlayer.CosmeticsEntry
	(*v1.HeroCustomized)(nil), // 4: thetan.shared.v1.HeroCustomized
	(*emptypb.Empty)(nil),     // 5: google.protobuf.Empty
}
var file_thetan_match_v1_match_rivals_proto_depIdxs = []int32{
	3, // 0: thetan.match.v1.MatchPlayer.cosmetics:type_name -> thetan.match.v1.MatchPlayer.CosmeticsEntry
	4, // 1: thetan.match.v1.MatchPlayer.customized:type_name -> thetan.shared.v1.HeroCustomized
	0, // 2: thetan.match.v1.MatchData.rounds:type_name -> thetan.match.v1.MatchRound
	1, // 3: thetan.match.v1.MatchData.players:type_name -> thetan.match.v1.MatchPlayer
	2, // 4: thetan.match.v1.ThetanMatchRivals.SpectatorBattleEnd:input_type -> thetan.match.v1.MatchData
	5, // 5: thetan.match.v1.ThetanMatchRivals.SpectatorBattleEnd:output_type -> google.protobuf.Empty
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_thetan_match_v1_match_rivals_proto_init() }
func file_thetan_match_v1_match_rivals_proto_init() {
	if File_thetan_match_v1_match_rivals_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_thetan_match_v1_match_rivals_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_match_v1_match_rivals_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_match_v1_match_rivals_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thetan_match_v1_match_rivals_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_thetan_match_v1_match_rivals_proto_goTypes,
		DependencyIndexes: file_thetan_match_v1_match_rivals_proto_depIdxs,
		MessageInfos:      file_thetan_match_v1_match_rivals_proto_msgTypes,
	}.Build()
	File_thetan_match_v1_match_rivals_proto = out.File
	file_thetan_match_v1_match_rivals_proto_rawDesc = nil
	file_thetan_match_v1_match_rivals_proto_goTypes = nil
	file_thetan_match_v1_match_rivals_proto_depIdxs = nil
}
