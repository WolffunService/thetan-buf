// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/match/v1/match_rivals.proto

package thetan_match_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThetanMatchRivals_SpectatorBattleEnd_FullMethodName = "/thetan.match.v1.ThetanMatchRivals/SpectatorBattleEnd"
)

// ThetanMatchRivalsClient is the client API for ThetanMatchRivals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanMatchRivalsClient interface {
	SpectatorBattleEnd(ctx context.Context, in *MatchData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type thetanMatchRivalsClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanMatchRivalsClient(cc grpc.ClientConnInterface) ThetanMatchRivalsClient {
	return &thetanMatchRivalsClient{cc}
}

func (c *thetanMatchRivalsClient) SpectatorBattleEnd(ctx context.Context, in *MatchData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThetanMatchRivals_SpectatorBattleEnd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanMatchRivalsServer is the server API for ThetanMatchRivals service.
// All implementations must embed UnimplementedThetanMatchRivalsServer
// for forward compatibility
type ThetanMatchRivalsServer interface {
	SpectatorBattleEnd(context.Context, *MatchData) (*emptypb.Empty, error)
	mustEmbedUnimplementedThetanMatchRivalsServer()
}

// UnimplementedThetanMatchRivalsServer must be embedded to have forward compatible implementations.
type UnimplementedThetanMatchRivalsServer struct {
}

func (UnimplementedThetanMatchRivalsServer) SpectatorBattleEnd(context.Context, *MatchData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpectatorBattleEnd not implemented")
}
func (UnimplementedThetanMatchRivalsServer) mustEmbedUnimplementedThetanMatchRivalsServer() {}

// UnsafeThetanMatchRivalsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanMatchRivalsServer will
// result in compilation errors.
type UnsafeThetanMatchRivalsServer interface {
	mustEmbedUnimplementedThetanMatchRivalsServer()
}

func RegisterThetanMatchRivalsServer(s grpc.ServiceRegistrar, srv ThetanMatchRivalsServer) {
	s.RegisterService(&ThetanMatchRivals_ServiceDesc, srv)
}

func _ThetanMatchRivals_SpectatorBattleEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanMatchRivalsServer).SpectatorBattleEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanMatchRivals_SpectatorBattleEnd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanMatchRivalsServer).SpectatorBattleEnd(ctx, req.(*MatchData))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanMatchRivals_ServiceDesc is the grpc.ServiceDesc for ThetanMatchRivals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanMatchRivals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.match.v1.ThetanMatchRivals",
	HandlerType: (*ThetanMatchRivalsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpectatorBattleEnd",
			Handler:    _ThetanMatchRivals_SpectatorBattleEnd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/match/v1/match_rivals.proto",
}
