// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/firebase/v1/service_firebase.proto

package thetan_firebase_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockFirebaseServiceClient is a mock of FirebaseServiceClient interface.
type MockFirebaseServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseServiceClientMockRecorder
}

// MockFirebaseServiceClientMockRecorder is the mock recorder for MockFirebaseServiceClient.
type MockFirebaseServiceClientMockRecorder struct {
	mock *MockFirebaseServiceClient
}

// NewMockFirebaseServiceClient creates a new mock instance.
func NewMockFirebaseServiceClient(ctrl *gomock.Controller) *MockFirebaseServiceClient {
	mock := &MockFirebaseServiceClient{ctrl: ctrl}
	mock.recorder = &MockFirebaseServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseServiceClient) EXPECT() *MockFirebaseServiceClientMockRecorder {
	return m.recorder
}

// TrackPlayerStat mocks base method.
func (m *MockFirebaseServiceClient) TrackPlayerStat(ctx context.Context, in *TrackPlayerStatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackPlayerStat", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackPlayerStat indicates an expected call of TrackPlayerStat.
func (mr *MockFirebaseServiceClientMockRecorder) TrackPlayerStat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPlayerStat", reflect.TypeOf((*MockFirebaseServiceClient)(nil).TrackPlayerStat), varargs...)
}

// MockFirebaseServiceServer is a mock of FirebaseServiceServer interface.
type MockFirebaseServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseServiceServerMockRecorder
}

// MockFirebaseServiceServerMockRecorder is the mock recorder for MockFirebaseServiceServer.
type MockFirebaseServiceServerMockRecorder struct {
	mock *MockFirebaseServiceServer
}

// NewMockFirebaseServiceServer creates a new mock instance.
func NewMockFirebaseServiceServer(ctrl *gomock.Controller) *MockFirebaseServiceServer {
	mock := &MockFirebaseServiceServer{ctrl: ctrl}
	mock.recorder = &MockFirebaseServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseServiceServer) EXPECT() *MockFirebaseServiceServerMockRecorder {
	return m.recorder
}

// TrackPlayerStat mocks base method.
func (m *MockFirebaseServiceServer) TrackPlayerStat(ctx context.Context, in *TrackPlayerStatRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackPlayerStat", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackPlayerStat indicates an expected call of TrackPlayerStat.
func (mr *MockFirebaseServiceServerMockRecorder) TrackPlayerStat(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPlayerStat", reflect.TypeOf((*MockFirebaseServiceServer)(nil).TrackPlayerStat), ctx, in)
}
