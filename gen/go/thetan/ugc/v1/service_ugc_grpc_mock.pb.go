// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/ugc/v1/service_ugc.proto

package thetan_ugc_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockThetanUGCServiceClient is a mock of ThetanUGCServiceClient interface.
type MockThetanUGCServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockThetanUGCServiceClientMockRecorder
}

// MockThetanUGCServiceClientMockRecorder is the mock recorder for MockThetanUGCServiceClient.
type MockThetanUGCServiceClientMockRecorder struct {
	mock *MockThetanUGCServiceClient
}

// NewMockThetanUGCServiceClient creates a new mock instance.
func NewMockThetanUGCServiceClient(ctrl *gomock.Controller) *MockThetanUGCServiceClient {
	mock := &MockThetanUGCServiceClient{ctrl: ctrl}
	mock.recorder = &MockThetanUGCServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanUGCServiceClient) EXPECT() *MockThetanUGCServiceClientMockRecorder {
	return m.recorder
}

// GetOneUserColoring mocks base method.
func (m *MockThetanUGCServiceClient) GetOneUserColoring(ctx context.Context, in *UserOneColoringRequest, opts ...grpc.CallOption) (*UserColoring, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOneUserColoring", varargs...)
	ret0, _ := ret[0].(*UserColoring)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneUserColoring indicates an expected call of GetOneUserColoring.
func (mr *MockThetanUGCServiceClientMockRecorder) GetOneUserColoring(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUserColoring", reflect.TypeOf((*MockThetanUGCServiceClient)(nil).GetOneUserColoring), varargs...)
}

// GetUserColorings mocks base method.
func (m *MockThetanUGCServiceClient) GetUserColorings(ctx context.Context, in *UserColoringRequest, opts ...grpc.CallOption) (*UserColoringResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserColorings", varargs...)
	ret0, _ := ret[0].(*UserColoringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserColorings indicates an expected call of GetUserColorings.
func (mr *MockThetanUGCServiceClientMockRecorder) GetUserColorings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserColorings", reflect.TypeOf((*MockThetanUGCServiceClient)(nil).GetUserColorings), varargs...)
}

// MockThetanUGCServiceServer is a mock of ThetanUGCServiceServer interface.
type MockThetanUGCServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockThetanUGCServiceServerMockRecorder
}

// MockThetanUGCServiceServerMockRecorder is the mock recorder for MockThetanUGCServiceServer.
type MockThetanUGCServiceServerMockRecorder struct {
	mock *MockThetanUGCServiceServer
}

// NewMockThetanUGCServiceServer creates a new mock instance.
func NewMockThetanUGCServiceServer(ctrl *gomock.Controller) *MockThetanUGCServiceServer {
	mock := &MockThetanUGCServiceServer{ctrl: ctrl}
	mock.recorder = &MockThetanUGCServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanUGCServiceServer) EXPECT() *MockThetanUGCServiceServerMockRecorder {
	return m.recorder
}

// GetOneUserColoring mocks base method.
func (m *MockThetanUGCServiceServer) GetOneUserColoring(ctx context.Context, in *UserOneColoringRequest) (*UserColoring, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneUserColoring", ctx, in)
	ret0, _ := ret[0].(*UserColoring)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneUserColoring indicates an expected call of GetOneUserColoring.
func (mr *MockThetanUGCServiceServerMockRecorder) GetOneUserColoring(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUserColoring", reflect.TypeOf((*MockThetanUGCServiceServer)(nil).GetOneUserColoring), ctx, in)
}

// GetUserColorings mocks base method.
func (m *MockThetanUGCServiceServer) GetUserColorings(ctx context.Context, in *UserColoringRequest) (*UserColoringResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserColorings", ctx, in)
	ret0, _ := ret[0].(*UserColoringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserColorings indicates an expected call of GetUserColorings.
func (mr *MockThetanUGCServiceServerMockRecorder) GetUserColorings(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserColorings", reflect.TypeOf((*MockThetanUGCServiceServer)(nil).GetUserColorings), ctx, in)
}
