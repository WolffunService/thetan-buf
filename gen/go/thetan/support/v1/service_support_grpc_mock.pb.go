// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/support/v1/service_support.proto

package thetan_support_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSupportServiceClient is a mock of SupportServiceClient interface.
type MockSupportServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSupportServiceClientMockRecorder
}

// MockSupportServiceClientMockRecorder is the mock recorder for MockSupportServiceClient.
type MockSupportServiceClientMockRecorder struct {
	mock *MockSupportServiceClient
}

// NewMockSupportServiceClient creates a new mock instance.
func NewMockSupportServiceClient(ctrl *gomock.Controller) *MockSupportServiceClient {
	mock := &MockSupportServiceClient{ctrl: ctrl}
	mock.recorder = &MockSupportServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupportServiceClient) EXPECT() *MockSupportServiceClientMockRecorder {
	return m.recorder
}

// SearchBots mocks base method.
func (m *MockSupportServiceClient) SearchBots(ctx context.Context, in *SearchBotsRequest, opts ...grpc.CallOption) (*SearchBotsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchBots", varargs...)
	ret0, _ := ret[0].(*SearchBotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBots indicates an expected call of SearchBots.
func (mr *MockSupportServiceClientMockRecorder) SearchBots(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBots", reflect.TypeOf((*MockSupportServiceClient)(nil).SearchBots), varargs...)
}

// MockSupportServiceServer is a mock of SupportServiceServer interface.
type MockSupportServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSupportServiceServerMockRecorder
}

// MockSupportServiceServerMockRecorder is the mock recorder for MockSupportServiceServer.
type MockSupportServiceServerMockRecorder struct {
	mock *MockSupportServiceServer
}

// NewMockSupportServiceServer creates a new mock instance.
func NewMockSupportServiceServer(ctrl *gomock.Controller) *MockSupportServiceServer {
	mock := &MockSupportServiceServer{ctrl: ctrl}
	mock.recorder = &MockSupportServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupportServiceServer) EXPECT() *MockSupportServiceServerMockRecorder {
	return m.recorder
}

// SearchBots mocks base method.
func (m *MockSupportServiceServer) SearchBots(ctx context.Context, in *SearchBotsRequest) (*SearchBotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBots", ctx, in)
	ret0, _ := ret[0].(*SearchBotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBots indicates an expected call of SearchBots.
func (mr *MockSupportServiceServerMockRecorder) SearchBots(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBots", reflect.TypeOf((*MockSupportServiceServer)(nil).SearchBots), ctx, in)
}
