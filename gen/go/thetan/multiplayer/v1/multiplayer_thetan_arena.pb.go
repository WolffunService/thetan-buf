// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: thetan/multiplayer/v1/multiplayer_thetan_arena.proto

package thetan_multiplayer_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	_ "thetan-buf/gen/go/thetan/shared/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameMode int32

const (
	GameMode_RANKED        GameMode = 0
	GameMode_SPECIAL_EVENT GameMode = 1
	GameMode_CUSTOM_MODE   GameMode = 2
)

// Enum value maps for GameMode.
var (
	GameMode_name = map[int32]string{
		0: "RANKED",
		1: "SPECIAL_EVENT",
		2: "CUSTOM_MODE",
	}
	GameMode_value = map[string]int32{
		"RANKED":        0,
		"SPECIAL_EVENT": 1,
		"CUSTOM_MODE":   2,
	}
)

func (x GameMode) Enum() *GameMode {
	p := new(GameMode)
	*p = x
	return p
}

func (x GameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_enumTypes[0].Descriptor()
}

func (GameMode) Type() protoreflect.EnumType {
	return &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_enumTypes[0]
}

func (x GameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameMode.Descriptor instead.
func (GameMode) EnumDescriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{0}
}

type InGameMode int32

const (
	InGameMode_TEAM_COLLECT_STAR        InGameMode = 0
	InGameMode_SOLO_SURVIVAL            InGameMode = 1
	InGameMode_DUAL_SURVIVAL            InGameMode = 2
	InGameMode_TEAM_COLLECT_STAR_4_VS_4 InGameMode = 3
	InGameMode_KING                     InGameMode = 5
	InGameMode_DEATH_MATCH              InGameMode = 6
	InGameMode_DEATH_MATCH_3_VS_3       InGameMode = 7
	InGameMode_FLAG                     InGameMode = 8
	InGameMode_TOWER                    InGameMode = 9
	InGameMode_BATTLE_ROYALE            InGameMode = 12
	InGameMode_SQUAD_BATTLE_ROYALE      InGameMode = 13
	InGameMode_DUO_BATTLE_ROYALE        InGameMode = 14
	InGameMode_TRIO_BATTLE_ROAYLE       InGameMode = 15
	InGameMode_NONE_MODE                InGameMode = -1
)

// Enum value maps for InGameMode.
var (
	InGameMode_name = map[int32]string{
		0:  "TEAM_COLLECT_STAR",
		1:  "SOLO_SURVIVAL",
		2:  "DUAL_SURVIVAL",
		3:  "TEAM_COLLECT_STAR_4_VS_4",
		5:  "KING",
		6:  "DEATH_MATCH",
		7:  "DEATH_MATCH_3_VS_3",
		8:  "FLAG",
		9:  "TOWER",
		12: "BATTLE_ROYALE",
		13: "SQUAD_BATTLE_ROYALE",
		14: "DUO_BATTLE_ROYALE",
		15: "TRIO_BATTLE_ROAYLE",
		-1: "NONE_MODE",
	}
	InGameMode_value = map[string]int32{
		"TEAM_COLLECT_STAR":        0,
		"SOLO_SURVIVAL":            1,
		"DUAL_SURVIVAL":            2,
		"TEAM_COLLECT_STAR_4_VS_4": 3,
		"KING":                     5,
		"DEATH_MATCH":              6,
		"DEATH_MATCH_3_VS_3":       7,
		"FLAG":                     8,
		"TOWER":                    9,
		"BATTLE_ROYALE":            12,
		"SQUAD_BATTLE_ROYALE":      13,
		"DUO_BATTLE_ROYALE":        14,
		"TRIO_BATTLE_ROAYLE":       15,
		"NONE_MODE":                -1,
	}
)

func (x InGameMode) Enum() *InGameMode {
	p := new(InGameMode)
	*p = x
	return p
}

func (x InGameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InGameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_enumTypes[1].Descriptor()
}

func (InGameMode) Type() protoreflect.EnumType {
	return &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_enumTypes[1]
}

func (x InGameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InGameMode.Descriptor instead.
func (InGameMode) EnumDescriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{1}
}

// PlayerGameInfoProto
type ThetanArenaPlayerInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hero   *HeroInfo  `protobuf:"bytes,1,opt,name=hero,proto3" json:"hero,omitempty"`
	Skill1 *SkillInfo `protobuf:"bytes,2,opt,name=skill1,proto3" json:"skill1,omitempty"`
	Skill2 *SkillInfo `protobuf:"bytes,3,opt,name=skill2,proto3" json:"skill2,omitempty"`
}

func (x *ThetanArenaPlayerInfoProto) Reset() {
	*x = ThetanArenaPlayerInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThetanArenaPlayerInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThetanArenaPlayerInfoProto) ProtoMessage() {}

func (x *ThetanArenaPlayerInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThetanArenaPlayerInfoProto.ProtoReflect.Descriptor instead.
func (*ThetanArenaPlayerInfoProto) Descriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{0}
}

func (x *ThetanArenaPlayerInfoProto) GetHero() *HeroInfo {
	if x != nil {
		return x.Hero
	}
	return nil
}

func (x *ThetanArenaPlayerInfoProto) GetSkill1() *SkillInfo {
	if x != nil {
		return x.Skill1
	}
	return nil
}

func (x *ThetanArenaPlayerInfoProto) GetSkill2() *SkillInfo {
	if x != nil {
		return x.Skill2
	}
	return nil
}

type HeroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId     int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"`
	HeroSkinId int32 `protobuf:"varint,2,opt,name=heroSkinId,proto3" json:"heroSkinId,omitempty"`
	HeroLevel  int32 `protobuf:"varint,3,opt,name=heroLevel,proto3" json:"heroLevel,omitempty"`
}

func (x *HeroInfo) Reset() {
	*x = HeroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroInfo) ProtoMessage() {}

func (x *HeroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroInfo.ProtoReflect.Descriptor instead.
func (*HeroInfo) Descriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{1}
}

func (x *HeroInfo) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *HeroInfo) GetHeroSkinId() int32 {
	if x != nil {
		return x.HeroSkinId
	}
	return 0
}

func (x *HeroInfo) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

type SkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId    int32 `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId,omitempty"`
	SkillLevel int32 `protobuf:"varint,2,opt,name=skillLevel,proto3" json:"skillLevel,omitempty"`
}

func (x *SkillInfo) Reset() {
	*x = SkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillInfo) ProtoMessage() {}

func (x *SkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillInfo.ProtoReflect.Descriptor instead.
func (*SkillInfo) Descriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{2}
}

func (x *SkillInfo) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SkillInfo) GetSkillLevel() int32 {
	if x != nil {
		return x.SkillLevel
	}
	return 0
}

type ThetanArenaPartyInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode      GameMode            `protobuf:"varint,1,opt,name=gameMode,proto3,enum=thetan.multiplayer.v1.GameMode" json:"gameMode,omitempty"`
	Ingamemode    InGameMode          `protobuf:"varint,2,opt,name=ingamemode,proto3,enum=thetan.multiplayer.v1.InGameMode" json:"ingamemode,omitempty"`
	EventID       string              `protobuf:"bytes,3,opt,name=eventID,proto3" json:"eventID,omitempty"`
	MapId         int32               `protobuf:"varint,4,opt,name=mapId,proto3" json:"mapId,omitempty"`
	CustomBitInfo *CustomBotInfoProto `protobuf:"bytes,5,opt,name=customBitInfo,proto3" json:"customBitInfo,omitempty"`
	Region        int32               `protobuf:"varint,6,opt,name=region,proto3" json:"region,omitempty"`
	HasPassword   bool                `protobuf:"varint,7,opt,name=hasPassword,proto3" json:"hasPassword,omitempty"`
}

func (x *ThetanArenaPartyInfoProto) Reset() {
	*x = ThetanArenaPartyInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThetanArenaPartyInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThetanArenaPartyInfoProto) ProtoMessage() {}

func (x *ThetanArenaPartyInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThetanArenaPartyInfoProto.ProtoReflect.Descriptor instead.
func (*ThetanArenaPartyInfoProto) Descriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{3}
}

func (x *ThetanArenaPartyInfoProto) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_RANKED
}

func (x *ThetanArenaPartyInfoProto) GetIngamemode() InGameMode {
	if x != nil {
		return x.Ingamemode
	}
	return InGameMode_TEAM_COLLECT_STAR
}

func (x *ThetanArenaPartyInfoProto) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *ThetanArenaPartyInfoProto) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *ThetanArenaPartyInfoProto) GetCustomBitInfo() *CustomBotInfoProto {
	if x != nil {
		return x.CustomBitInfo
	}
	return nil
}

func (x *ThetanArenaPartyInfoProto) GetRegion() int32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *ThetanArenaPartyInfoProto) GetHasPassword() bool {
	if x != nil {
		return x.HasPassword
	}
	return false
}

type CustomBotInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotInfo []*BotInfoProto `protobuf:"bytes,1,rep,name=botInfo,proto3" json:"botInfo,omitempty"`
}

func (x *CustomBotInfoProto) Reset() {
	*x = CustomBotInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomBotInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomBotInfoProto) ProtoMessage() {}

func (x *CustomBotInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomBotInfoProto.ProtoReflect.Descriptor instead.
func (*CustomBotInfoProto) Descriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{4}
}

func (x *CustomBotInfoProto) GetBotInfo() []*BotInfoProto {
	if x != nil {
		return x.BotInfo
	}
	return nil
}

type BotInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId  string `protobuf:"bytes,1,opt,name=botId,proto3" json:"botId,omitempty"`
	TeamId int32  `protobuf:"varint,2,opt,name=teamId,proto3" json:"teamId,omitempty"`
}

func (x *BotInfoProto) Reset() {
	*x = BotInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotInfoProto) ProtoMessage() {}

func (x *BotInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotInfoProto.ProtoReflect.Descriptor instead.
func (*BotInfoProto) Descriptor() ([]byte, []int) {
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP(), []int{5}
}

func (x *BotInfoProto) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotInfoProto) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

var File_thetan_multiplayer_v1_multiplayer_thetan_arena_proto protoreflect.FileDescriptor

var file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDesc = []byte{
	0x0a, 0x34, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x33, 0x0a, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x68, 0x65, 0x72, 0x6f, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x22, 0x60, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x09, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xd6, 0x02, 0x0a, 0x19, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x41, 0x72, 0x65, 0x6e,
	0x61, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x3b, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68,
	0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x53, 0x0a, 0x12, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x3d, 0x0a, 0x07, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x3c, 0x0a, 0x0c, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x2a, 0x3a, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e,
	0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0xa2, 0x02, 0x0a, 0x0a, 0x49, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x49, 0x56, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x49,
	0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x34, 0x5f, 0x56, 0x53, 0x5f,
	0x34, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x33, 0x5f,
	0x56, 0x53, 0x5f, 0x33, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x51, 0x55, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52,
	0x4f, 0x59, 0x41, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x4f, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x52, 0x49, 0x4f, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f,
	0x41, 0x59, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x09, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x42, 0xed,
	0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x1b, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x6e, 0x2d, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x4d, 0x58,
	0xaa, 0x02, 0x15, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x54, 0x68, 0x65, 0x74, 0x61,
	0x6e, 0x5c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x21, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x5c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x54, 0x68, 0x65, 0x74, 0x61, 0x6e, 0x3a, 0x3a, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescOnce sync.Once
	file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescData = file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDesc
)

func file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescGZIP() []byte {
	file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescOnce.Do(func() {
		file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescData = protoimpl.X.CompressGZIP(file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescData)
	})
	return file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDescData
}

var file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_goTypes = []interface{}{
	(GameMode)(0),                      // 0: thetan.multiplayer.v1.GameMode
	(InGameMode)(0),                    // 1: thetan.multiplayer.v1.InGameMode
	(*ThetanArenaPlayerInfoProto)(nil), // 2: thetan.multiplayer.v1.ThetanArenaPlayerInfoProto
	(*HeroInfo)(nil),                   // 3: thetan.multiplayer.v1.HeroInfo
	(*SkillInfo)(nil),                  // 4: thetan.multiplayer.v1.SkillInfo
	(*ThetanArenaPartyInfoProto)(nil),  // 5: thetan.multiplayer.v1.ThetanArenaPartyInfoProto
	(*CustomBotInfoProto)(nil),         // 6: thetan.multiplayer.v1.CustomBotInfoProto
	(*BotInfoProto)(nil),               // 7: thetan.multiplayer.v1.BotInfoProto
}
var file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_depIdxs = []int32{
	3, // 0: thetan.multiplayer.v1.ThetanArenaPlayerInfoProto.hero:type_name -> thetan.multiplayer.v1.HeroInfo
	4, // 1: thetan.multiplayer.v1.ThetanArenaPlayerInfoProto.skill1:type_name -> thetan.multiplayer.v1.SkillInfo
	4, // 2: thetan.multiplayer.v1.ThetanArenaPlayerInfoProto.skill2:type_name -> thetan.multiplayer.v1.SkillInfo
	0, // 3: thetan.multiplayer.v1.ThetanArenaPartyInfoProto.gameMode:type_name -> thetan.multiplayer.v1.GameMode
	1, // 4: thetan.multiplayer.v1.ThetanArenaPartyInfoProto.ingamemode:type_name -> thetan.multiplayer.v1.InGameMode
	6, // 5: thetan.multiplayer.v1.ThetanArenaPartyInfoProto.customBitInfo:type_name -> thetan.multiplayer.v1.CustomBotInfoProto
	7, // 6: thetan.multiplayer.v1.CustomBotInfoProto.botInfo:type_name -> thetan.multiplayer.v1.BotInfoProto
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_init() }
func file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_init() {
	if File_thetan_multiplayer_v1_multiplayer_thetan_arena_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThetanArenaPlayerInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThetanArenaPartyInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomBotInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_goTypes,
		DependencyIndexes: file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_depIdxs,
		EnumInfos:         file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_enumTypes,
		MessageInfos:      file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_msgTypes,
	}.Build()
	File_thetan_multiplayer_v1_multiplayer_thetan_arena_proto = out.File
	file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_rawDesc = nil
	file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_goTypes = nil
	file_thetan_multiplayer_v1_multiplayer_thetan_arena_proto_depIdxs = nil
}
