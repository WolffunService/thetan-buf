// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/multiplayer/rivals/v1/service_multiplayer_rivals.proto

package thetan_multiplayer_rivals_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRivalsMultiplayerServiceClient is a mock of RivalsMultiplayerServiceClient interface.
type MockRivalsMultiplayerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRivalsMultiplayerServiceClientMockRecorder
}

// MockRivalsMultiplayerServiceClientMockRecorder is the mock recorder for MockRivalsMultiplayerServiceClient.
type MockRivalsMultiplayerServiceClientMockRecorder struct {
	mock *MockRivalsMultiplayerServiceClient
}

// NewMockRivalsMultiplayerServiceClient creates a new mock instance.
func NewMockRivalsMultiplayerServiceClient(ctrl *gomock.Controller) *MockRivalsMultiplayerServiceClient {
	mock := &MockRivalsMultiplayerServiceClient{ctrl: ctrl}
	mock.recorder = &MockRivalsMultiplayerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRivalsMultiplayerServiceClient) EXPECT() *MockRivalsMultiplayerServiceClientMockRecorder {
	return m.recorder
}

// GetOnlineStatus mocks base method.
func (m *MockRivalsMultiplayerServiceClient) GetOnlineStatus(ctx context.Context, in *GetOnlineStatusRequest, opts ...grpc.CallOption) (*GetOnlineStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOnlineStatus", varargs...)
	ret0, _ := ret[0].(*GetOnlineStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineStatus indicates an expected call of GetOnlineStatus.
func (mr *MockRivalsMultiplayerServiceClientMockRecorder) GetOnlineStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineStatus", reflect.TypeOf((*MockRivalsMultiplayerServiceClient)(nil).GetOnlineStatus), varargs...)
}

// Notify mocks base method.
func (m *MockRivalsMultiplayerServiceClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Notify", varargs...)
	ret0, _ := ret[0].(*NotifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockRivalsMultiplayerServiceClientMockRecorder) Notify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockRivalsMultiplayerServiceClient)(nil).Notify), varargs...)
}

// MockRivalsMultiplayerServiceServer is a mock of RivalsMultiplayerServiceServer interface.
type MockRivalsMultiplayerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRivalsMultiplayerServiceServerMockRecorder
}

// MockRivalsMultiplayerServiceServerMockRecorder is the mock recorder for MockRivalsMultiplayerServiceServer.
type MockRivalsMultiplayerServiceServerMockRecorder struct {
	mock *MockRivalsMultiplayerServiceServer
}

// NewMockRivalsMultiplayerServiceServer creates a new mock instance.
func NewMockRivalsMultiplayerServiceServer(ctrl *gomock.Controller) *MockRivalsMultiplayerServiceServer {
	mock := &MockRivalsMultiplayerServiceServer{ctrl: ctrl}
	mock.recorder = &MockRivalsMultiplayerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRivalsMultiplayerServiceServer) EXPECT() *MockRivalsMultiplayerServiceServerMockRecorder {
	return m.recorder
}

// GetOnlineStatus mocks base method.
func (m *MockRivalsMultiplayerServiceServer) GetOnlineStatus(ctx context.Context, in *GetOnlineStatusRequest) (*GetOnlineStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineStatus", ctx, in)
	ret0, _ := ret[0].(*GetOnlineStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineStatus indicates an expected call of GetOnlineStatus.
func (mr *MockRivalsMultiplayerServiceServerMockRecorder) GetOnlineStatus(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineStatus", reflect.TypeOf((*MockRivalsMultiplayerServiceServer)(nil).GetOnlineStatus), ctx, in)
}

// Notify mocks base method.
func (m *MockRivalsMultiplayerServiceServer) Notify(ctx context.Context, in *NotifyRequest) (*NotifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, in)
	ret0, _ := ret[0].(*NotifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockRivalsMultiplayerServiceServerMockRecorder) Notify(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockRivalsMultiplayerServiceServer)(nil).Notify), ctx, in)
}
