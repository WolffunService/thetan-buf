// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/shared/v1/match.proto

package thetan_shared_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockMatchService_CreateMatchWithVersionClient is a mock of MatchService_CreateMatchWithVersionClient interface.
type MockMatchService_CreateMatchWithVersionClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatchService_CreateMatchWithVersionClientMockRecorder
}

// MockMatchService_CreateMatchWithVersionClientMockRecorder is the mock recorder for MockMatchService_CreateMatchWithVersionClient.
type MockMatchService_CreateMatchWithVersionClientMockRecorder struct {
	mock *MockMatchService_CreateMatchWithVersionClient
}

// NewMockMatchService_CreateMatchWithVersionClient creates a new mock instance.
func NewMockMatchService_CreateMatchWithVersionClient(ctrl *gomock.Controller) *MockMatchService_CreateMatchWithVersionClient {
	mock := &MockMatchService_CreateMatchWithVersionClient{ctrl: ctrl}
	mock.recorder = &MockMatchService_CreateMatchWithVersionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchService_CreateMatchWithVersionClient) EXPECT() *MockMatchService_CreateMatchWithVersionClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMatchService_CreateMatchWithVersionClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMatchService_CreateMatchWithVersionClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMatchService_CreateMatchWithVersionClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMatchService_CreateMatchWithVersionClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMatchService_CreateMatchWithVersionClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMatchService_CreateMatchWithVersionClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMatchService_CreateMatchWithVersionClient) Recv() (*MatchProtoPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*MatchProtoPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMatchService_CreateMatchWithVersionClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockMatchService_CreateMatchWithVersionClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMatchService_CreateMatchWithVersionClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockMatchService_CreateMatchWithVersionClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMatchService_CreateMatchWithVersionClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockMatchService_CreateMatchWithVersionClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMatchService_CreateMatchWithVersionClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionClient)(nil).Trailer))
}

// MockMatchService_CreateMatchWithVersionServer is a mock of MatchService_CreateMatchWithVersionServer interface.
type MockMatchService_CreateMatchWithVersionServer struct {
	ctrl     *gomock.Controller
	recorder *MockMatchService_CreateMatchWithVersionServerMockRecorder
}

// MockMatchService_CreateMatchWithVersionServerMockRecorder is the mock recorder for MockMatchService_CreateMatchWithVersionServer.
type MockMatchService_CreateMatchWithVersionServerMockRecorder struct {
	mock *MockMatchService_CreateMatchWithVersionServer
}

// NewMockMatchService_CreateMatchWithVersionServer creates a new mock instance.
func NewMockMatchService_CreateMatchWithVersionServer(ctrl *gomock.Controller) *MockMatchService_CreateMatchWithVersionServer {
	mock := &MockMatchService_CreateMatchWithVersionServer{ctrl: ctrl}
	mock.recorder = &MockMatchService_CreateMatchWithVersionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchService_CreateMatchWithVersionServer) EXPECT() *MockMatchService_CreateMatchWithVersionServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMatchService_CreateMatchWithVersionServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMatchService_CreateMatchWithVersionServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockMatchService_CreateMatchWithVersionServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMatchService_CreateMatchWithVersionServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockMatchService_CreateMatchWithVersionServer) Send(arg0 *MatchProtoPackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMatchService_CreateMatchWithVersionServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMatchService_CreateMatchWithVersionServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMatchService_CreateMatchWithVersionServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockMatchService_CreateMatchWithVersionServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMatchService_CreateMatchWithVersionServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockMatchService_CreateMatchWithVersionServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMatchService_CreateMatchWithVersionServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMatchService_CreateMatchWithVersionServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMatchService_CreateMatchWithVersionServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMatchService_CreateMatchWithVersionServer)(nil).SetTrailer), arg0)
}

// MockMatchService_RegisterMatchFoundClient is a mock of MatchService_RegisterMatchFoundClient interface.
type MockMatchService_RegisterMatchFoundClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatchService_RegisterMatchFoundClientMockRecorder
}

// MockMatchService_RegisterMatchFoundClientMockRecorder is the mock recorder for MockMatchService_RegisterMatchFoundClient.
type MockMatchService_RegisterMatchFoundClientMockRecorder struct {
	mock *MockMatchService_RegisterMatchFoundClient
}

// NewMockMatchService_RegisterMatchFoundClient creates a new mock instance.
func NewMockMatchService_RegisterMatchFoundClient(ctrl *gomock.Controller) *MockMatchService_RegisterMatchFoundClient {
	mock := &MockMatchService_RegisterMatchFoundClient{ctrl: ctrl}
	mock.recorder = &MockMatchService_RegisterMatchFoundClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchService_RegisterMatchFoundClient) EXPECT() *MockMatchService_RegisterMatchFoundClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMatchService_RegisterMatchFoundClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMatchService_RegisterMatchFoundClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMatchService_RegisterMatchFoundClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMatchService_RegisterMatchFoundClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMatchService_RegisterMatchFoundClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMatchService_RegisterMatchFoundClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMatchService_RegisterMatchFoundClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMatchService_RegisterMatchFoundClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMatchService_RegisterMatchFoundClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMatchService_RegisterMatchFoundClient) Recv() (*MatchProtoPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*MatchProtoPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMatchService_RegisterMatchFoundClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMatchService_RegisterMatchFoundClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockMatchService_RegisterMatchFoundClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMatchService_RegisterMatchFoundClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMatchService_RegisterMatchFoundClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockMatchService_RegisterMatchFoundClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMatchService_RegisterMatchFoundClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMatchService_RegisterMatchFoundClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockMatchService_RegisterMatchFoundClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMatchService_RegisterMatchFoundClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMatchService_RegisterMatchFoundClient)(nil).Trailer))
}

// MockMatchService_RegisterMatchFoundServer is a mock of MatchService_RegisterMatchFoundServer interface.
type MockMatchService_RegisterMatchFoundServer struct {
	ctrl     *gomock.Controller
	recorder *MockMatchService_RegisterMatchFoundServerMockRecorder
}

// MockMatchService_RegisterMatchFoundServerMockRecorder is the mock recorder for MockMatchService_RegisterMatchFoundServer.
type MockMatchService_RegisterMatchFoundServerMockRecorder struct {
	mock *MockMatchService_RegisterMatchFoundServer
}

// NewMockMatchService_RegisterMatchFoundServer creates a new mock instance.
func NewMockMatchService_RegisterMatchFoundServer(ctrl *gomock.Controller) *MockMatchService_RegisterMatchFoundServer {
	mock := &MockMatchService_RegisterMatchFoundServer{ctrl: ctrl}
	mock.recorder = &MockMatchService_RegisterMatchFoundServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchService_RegisterMatchFoundServer) EXPECT() *MockMatchService_RegisterMatchFoundServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMatchService_RegisterMatchFoundServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMatchService_RegisterMatchFoundServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMatchService_RegisterMatchFoundServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockMatchService_RegisterMatchFoundServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMatchService_RegisterMatchFoundServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMatchService_RegisterMatchFoundServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockMatchService_RegisterMatchFoundServer) Send(arg0 *MatchProtoPackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMatchService_RegisterMatchFoundServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMatchService_RegisterMatchFoundServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMatchService_RegisterMatchFoundServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMatchService_RegisterMatchFoundServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMatchService_RegisterMatchFoundServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockMatchService_RegisterMatchFoundServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMatchService_RegisterMatchFoundServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMatchService_RegisterMatchFoundServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockMatchService_RegisterMatchFoundServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMatchService_RegisterMatchFoundServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMatchService_RegisterMatchFoundServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMatchService_RegisterMatchFoundServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMatchService_RegisterMatchFoundServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMatchService_RegisterMatchFoundServer)(nil).SetTrailer), arg0)
}

// MockMatchServiceClient is a mock of MatchServiceClient interface.
type MockMatchServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatchServiceClientMockRecorder
}

// MockMatchServiceClientMockRecorder is the mock recorder for MockMatchServiceClient.
type MockMatchServiceClientMockRecorder struct {
	mock *MockMatchServiceClient
}

// NewMockMatchServiceClient creates a new mock instance.
func NewMockMatchServiceClient(ctrl *gomock.Controller) *MockMatchServiceClient {
	mock := &MockMatchServiceClient{ctrl: ctrl}
	mock.recorder = &MockMatchServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchServiceClient) EXPECT() *MockMatchServiceClientMockRecorder {
	return m.recorder
}

// CancelMatchMaking mocks base method.
func (m *MockMatchServiceClient) CancelMatchMaking(ctx context.Context, in *MatchProtoPackage, opts ...grpc.CallOption) (*MatchProtoPackage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMatchMaking", varargs...)
	ret0, _ := ret[0].(*MatchProtoPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMatchMaking indicates an expected call of CancelMatchMaking.
func (mr *MockMatchServiceClientMockRecorder) CancelMatchMaking(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMatchMaking", reflect.TypeOf((*MockMatchServiceClient)(nil).CancelMatchMaking), varargs...)
}

// CreateMatchWithVersion mocks base method.
func (m *MockMatchServiceClient) CreateMatchWithVersion(ctx context.Context, in *MatchProtoVersionPackage, opts ...grpc.CallOption) (MatchService_CreateMatchWithVersionClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchWithVersion", varargs...)
	ret0, _ := ret[0].(MatchService_CreateMatchWithVersionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchWithVersion indicates an expected call of CreateMatchWithVersion.
func (mr *MockMatchServiceClientMockRecorder) CreateMatchWithVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchWithVersion", reflect.TypeOf((*MockMatchServiceClient)(nil).CreateMatchWithVersion), varargs...)
}

// RegisterMatchFound mocks base method.
func (m *MockMatchServiceClient) RegisterMatchFound(ctx context.Context, in *MatchProtoPackage, opts ...grpc.CallOption) (MatchService_RegisterMatchFoundClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterMatchFound", varargs...)
	ret0, _ := ret[0].(MatchService_RegisterMatchFoundClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMatchFound indicates an expected call of RegisterMatchFound.
func (mr *MockMatchServiceClientMockRecorder) RegisterMatchFound(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMatchFound", reflect.TypeOf((*MockMatchServiceClient)(nil).RegisterMatchFound), varargs...)
}

// MockMatchServiceServer is a mock of MatchServiceServer interface.
type MockMatchServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMatchServiceServerMockRecorder
}

// MockMatchServiceServerMockRecorder is the mock recorder for MockMatchServiceServer.
type MockMatchServiceServerMockRecorder struct {
	mock *MockMatchServiceServer
}

// NewMockMatchServiceServer creates a new mock instance.
func NewMockMatchServiceServer(ctrl *gomock.Controller) *MockMatchServiceServer {
	mock := &MockMatchServiceServer{ctrl: ctrl}
	mock.recorder = &MockMatchServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchServiceServer) EXPECT() *MockMatchServiceServerMockRecorder {
	return m.recorder
}

// CancelMatchMaking mocks base method.
func (m *MockMatchServiceServer) CancelMatchMaking(ctx context.Context, in *MatchProtoPackage) (*MatchProtoPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMatchMaking", ctx, in)
	ret0, _ := ret[0].(*MatchProtoPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMatchMaking indicates an expected call of CancelMatchMaking.
func (mr *MockMatchServiceServerMockRecorder) CancelMatchMaking(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMatchMaking", reflect.TypeOf((*MockMatchServiceServer)(nil).CancelMatchMaking), ctx, in)
}

// CreateMatchWithVersion mocks base method.
func (m *MockMatchServiceServer) CreateMatchWithVersion(blob *MatchProtoVersionPackage, server MatchService_CreateMatchWithVersionServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchWithVersion", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMatchWithVersion indicates an expected call of CreateMatchWithVersion.
func (mr *MockMatchServiceServerMockRecorder) CreateMatchWithVersion(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchWithVersion", reflect.TypeOf((*MockMatchServiceServer)(nil).CreateMatchWithVersion), blob, server)
}

// RegisterMatchFound mocks base method.
func (m *MockMatchServiceServer) RegisterMatchFound(blob *MatchProtoPackage, server MatchService_RegisterMatchFoundServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMatchFound", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMatchFound indicates an expected call of RegisterMatchFound.
func (mr *MockMatchServiceServerMockRecorder) RegisterMatchFound(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMatchFound", reflect.TypeOf((*MockMatchServiceServer)(nil).RegisterMatchFound), blob, server)
}

// MockMatchHandleServiceClient is a mock of MatchHandleServiceClient interface.
type MockMatchHandleServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatchHandleServiceClientMockRecorder
}

// MockMatchHandleServiceClientMockRecorder is the mock recorder for MockMatchHandleServiceClient.
type MockMatchHandleServiceClientMockRecorder struct {
	mock *MockMatchHandleServiceClient
}

// NewMockMatchHandleServiceClient creates a new mock instance.
func NewMockMatchHandleServiceClient(ctrl *gomock.Controller) *MockMatchHandleServiceClient {
	mock := &MockMatchHandleServiceClient{ctrl: ctrl}
	mock.recorder = &MockMatchHandleServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchHandleServiceClient) EXPECT() *MockMatchHandleServiceClientMockRecorder {
	return m.recorder
}

// HandleDeleteTicket mocks base method.
func (m *MockMatchHandleServiceClient) HandleDeleteTicket(ctx context.Context, in *DeleteTicketSuccess, opts ...grpc.CallOption) (*EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleDeleteTicket", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleDeleteTicket indicates an expected call of HandleDeleteTicket.
func (mr *MockMatchHandleServiceClientMockRecorder) HandleDeleteTicket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteTicket", reflect.TypeOf((*MockMatchHandleServiceClient)(nil).HandleDeleteTicket), varargs...)
}

// HandlePlayAgain mocks base method.
func (m *MockMatchHandleServiceClient) HandlePlayAgain(ctx context.Context, in *DataPlayAgainSuccess, opts ...grpc.CallOption) (*EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandlePlayAgain", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePlayAgain indicates an expected call of HandlePlayAgain.
func (mr *MockMatchHandleServiceClientMockRecorder) HandlePlayAgain(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePlayAgain", reflect.TypeOf((*MockMatchHandleServiceClient)(nil).HandlePlayAgain), varargs...)
}

// MockMatchHandleServiceServer is a mock of MatchHandleServiceServer interface.
type MockMatchHandleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMatchHandleServiceServerMockRecorder
}

// MockMatchHandleServiceServerMockRecorder is the mock recorder for MockMatchHandleServiceServer.
type MockMatchHandleServiceServerMockRecorder struct {
	mock *MockMatchHandleServiceServer
}

// NewMockMatchHandleServiceServer creates a new mock instance.
func NewMockMatchHandleServiceServer(ctrl *gomock.Controller) *MockMatchHandleServiceServer {
	mock := &MockMatchHandleServiceServer{ctrl: ctrl}
	mock.recorder = &MockMatchHandleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchHandleServiceServer) EXPECT() *MockMatchHandleServiceServerMockRecorder {
	return m.recorder
}

// HandleDeleteTicket mocks base method.
func (m *MockMatchHandleServiceServer) HandleDeleteTicket(ctx context.Context, in *DeleteTicketSuccess) (*EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeleteTicket", ctx, in)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleDeleteTicket indicates an expected call of HandleDeleteTicket.
func (mr *MockMatchHandleServiceServerMockRecorder) HandleDeleteTicket(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteTicket", reflect.TypeOf((*MockMatchHandleServiceServer)(nil).HandleDeleteTicket), ctx, in)
}

// HandlePlayAgain mocks base method.
func (m *MockMatchHandleServiceServer) HandlePlayAgain(ctx context.Context, in *DataPlayAgainSuccess) (*EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePlayAgain", ctx, in)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePlayAgain indicates an expected call of HandlePlayAgain.
func (mr *MockMatchHandleServiceServerMockRecorder) HandlePlayAgain(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePlayAgain", reflect.TypeOf((*MockMatchHandleServiceServer)(nil).HandlePlayAgain), ctx, in)
}
