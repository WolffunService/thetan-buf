// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/gateway/v1/gs_spectator.proto

package thetan_gateway_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "thetan-buf/gen/go/thetan/shared/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThetanGatewaySpectator_AllocateSpectator_FullMethodName = "/thetan.gateway.v1.ThetanGatewaySpectator/AllocateSpectator"
)

// ThetanGatewaySpectatorClient is the client API for ThetanGatewaySpectator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanGatewaySpectatorClient interface {
	AllocateSpectator(ctx context.Context, in *v1.MatchFoundResponseProto, opts ...grpc.CallOption) (*RoomAllocationResp, error)
}

type thetanGatewaySpectatorClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanGatewaySpectatorClient(cc grpc.ClientConnInterface) ThetanGatewaySpectatorClient {
	return &thetanGatewaySpectatorClient{cc}
}

func (c *thetanGatewaySpectatorClient) AllocateSpectator(ctx context.Context, in *v1.MatchFoundResponseProto, opts ...grpc.CallOption) (*RoomAllocationResp, error) {
	out := new(RoomAllocationResp)
	err := c.cc.Invoke(ctx, ThetanGatewaySpectator_AllocateSpectator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanGatewaySpectatorServer is the server API for ThetanGatewaySpectator service.
// All implementations must embed UnimplementedThetanGatewaySpectatorServer
// for forward compatibility
type ThetanGatewaySpectatorServer interface {
	AllocateSpectator(context.Context, *v1.MatchFoundResponseProto) (*RoomAllocationResp, error)
	mustEmbedUnimplementedThetanGatewaySpectatorServer()
}

// UnimplementedThetanGatewaySpectatorServer must be embedded to have forward compatible implementations.
type UnimplementedThetanGatewaySpectatorServer struct {
}

func (UnimplementedThetanGatewaySpectatorServer) AllocateSpectator(context.Context, *v1.MatchFoundResponseProto) (*RoomAllocationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateSpectator not implemented")
}
func (UnimplementedThetanGatewaySpectatorServer) mustEmbedUnimplementedThetanGatewaySpectatorServer() {
}

// UnsafeThetanGatewaySpectatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanGatewaySpectatorServer will
// result in compilation errors.
type UnsafeThetanGatewaySpectatorServer interface {
	mustEmbedUnimplementedThetanGatewaySpectatorServer()
}

func RegisterThetanGatewaySpectatorServer(s grpc.ServiceRegistrar, srv ThetanGatewaySpectatorServer) {
	s.RegisterService(&ThetanGatewaySpectator_ServiceDesc, srv)
}

func _ThetanGatewaySpectator_AllocateSpectator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MatchFoundResponseProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanGatewaySpectatorServer).AllocateSpectator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanGatewaySpectator_AllocateSpectator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanGatewaySpectatorServer).AllocateSpectator(ctx, req.(*v1.MatchFoundResponseProto))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanGatewaySpectator_ServiceDesc is the grpc.ServiceDesc for ThetanGatewaySpectator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanGatewaySpectator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.gateway.v1.ThetanGatewaySpectator",
	HandlerType: (*ThetanGatewaySpectatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateSpectator",
			Handler:    _ThetanGatewaySpectator_AllocateSpectator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/gateway/v1/gs_spectator.proto",
}
