// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/gateway/v1/gs_spectator.proto

package thetan_gateway_v1

import (
	context "context"
	reflect "reflect"
	thetan_shared_v1 "thetan-buf/gen/go/thetan/shared/v1"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockThetanGatewaySpectatorClient is a mock of ThetanGatewaySpectatorClient interface.
type MockThetanGatewaySpectatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockThetanGatewaySpectatorClientMockRecorder
}

// MockThetanGatewaySpectatorClientMockRecorder is the mock recorder for MockThetanGatewaySpectatorClient.
type MockThetanGatewaySpectatorClientMockRecorder struct {
	mock *MockThetanGatewaySpectatorClient
}

// NewMockThetanGatewaySpectatorClient creates a new mock instance.
func NewMockThetanGatewaySpectatorClient(ctrl *gomock.Controller) *MockThetanGatewaySpectatorClient {
	mock := &MockThetanGatewaySpectatorClient{ctrl: ctrl}
	mock.recorder = &MockThetanGatewaySpectatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanGatewaySpectatorClient) EXPECT() *MockThetanGatewaySpectatorClientMockRecorder {
	return m.recorder
}

// AllocateSpectator mocks base method.
func (m *MockThetanGatewaySpectatorClient) AllocateSpectator(ctx context.Context, in *thetan_shared_v1.MatchFoundResponseProto, opts ...grpc.CallOption) (*RoomAllocationResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocateSpectator", varargs...)
	ret0, _ := ret[0].(*RoomAllocationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateSpectator indicates an expected call of AllocateSpectator.
func (mr *MockThetanGatewaySpectatorClientMockRecorder) AllocateSpectator(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSpectator", reflect.TypeOf((*MockThetanGatewaySpectatorClient)(nil).AllocateSpectator), varargs...)
}

// MockThetanGatewaySpectatorServer is a mock of ThetanGatewaySpectatorServer interface.
type MockThetanGatewaySpectatorServer struct {
	ctrl     *gomock.Controller
	recorder *MockThetanGatewaySpectatorServerMockRecorder
}

// MockThetanGatewaySpectatorServerMockRecorder is the mock recorder for MockThetanGatewaySpectatorServer.
type MockThetanGatewaySpectatorServerMockRecorder struct {
	mock *MockThetanGatewaySpectatorServer
}

// NewMockThetanGatewaySpectatorServer creates a new mock instance.
func NewMockThetanGatewaySpectatorServer(ctrl *gomock.Controller) *MockThetanGatewaySpectatorServer {
	mock := &MockThetanGatewaySpectatorServer{ctrl: ctrl}
	mock.recorder = &MockThetanGatewaySpectatorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanGatewaySpectatorServer) EXPECT() *MockThetanGatewaySpectatorServerMockRecorder {
	return m.recorder
}

// AllocateSpectator mocks base method.
func (m *MockThetanGatewaySpectatorServer) AllocateSpectator(ctx context.Context, in *thetan_shared_v1.MatchFoundResponseProto) (*RoomAllocationResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateSpectator", ctx, in)
	ret0, _ := ret[0].(*RoomAllocationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateSpectator indicates an expected call of AllocateSpectator.
func (mr *MockThetanGatewaySpectatorServerMockRecorder) AllocateSpectator(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSpectator", reflect.TypeOf((*MockThetanGatewaySpectatorServer)(nil).AllocateSpectator), ctx, in)
}
