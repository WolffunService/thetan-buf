// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thetan/gateway/v1/gs_rivalslobby.proto

package thetan_gateway_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "thetan-buf/gen/go/thetan/rivals/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThetanGatewayRivalsLobby_AllocateTown_FullMethodName = "/thetan.gateway.v1.ThetanGatewayRivalsLobby/AllocateTown"
	ThetanGatewayRivalsLobby_GetTownCCU_FullMethodName   = "/thetan.gateway.v1.ThetanGatewayRivalsLobby/GetTownCCU"
)

// ThetanGatewayRivalsLobbyClient is the client API for ThetanGatewayRivalsLobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThetanGatewayRivalsLobbyClient interface {
	AllocateTown(ctx context.Context, in *v1.LobbyTown, opts ...grpc.CallOption) (*TownAllocationResp, error)
	GetTownCCU(ctx context.Context, in *GetTownCCURequest, opts ...grpc.CallOption) (*GetTownCCUResponse, error)
}

type thetanGatewayRivalsLobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewThetanGatewayRivalsLobbyClient(cc grpc.ClientConnInterface) ThetanGatewayRivalsLobbyClient {
	return &thetanGatewayRivalsLobbyClient{cc}
}

func (c *thetanGatewayRivalsLobbyClient) AllocateTown(ctx context.Context, in *v1.LobbyTown, opts ...grpc.CallOption) (*TownAllocationResp, error) {
	out := new(TownAllocationResp)
	err := c.cc.Invoke(ctx, ThetanGatewayRivalsLobby_AllocateTown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thetanGatewayRivalsLobbyClient) GetTownCCU(ctx context.Context, in *GetTownCCURequest, opts ...grpc.CallOption) (*GetTownCCUResponse, error) {
	out := new(GetTownCCUResponse)
	err := c.cc.Invoke(ctx, ThetanGatewayRivalsLobby_GetTownCCU_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThetanGatewayRivalsLobbyServer is the server API for ThetanGatewayRivalsLobby service.
// All implementations must embed UnimplementedThetanGatewayRivalsLobbyServer
// for forward compatibility
type ThetanGatewayRivalsLobbyServer interface {
	AllocateTown(context.Context, *v1.LobbyTown) (*TownAllocationResp, error)
	GetTownCCU(context.Context, *GetTownCCURequest) (*GetTownCCUResponse, error)
	mustEmbedUnimplementedThetanGatewayRivalsLobbyServer()
}

// UnimplementedThetanGatewayRivalsLobbyServer must be embedded to have forward compatible implementations.
type UnimplementedThetanGatewayRivalsLobbyServer struct {
}

func (UnimplementedThetanGatewayRivalsLobbyServer) AllocateTown(context.Context, *v1.LobbyTown) (*TownAllocationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateTown not implemented")
}
func (UnimplementedThetanGatewayRivalsLobbyServer) GetTownCCU(context.Context, *GetTownCCURequest) (*GetTownCCUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTownCCU not implemented")
}
func (UnimplementedThetanGatewayRivalsLobbyServer) mustEmbedUnimplementedThetanGatewayRivalsLobbyServer() {
}

// UnsafeThetanGatewayRivalsLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThetanGatewayRivalsLobbyServer will
// result in compilation errors.
type UnsafeThetanGatewayRivalsLobbyServer interface {
	mustEmbedUnimplementedThetanGatewayRivalsLobbyServer()
}

func RegisterThetanGatewayRivalsLobbyServer(s grpc.ServiceRegistrar, srv ThetanGatewayRivalsLobbyServer) {
	s.RegisterService(&ThetanGatewayRivalsLobby_ServiceDesc, srv)
}

func _ThetanGatewayRivalsLobby_AllocateTown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.LobbyTown)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanGatewayRivalsLobbyServer).AllocateTown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanGatewayRivalsLobby_AllocateTown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanGatewayRivalsLobbyServer).AllocateTown(ctx, req.(*v1.LobbyTown))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThetanGatewayRivalsLobby_GetTownCCU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTownCCURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThetanGatewayRivalsLobbyServer).GetTownCCU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThetanGatewayRivalsLobby_GetTownCCU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThetanGatewayRivalsLobbyServer).GetTownCCU(ctx, req.(*GetTownCCURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThetanGatewayRivalsLobby_ServiceDesc is the grpc.ServiceDesc for ThetanGatewayRivalsLobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThetanGatewayRivalsLobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thetan.gateway.v1.ThetanGatewayRivalsLobby",
	HandlerType: (*ThetanGatewayRivalsLobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateTown",
			Handler:    _ThetanGatewayRivalsLobby_AllocateTown_Handler,
		},
		{
			MethodName: "GetTownCCU",
			Handler:    _ThetanGatewayRivalsLobby_GetTownCCU_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thetan/gateway/v1/gs_rivalslobby.proto",
}
