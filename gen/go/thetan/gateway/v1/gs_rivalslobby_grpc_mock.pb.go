// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: thetan/gateway/v1/gs_rivalslobby.proto

package thetan_gateway_v1

import (
	context "context"
	reflect "reflect"
	thetan_rivals_v1 "thetan-buf/gen/go/thetan/rivals/v1"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockThetanGatewayRivalsLobbyClient is a mock of ThetanGatewayRivalsLobbyClient interface.
type MockThetanGatewayRivalsLobbyClient struct {
	ctrl     *gomock.Controller
	recorder *MockThetanGatewayRivalsLobbyClientMockRecorder
}

// MockThetanGatewayRivalsLobbyClientMockRecorder is the mock recorder for MockThetanGatewayRivalsLobbyClient.
type MockThetanGatewayRivalsLobbyClientMockRecorder struct {
	mock *MockThetanGatewayRivalsLobbyClient
}

// NewMockThetanGatewayRivalsLobbyClient creates a new mock instance.
func NewMockThetanGatewayRivalsLobbyClient(ctrl *gomock.Controller) *MockThetanGatewayRivalsLobbyClient {
	mock := &MockThetanGatewayRivalsLobbyClient{ctrl: ctrl}
	mock.recorder = &MockThetanGatewayRivalsLobbyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanGatewayRivalsLobbyClient) EXPECT() *MockThetanGatewayRivalsLobbyClientMockRecorder {
	return m.recorder
}

// AllocateTown mocks base method.
func (m *MockThetanGatewayRivalsLobbyClient) AllocateTown(ctx context.Context, in *thetan_rivals_v1.LobbyTown, opts ...grpc.CallOption) (*TownAllocationResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocateTown", varargs...)
	ret0, _ := ret[0].(*TownAllocationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateTown indicates an expected call of AllocateTown.
func (mr *MockThetanGatewayRivalsLobbyClientMockRecorder) AllocateTown(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateTown", reflect.TypeOf((*MockThetanGatewayRivalsLobbyClient)(nil).AllocateTown), varargs...)
}

// GetTownCCU mocks base method.
func (m *MockThetanGatewayRivalsLobbyClient) GetTownCCU(ctx context.Context, in *GetTownCCURequest, opts ...grpc.CallOption) (*GetTownCCUResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTownCCU", varargs...)
	ret0, _ := ret[0].(*GetTownCCUResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTownCCU indicates an expected call of GetTownCCU.
func (mr *MockThetanGatewayRivalsLobbyClientMockRecorder) GetTownCCU(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTownCCU", reflect.TypeOf((*MockThetanGatewayRivalsLobbyClient)(nil).GetTownCCU), varargs...)
}

// MockThetanGatewayRivalsLobbyServer is a mock of ThetanGatewayRivalsLobbyServer interface.
type MockThetanGatewayRivalsLobbyServer struct {
	ctrl     *gomock.Controller
	recorder *MockThetanGatewayRivalsLobbyServerMockRecorder
}

// MockThetanGatewayRivalsLobbyServerMockRecorder is the mock recorder for MockThetanGatewayRivalsLobbyServer.
type MockThetanGatewayRivalsLobbyServerMockRecorder struct {
	mock *MockThetanGatewayRivalsLobbyServer
}

// NewMockThetanGatewayRivalsLobbyServer creates a new mock instance.
func NewMockThetanGatewayRivalsLobbyServer(ctrl *gomock.Controller) *MockThetanGatewayRivalsLobbyServer {
	mock := &MockThetanGatewayRivalsLobbyServer{ctrl: ctrl}
	mock.recorder = &MockThetanGatewayRivalsLobbyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThetanGatewayRivalsLobbyServer) EXPECT() *MockThetanGatewayRivalsLobbyServerMockRecorder {
	return m.recorder
}

// AllocateTown mocks base method.
func (m *MockThetanGatewayRivalsLobbyServer) AllocateTown(ctx context.Context, in *thetan_rivals_v1.LobbyTown) (*TownAllocationResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateTown", ctx, in)
	ret0, _ := ret[0].(*TownAllocationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateTown indicates an expected call of AllocateTown.
func (mr *MockThetanGatewayRivalsLobbyServerMockRecorder) AllocateTown(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateTown", reflect.TypeOf((*MockThetanGatewayRivalsLobbyServer)(nil).AllocateTown), ctx, in)
}

// GetTownCCU mocks base method.
func (m *MockThetanGatewayRivalsLobbyServer) GetTownCCU(ctx context.Context, in *GetTownCCURequest) (*GetTownCCUResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTownCCU", ctx, in)
	ret0, _ := ret[0].(*GetTownCCUResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTownCCU indicates an expected call of GetTownCCU.
func (mr *MockThetanGatewayRivalsLobbyServerMockRecorder) GetTownCCU(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTownCCU", reflect.TypeOf((*MockThetanGatewayRivalsLobbyServer)(nil).GetTownCCU), ctx, in)
}
