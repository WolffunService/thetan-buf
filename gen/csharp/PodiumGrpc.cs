// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: podium/api/v1/podium.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#if !UNITY_ANDROID && !UNITY_IOS
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Podium.Api.V1 {
  /// <summary>
  /// Podium is a service that provides leaderboard functionality.
  /// Games can manage multiple leaderboards with this service.
  /// </summary>
  public static partial class Podium
  {
    static readonly string __ServiceName = "podium.api.v1.Podium";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.HealthCheckRequest> __Marshaller_podium_api_v1_HealthCheckRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.HealthCheckRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.HealthCheckResponse> __Marshaller_podium_api_v1_HealthCheckResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.HealthCheckResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.StatusResponse> __Marshaller_podium_api_v1_StatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.StatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.RemoveLeaderboardRequest> __Marshaller_podium_api_v1_RemoveLeaderboardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.RemoveLeaderboardRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.RemoveLeaderboardResponse> __Marshaller_podium_api_v1_RemoveLeaderboardResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.RemoveLeaderboardResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.BulkUpsertScoresRequest> __Marshaller_podium_api_v1_BulkUpsertScoresRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.BulkUpsertScoresRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.BulkUpsertScoresResponse> __Marshaller_podium_api_v1_BulkUpsertScoresResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.BulkUpsertScoresResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.UpsertScoreRequest> __Marshaller_podium_api_v1_UpsertScoreRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.UpsertScoreRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.UpsertScoreResponse> __Marshaller_podium_api_v1_UpsertScoreResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.UpsertScoreResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.TotalMembersRequest> __Marshaller_podium_api_v1_TotalMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.TotalMembersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.TotalMembersResponse> __Marshaller_podium_api_v1_TotalMembersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.TotalMembersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.IncrementScoreRequest> __Marshaller_podium_api_v1_IncrementScoreRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.IncrementScoreRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.IncrementScoreResponse> __Marshaller_podium_api_v1_IncrementScoreResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.IncrementScoreResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetMemberRequest> __Marshaller_podium_api_v1_GetMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetMemberRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetMemberResponse> __Marshaller_podium_api_v1_GetMemberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetMemberResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetMembersRequest> __Marshaller_podium_api_v1_GetMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetMembersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetMembersResponse> __Marshaller_podium_api_v1_GetMembersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetMembersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.RemoveMemberRequest> __Marshaller_podium_api_v1_RemoveMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.RemoveMemberRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.RemoveMemberResponse> __Marshaller_podium_api_v1_RemoveMemberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.RemoveMemberResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.RemoveMembersRequest> __Marshaller_podium_api_v1_RemoveMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.RemoveMembersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.RemoveMembersResponse> __Marshaller_podium_api_v1_RemoveMembersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.RemoveMembersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetRankRequest> __Marshaller_podium_api_v1_GetRankRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetRankRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetRankResponse> __Marshaller_podium_api_v1_GetRankResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetRankResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetAroundMemberRequest> __Marshaller_podium_api_v1_GetAroundMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetAroundMemberRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetAroundMemberResponse> __Marshaller_podium_api_v1_GetAroundMemberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetAroundMemberResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetAroundScoreRequest> __Marshaller_podium_api_v1_GetAroundScoreRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetAroundScoreRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetAroundScoreResponse> __Marshaller_podium_api_v1_GetAroundScoreResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetAroundScoreResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetTopMembersRequest> __Marshaller_podium_api_v1_GetTopMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetTopMembersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetTopMembersResponse> __Marshaller_podium_api_v1_GetTopMembersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetTopMembersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetTopPercentageRequest> __Marshaller_podium_api_v1_GetTopPercentageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetTopPercentageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetTopPercentageResponse> __Marshaller_podium_api_v1_GetTopPercentageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetTopPercentageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest> __Marshaller_podium_api_v1_UpsertScoreMultiLeaderboardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse> __Marshaller_podium_api_v1_UpsertScoreMultiLeaderboardsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetRankMultiLeaderboardsRequest> __Marshaller_podium_api_v1_GetRankMultiLeaderboardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetRankMultiLeaderboardsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Podium.Api.V1.GetRankMultiLeaderboardsResponse> __Marshaller_podium_api_v1_GetRankMultiLeaderboardsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Podium.Api.V1.GetRankMultiLeaderboardsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.HealthCheckRequest, global::Podium.Api.V1.HealthCheckResponse> __Method_HealthCheck = new grpc::Method<global::Podium.Api.V1.HealthCheckRequest, global::Podium.Api.V1.HealthCheckResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HealthCheck",
        __Marshaller_podium_api_v1_HealthCheckRequest,
        __Marshaller_podium_api_v1_HealthCheckResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Podium.Api.V1.StatusResponse> __Method_Status = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Podium.Api.V1.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Status",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_podium_api_v1_StatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.RemoveLeaderboardRequest, global::Podium.Api.V1.RemoveLeaderboardResponse> __Method_RemoveLeaderboard = new grpc::Method<global::Podium.Api.V1.RemoveLeaderboardRequest, global::Podium.Api.V1.RemoveLeaderboardResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveLeaderboard",
        __Marshaller_podium_api_v1_RemoveLeaderboardRequest,
        __Marshaller_podium_api_v1_RemoveLeaderboardResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.BulkUpsertScoresRequest, global::Podium.Api.V1.BulkUpsertScoresResponse> __Method_BulkUpsertScores = new grpc::Method<global::Podium.Api.V1.BulkUpsertScoresRequest, global::Podium.Api.V1.BulkUpsertScoresResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BulkUpsertScores",
        __Marshaller_podium_api_v1_BulkUpsertScoresRequest,
        __Marshaller_podium_api_v1_BulkUpsertScoresResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.UpsertScoreRequest, global::Podium.Api.V1.UpsertScoreResponse> __Method_UpsertScore = new grpc::Method<global::Podium.Api.V1.UpsertScoreRequest, global::Podium.Api.V1.UpsertScoreResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpsertScore",
        __Marshaller_podium_api_v1_UpsertScoreRequest,
        __Marshaller_podium_api_v1_UpsertScoreResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.TotalMembersRequest, global::Podium.Api.V1.TotalMembersResponse> __Method_TotalMembers = new grpc::Method<global::Podium.Api.V1.TotalMembersRequest, global::Podium.Api.V1.TotalMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalMembers",
        __Marshaller_podium_api_v1_TotalMembersRequest,
        __Marshaller_podium_api_v1_TotalMembersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.IncrementScoreRequest, global::Podium.Api.V1.IncrementScoreResponse> __Method_IncrementScore = new grpc::Method<global::Podium.Api.V1.IncrementScoreRequest, global::Podium.Api.V1.IncrementScoreResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncrementScore",
        __Marshaller_podium_api_v1_IncrementScoreRequest,
        __Marshaller_podium_api_v1_IncrementScoreResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetMemberRequest, global::Podium.Api.V1.GetMemberResponse> __Method_GetMember = new grpc::Method<global::Podium.Api.V1.GetMemberRequest, global::Podium.Api.V1.GetMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMember",
        __Marshaller_podium_api_v1_GetMemberRequest,
        __Marshaller_podium_api_v1_GetMemberResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetMembersRequest, global::Podium.Api.V1.GetMembersResponse> __Method_GetMembers = new grpc::Method<global::Podium.Api.V1.GetMembersRequest, global::Podium.Api.V1.GetMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMembers",
        __Marshaller_podium_api_v1_GetMembersRequest,
        __Marshaller_podium_api_v1_GetMembersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.RemoveMemberRequest, global::Podium.Api.V1.RemoveMemberResponse> __Method_RemoveMember = new grpc::Method<global::Podium.Api.V1.RemoveMemberRequest, global::Podium.Api.V1.RemoveMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveMember",
        __Marshaller_podium_api_v1_RemoveMemberRequest,
        __Marshaller_podium_api_v1_RemoveMemberResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.RemoveMembersRequest, global::Podium.Api.V1.RemoveMembersResponse> __Method_RemoveMembers = new grpc::Method<global::Podium.Api.V1.RemoveMembersRequest, global::Podium.Api.V1.RemoveMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveMembers",
        __Marshaller_podium_api_v1_RemoveMembersRequest,
        __Marshaller_podium_api_v1_RemoveMembersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetRankRequest, global::Podium.Api.V1.GetRankResponse> __Method_GetRank = new grpc::Method<global::Podium.Api.V1.GetRankRequest, global::Podium.Api.V1.GetRankResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRank",
        __Marshaller_podium_api_v1_GetRankRequest,
        __Marshaller_podium_api_v1_GetRankResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetAroundMemberRequest, global::Podium.Api.V1.GetAroundMemberResponse> __Method_GetAroundMember = new grpc::Method<global::Podium.Api.V1.GetAroundMemberRequest, global::Podium.Api.V1.GetAroundMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAroundMember",
        __Marshaller_podium_api_v1_GetAroundMemberRequest,
        __Marshaller_podium_api_v1_GetAroundMemberResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetAroundScoreRequest, global::Podium.Api.V1.GetAroundScoreResponse> __Method_GetAroundScore = new grpc::Method<global::Podium.Api.V1.GetAroundScoreRequest, global::Podium.Api.V1.GetAroundScoreResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAroundScore",
        __Marshaller_podium_api_v1_GetAroundScoreRequest,
        __Marshaller_podium_api_v1_GetAroundScoreResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetTopMembersRequest, global::Podium.Api.V1.GetTopMembersResponse> __Method_GetTopMembers = new grpc::Method<global::Podium.Api.V1.GetTopMembersRequest, global::Podium.Api.V1.GetTopMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTopMembers",
        __Marshaller_podium_api_v1_GetTopMembersRequest,
        __Marshaller_podium_api_v1_GetTopMembersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetTopPercentageRequest, global::Podium.Api.V1.GetTopPercentageResponse> __Method_GetTopPercentage = new grpc::Method<global::Podium.Api.V1.GetTopPercentageRequest, global::Podium.Api.V1.GetTopPercentageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTopPercentage",
        __Marshaller_podium_api_v1_GetTopPercentageRequest,
        __Marshaller_podium_api_v1_GetTopPercentageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest, global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse> __Method_UpsertScoreMultiLeaderboards = new grpc::Method<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest, global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpsertScoreMultiLeaderboards",
        __Marshaller_podium_api_v1_UpsertScoreMultiLeaderboardsRequest,
        __Marshaller_podium_api_v1_UpsertScoreMultiLeaderboardsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Podium.Api.V1.GetRankMultiLeaderboardsRequest, global::Podium.Api.V1.GetRankMultiLeaderboardsResponse> __Method_GetRankMultiLeaderboards = new grpc::Method<global::Podium.Api.V1.GetRankMultiLeaderboardsRequest, global::Podium.Api.V1.GetRankMultiLeaderboardsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRankMultiLeaderboards",
        __Marshaller_podium_api_v1_GetRankMultiLeaderboardsRequest,
        __Marshaller_podium_api_v1_GetRankMultiLeaderboardsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Podium.Api.V1.PodiumReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Podium</summary>
    [grpc::BindServiceMethod(typeof(Podium), "BindService")]
    public abstract partial class PodiumBase
    {
      /// <summary>
      /// HealthCheck verifies and returns service health.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.HealthCheckResponse> HealthCheck(global::Podium.Api.V1.HealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Status allows to clients to know additional information about Podium execution.
      /// Currently only returns error rate of the service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.StatusResponse> Status(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RemoveLeaderboard removes a specified leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.RemoveLeaderboardResponse> RemoveLeaderboard(global::Podium.Api.V1.RemoveLeaderboardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BulkUpsertScores allows clients to send multiple scores in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.BulkUpsertScoresResponse> BulkUpsertScores(global::Podium.Api.V1.BulkUpsertScoresRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpsertScore submits a single leaderboard score to Podium.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.UpsertScoreResponse> UpsertScore(global::Podium.Api.V1.UpsertScoreRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TotalMembers returns the number of members on a leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.TotalMembersResponse> TotalMembers(global::Podium.Api.V1.TotalMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// IncrementScore increments a member score.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.IncrementScoreResponse> IncrementScore(global::Podium.Api.V1.IncrementScoreRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetMember retrieves leaderboard information from a member.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetMemberResponse> GetMember(global::Podium.Api.V1.GetMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetMembers retrieves information about multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetMembersResponse> GetMembers(global::Podium.Api.V1.GetMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RemoveMember removes a member from a leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.RemoveMemberResponse> RemoveMember(global::Podium.Api.V1.RemoveMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RemoveMembers allows the removal of multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.RemoveMembersResponse> RemoveMembers(global::Podium.Api.V1.RemoveMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetRank retrieves ranking information about a member.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetRankResponse> GetRank(global::Podium.Api.V1.GetRankRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetAroundMember retrieves the closest members to another member on the leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetAroundMemberResponse> GetAroundMember(global::Podium.Api.V1.GetAroundMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetAroundScore retrieves the closest members to a score on the leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetAroundScoreResponse> GetAroundScore(global::Podium.Api.V1.GetAroundScoreRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetTopMembers retrieves the top ranking members of a leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetTopMembersResponse> GetTopMembers(global::Podium.Api.V1.GetTopMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetTopPercentage retrieves a percentage of the top members of the leaderboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetTopPercentageResponse> GetTopPercentage(global::Podium.Api.V1.GetTopPercentageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpsertScoreMultiLeaderboards sends a member score to multiple leaderboards.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse> UpsertScoreMultiLeaderboards(global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetRankMultiLeaderboards retrieves information about a member in multiple leaderboards.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Podium.Api.V1.GetRankMultiLeaderboardsResponse> GetRankMultiLeaderboards(global::Podium.Api.V1.GetRankMultiLeaderboardsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Podium</summary>
    public partial class PodiumClient : grpc::ClientBase<PodiumClient>
    {
      /// <summary>Creates a new client for Podium</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PodiumClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Podium that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PodiumClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PodiumClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PodiumClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// HealthCheck verifies and returns service health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.HealthCheckResponse HealthCheck(global::Podium.Api.V1.HealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HealthCheck verifies and returns service health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.HealthCheckResponse HealthCheck(global::Podium.Api.V1.HealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HealthCheck, null, options, request);
      }
      /// <summary>
      /// HealthCheck verifies and returns service health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.HealthCheckResponse> HealthCheckAsync(global::Podium.Api.V1.HealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HealthCheck verifies and returns service health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.HealthCheckResponse> HealthCheckAsync(global::Podium.Api.V1.HealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HealthCheck, null, options, request);
      }
      /// <summary>
      /// Status allows to clients to know additional information about Podium execution.
      /// Currently only returns error rate of the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.StatusResponse Status(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Status allows to clients to know additional information about Podium execution.
      /// Currently only returns error rate of the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.StatusResponse Status(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
      }
      /// <summary>
      /// Status allows to clients to know additional information about Podium execution.
      /// Currently only returns error rate of the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.StatusResponse> StatusAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Status allows to clients to know additional information about Podium execution.
      /// Currently only returns error rate of the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.StatusResponse> StatusAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
      }
      /// <summary>
      /// RemoveLeaderboard removes a specified leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.RemoveLeaderboardResponse RemoveLeaderboard(global::Podium.Api.V1.RemoveLeaderboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveLeaderboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveLeaderboard removes a specified leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.RemoveLeaderboardResponse RemoveLeaderboard(global::Podium.Api.V1.RemoveLeaderboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveLeaderboard, null, options, request);
      }
      /// <summary>
      /// RemoveLeaderboard removes a specified leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.RemoveLeaderboardResponse> RemoveLeaderboardAsync(global::Podium.Api.V1.RemoveLeaderboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveLeaderboardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveLeaderboard removes a specified leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.RemoveLeaderboardResponse> RemoveLeaderboardAsync(global::Podium.Api.V1.RemoveLeaderboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveLeaderboard, null, options, request);
      }
      /// <summary>
      /// BulkUpsertScores allows clients to send multiple scores in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.BulkUpsertScoresResponse BulkUpsertScores(global::Podium.Api.V1.BulkUpsertScoresRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkUpsertScores(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BulkUpsertScores allows clients to send multiple scores in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.BulkUpsertScoresResponse BulkUpsertScores(global::Podium.Api.V1.BulkUpsertScoresRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkUpsertScores, null, options, request);
      }
      /// <summary>
      /// BulkUpsertScores allows clients to send multiple scores in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.BulkUpsertScoresResponse> BulkUpsertScoresAsync(global::Podium.Api.V1.BulkUpsertScoresRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkUpsertScoresAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BulkUpsertScores allows clients to send multiple scores in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.BulkUpsertScoresResponse> BulkUpsertScoresAsync(global::Podium.Api.V1.BulkUpsertScoresRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkUpsertScores, null, options, request);
      }
      /// <summary>
      /// UpsertScore submits a single leaderboard score to Podium.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.UpsertScoreResponse UpsertScore(global::Podium.Api.V1.UpsertScoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpsertScore(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpsertScore submits a single leaderboard score to Podium.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.UpsertScoreResponse UpsertScore(global::Podium.Api.V1.UpsertScoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpsertScore, null, options, request);
      }
      /// <summary>
      /// UpsertScore submits a single leaderboard score to Podium.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.UpsertScoreResponse> UpsertScoreAsync(global::Podium.Api.V1.UpsertScoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpsertScoreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpsertScore submits a single leaderboard score to Podium.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.UpsertScoreResponse> UpsertScoreAsync(global::Podium.Api.V1.UpsertScoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpsertScore, null, options, request);
      }
      /// <summary>
      /// TotalMembers returns the number of members on a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.TotalMembersResponse TotalMembers(global::Podium.Api.V1.TotalMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalMembers returns the number of members on a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.TotalMembersResponse TotalMembers(global::Podium.Api.V1.TotalMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalMembers, null, options, request);
      }
      /// <summary>
      /// TotalMembers returns the number of members on a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.TotalMembersResponse> TotalMembersAsync(global::Podium.Api.V1.TotalMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalMembers returns the number of members on a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.TotalMembersResponse> TotalMembersAsync(global::Podium.Api.V1.TotalMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalMembers, null, options, request);
      }
      /// <summary>
      /// IncrementScore increments a member score.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.IncrementScoreResponse IncrementScore(global::Podium.Api.V1.IncrementScoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncrementScore(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncrementScore increments a member score.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.IncrementScoreResponse IncrementScore(global::Podium.Api.V1.IncrementScoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IncrementScore, null, options, request);
      }
      /// <summary>
      /// IncrementScore increments a member score.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.IncrementScoreResponse> IncrementScoreAsync(global::Podium.Api.V1.IncrementScoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncrementScoreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncrementScore increments a member score.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.IncrementScoreResponse> IncrementScoreAsync(global::Podium.Api.V1.IncrementScoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IncrementScore, null, options, request);
      }
      /// <summary>
      /// GetMember retrieves leaderboard information from a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetMemberResponse GetMember(global::Podium.Api.V1.GetMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMember retrieves leaderboard information from a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetMemberResponse GetMember(global::Podium.Api.V1.GetMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMember, null, options, request);
      }
      /// <summary>
      /// GetMember retrieves leaderboard information from a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetMemberResponse> GetMemberAsync(global::Podium.Api.V1.GetMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMember retrieves leaderboard information from a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetMemberResponse> GetMemberAsync(global::Podium.Api.V1.GetMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMember, null, options, request);
      }
      /// <summary>
      /// GetMembers retrieves information about multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetMembersResponse GetMembers(global::Podium.Api.V1.GetMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMembers retrieves information about multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetMembersResponse GetMembers(global::Podium.Api.V1.GetMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMembers, null, options, request);
      }
      /// <summary>
      /// GetMembers retrieves information about multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetMembersResponse> GetMembersAsync(global::Podium.Api.V1.GetMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMembers retrieves information about multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetMembersResponse> GetMembersAsync(global::Podium.Api.V1.GetMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMembers, null, options, request);
      }
      /// <summary>
      /// RemoveMember removes a member from a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.RemoveMemberResponse RemoveMember(global::Podium.Api.V1.RemoveMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveMember removes a member from a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.RemoveMemberResponse RemoveMember(global::Podium.Api.V1.RemoveMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveMember, null, options, request);
      }
      /// <summary>
      /// RemoveMember removes a member from a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.RemoveMemberResponse> RemoveMemberAsync(global::Podium.Api.V1.RemoveMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveMember removes a member from a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.RemoveMemberResponse> RemoveMemberAsync(global::Podium.Api.V1.RemoveMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveMember, null, options, request);
      }
      /// <summary>
      /// RemoveMembers allows the removal of multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.RemoveMembersResponse RemoveMembers(global::Podium.Api.V1.RemoveMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveMembers allows the removal of multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.RemoveMembersResponse RemoveMembers(global::Podium.Api.V1.RemoveMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveMembers, null, options, request);
      }
      /// <summary>
      /// RemoveMembers allows the removal of multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.RemoveMembersResponse> RemoveMembersAsync(global::Podium.Api.V1.RemoveMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveMembers allows the removal of multiple members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.RemoveMembersResponse> RemoveMembersAsync(global::Podium.Api.V1.RemoveMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveMembers, null, options, request);
      }
      /// <summary>
      /// GetRank retrieves ranking information about a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetRankResponse GetRank(global::Podium.Api.V1.GetRankRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRank(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRank retrieves ranking information about a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetRankResponse GetRank(global::Podium.Api.V1.GetRankRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRank, null, options, request);
      }
      /// <summary>
      /// GetRank retrieves ranking information about a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetRankResponse> GetRankAsync(global::Podium.Api.V1.GetRankRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRankAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRank retrieves ranking information about a member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetRankResponse> GetRankAsync(global::Podium.Api.V1.GetRankRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRank, null, options, request);
      }
      /// <summary>
      /// GetAroundMember retrieves the closest members to another member on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetAroundMemberResponse GetAroundMember(global::Podium.Api.V1.GetAroundMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAroundMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAroundMember retrieves the closest members to another member on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetAroundMemberResponse GetAroundMember(global::Podium.Api.V1.GetAroundMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAroundMember, null, options, request);
      }
      /// <summary>
      /// GetAroundMember retrieves the closest members to another member on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetAroundMemberResponse> GetAroundMemberAsync(global::Podium.Api.V1.GetAroundMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAroundMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAroundMember retrieves the closest members to another member on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetAroundMemberResponse> GetAroundMemberAsync(global::Podium.Api.V1.GetAroundMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAroundMember, null, options, request);
      }
      /// <summary>
      /// GetAroundScore retrieves the closest members to a score on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetAroundScoreResponse GetAroundScore(global::Podium.Api.V1.GetAroundScoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAroundScore(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAroundScore retrieves the closest members to a score on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetAroundScoreResponse GetAroundScore(global::Podium.Api.V1.GetAroundScoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAroundScore, null, options, request);
      }
      /// <summary>
      /// GetAroundScore retrieves the closest members to a score on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetAroundScoreResponse> GetAroundScoreAsync(global::Podium.Api.V1.GetAroundScoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAroundScoreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAroundScore retrieves the closest members to a score on the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetAroundScoreResponse> GetAroundScoreAsync(global::Podium.Api.V1.GetAroundScoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAroundScore, null, options, request);
      }
      /// <summary>
      /// GetTopMembers retrieves the top ranking members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetTopMembersResponse GetTopMembers(global::Podium.Api.V1.GetTopMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTopMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTopMembers retrieves the top ranking members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetTopMembersResponse GetTopMembers(global::Podium.Api.V1.GetTopMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTopMembers, null, options, request);
      }
      /// <summary>
      /// GetTopMembers retrieves the top ranking members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetTopMembersResponse> GetTopMembersAsync(global::Podium.Api.V1.GetTopMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTopMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTopMembers retrieves the top ranking members of a leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetTopMembersResponse> GetTopMembersAsync(global::Podium.Api.V1.GetTopMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTopMembers, null, options, request);
      }
      /// <summary>
      /// GetTopPercentage retrieves a percentage of the top members of the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetTopPercentageResponse GetTopPercentage(global::Podium.Api.V1.GetTopPercentageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTopPercentage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTopPercentage retrieves a percentage of the top members of the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetTopPercentageResponse GetTopPercentage(global::Podium.Api.V1.GetTopPercentageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTopPercentage, null, options, request);
      }
      /// <summary>
      /// GetTopPercentage retrieves a percentage of the top members of the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetTopPercentageResponse> GetTopPercentageAsync(global::Podium.Api.V1.GetTopPercentageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTopPercentageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTopPercentage retrieves a percentage of the top members of the leaderboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetTopPercentageResponse> GetTopPercentageAsync(global::Podium.Api.V1.GetTopPercentageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTopPercentage, null, options, request);
      }
      /// <summary>
      /// UpsertScoreMultiLeaderboards sends a member score to multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse UpsertScoreMultiLeaderboards(global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpsertScoreMultiLeaderboards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpsertScoreMultiLeaderboards sends a member score to multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse UpsertScoreMultiLeaderboards(global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpsertScoreMultiLeaderboards, null, options, request);
      }
      /// <summary>
      /// UpsertScoreMultiLeaderboards sends a member score to multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse> UpsertScoreMultiLeaderboardsAsync(global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpsertScoreMultiLeaderboardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpsertScoreMultiLeaderboards sends a member score to multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse> UpsertScoreMultiLeaderboardsAsync(global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpsertScoreMultiLeaderboards, null, options, request);
      }
      /// <summary>
      /// GetRankMultiLeaderboards retrieves information about a member in multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetRankMultiLeaderboardsResponse GetRankMultiLeaderboards(global::Podium.Api.V1.GetRankMultiLeaderboardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRankMultiLeaderboards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRankMultiLeaderboards retrieves information about a member in multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Podium.Api.V1.GetRankMultiLeaderboardsResponse GetRankMultiLeaderboards(global::Podium.Api.V1.GetRankMultiLeaderboardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRankMultiLeaderboards, null, options, request);
      }
      /// <summary>
      /// GetRankMultiLeaderboards retrieves information about a member in multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetRankMultiLeaderboardsResponse> GetRankMultiLeaderboardsAsync(global::Podium.Api.V1.GetRankMultiLeaderboardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRankMultiLeaderboardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRankMultiLeaderboards retrieves information about a member in multiple leaderboards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Podium.Api.V1.GetRankMultiLeaderboardsResponse> GetRankMultiLeaderboardsAsync(global::Podium.Api.V1.GetRankMultiLeaderboardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRankMultiLeaderboards, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PodiumClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PodiumClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PodiumBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_HealthCheck, serviceImpl.HealthCheck)
          .AddMethod(__Method_Status, serviceImpl.Status)
          .AddMethod(__Method_RemoveLeaderboard, serviceImpl.RemoveLeaderboard)
          .AddMethod(__Method_BulkUpsertScores, serviceImpl.BulkUpsertScores)
          .AddMethod(__Method_UpsertScore, serviceImpl.UpsertScore)
          .AddMethod(__Method_TotalMembers, serviceImpl.TotalMembers)
          .AddMethod(__Method_IncrementScore, serviceImpl.IncrementScore)
          .AddMethod(__Method_GetMember, serviceImpl.GetMember)
          .AddMethod(__Method_GetMembers, serviceImpl.GetMembers)
          .AddMethod(__Method_RemoveMember, serviceImpl.RemoveMember)
          .AddMethod(__Method_RemoveMembers, serviceImpl.RemoveMembers)
          .AddMethod(__Method_GetRank, serviceImpl.GetRank)
          .AddMethod(__Method_GetAroundMember, serviceImpl.GetAroundMember)
          .AddMethod(__Method_GetAroundScore, serviceImpl.GetAroundScore)
          .AddMethod(__Method_GetTopMembers, serviceImpl.GetTopMembers)
          .AddMethod(__Method_GetTopPercentage, serviceImpl.GetTopPercentage)
          .AddMethod(__Method_UpsertScoreMultiLeaderboards, serviceImpl.UpsertScoreMultiLeaderboards)
          .AddMethod(__Method_GetRankMultiLeaderboards, serviceImpl.GetRankMultiLeaderboards).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PodiumBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_HealthCheck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.HealthCheckRequest, global::Podium.Api.V1.HealthCheckResponse>(serviceImpl.HealthCheck));
      serviceBinder.AddMethod(__Method_Status, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Podium.Api.V1.StatusResponse>(serviceImpl.Status));
      serviceBinder.AddMethod(__Method_RemoveLeaderboard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.RemoveLeaderboardRequest, global::Podium.Api.V1.RemoveLeaderboardResponse>(serviceImpl.RemoveLeaderboard));
      serviceBinder.AddMethod(__Method_BulkUpsertScores, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.BulkUpsertScoresRequest, global::Podium.Api.V1.BulkUpsertScoresResponse>(serviceImpl.BulkUpsertScores));
      serviceBinder.AddMethod(__Method_UpsertScore, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.UpsertScoreRequest, global::Podium.Api.V1.UpsertScoreResponse>(serviceImpl.UpsertScore));
      serviceBinder.AddMethod(__Method_TotalMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.TotalMembersRequest, global::Podium.Api.V1.TotalMembersResponse>(serviceImpl.TotalMembers));
      serviceBinder.AddMethod(__Method_IncrementScore, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.IncrementScoreRequest, global::Podium.Api.V1.IncrementScoreResponse>(serviceImpl.IncrementScore));
      serviceBinder.AddMethod(__Method_GetMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetMemberRequest, global::Podium.Api.V1.GetMemberResponse>(serviceImpl.GetMember));
      serviceBinder.AddMethod(__Method_GetMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetMembersRequest, global::Podium.Api.V1.GetMembersResponse>(serviceImpl.GetMembers));
      serviceBinder.AddMethod(__Method_RemoveMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.RemoveMemberRequest, global::Podium.Api.V1.RemoveMemberResponse>(serviceImpl.RemoveMember));
      serviceBinder.AddMethod(__Method_RemoveMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.RemoveMembersRequest, global::Podium.Api.V1.RemoveMembersResponse>(serviceImpl.RemoveMembers));
      serviceBinder.AddMethod(__Method_GetRank, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetRankRequest, global::Podium.Api.V1.GetRankResponse>(serviceImpl.GetRank));
      serviceBinder.AddMethod(__Method_GetAroundMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetAroundMemberRequest, global::Podium.Api.V1.GetAroundMemberResponse>(serviceImpl.GetAroundMember));
      serviceBinder.AddMethod(__Method_GetAroundScore, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetAroundScoreRequest, global::Podium.Api.V1.GetAroundScoreResponse>(serviceImpl.GetAroundScore));
      serviceBinder.AddMethod(__Method_GetTopMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetTopMembersRequest, global::Podium.Api.V1.GetTopMembersResponse>(serviceImpl.GetTopMembers));
      serviceBinder.AddMethod(__Method_GetTopPercentage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetTopPercentageRequest, global::Podium.Api.V1.GetTopPercentageResponse>(serviceImpl.GetTopPercentage));
      serviceBinder.AddMethod(__Method_UpsertScoreMultiLeaderboards, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.UpsertScoreMultiLeaderboardsRequest, global::Podium.Api.V1.UpsertScoreMultiLeaderboardsResponse>(serviceImpl.UpsertScoreMultiLeaderboards));
      serviceBinder.AddMethod(__Method_GetRankMultiLeaderboards, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Podium.Api.V1.GetRankMultiLeaderboardsRequest, global::Podium.Api.V1.GetRankMultiLeaderboardsResponse>(serviceImpl.GetRankMultiLeaderboards));
    }

  }
}
#endregion
#endif
