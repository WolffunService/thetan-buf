// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BattleEnd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Core.Proto {

  /// <summary>Holder for reflection information generated from BattleEnd.proto</summary>
  public static partial class BattleEndReflection {

    #region Descriptor
    /// <summary>File descriptor for BattleEnd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleEndReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9CYXR0bGVFbmQucHJvdG8SCmNvcmUucHJvdG8aDENvbW1vbi5wcm90byLb",
            "AgoQQmF0dGxlRW5kUmVxdWVzdBIYCgdtYXRjaElkGAEgASgJUgdtYXRjaElk",
            "EjAKCGdhbWVNb2RlGAIgASgOMhQuY29yZS5wcm90by5HYW1lTW9kZVIIZ2Ft",
            "ZU1vZGUSNgoKaW5HYW1lTW9kZRgDIAEoDjIWLmNvcmUucHJvdG8uSW5HYW1l",
            "TW9kZVIKaW5HYW1lTW9kZRIUCgVpc012cBgEIAEoCFIFaXNNdnASEgoEcmFu",
            "axgFIAEoBVIEcmFuaxIkCg1oYXNUcmlwbGVLaWxsGAYgASgIUg1oYXNUcmlw",
            "bGVLaWxsEiAKC2hhc01lZ2FLaWxsGAcgASgIUgtoYXNNZWdhS2lsbBJRChNw",
            "bGF5ZXJCYXR0bGVFbmREYXRhGAggAygLMh8uY29yZS5wcm90by5QbGF5ZXJC",
            "YXR0bGVFbmREYXRhUhNwbGF5ZXJCYXR0bGVFbmREYXRhIu8DCgxCYXR0bGVM",
            "b2dNc2cSGAoHbWF0Y2hJZBgBIAEoCVIHbWF0Y2hJZBIaCghwbGF5ZXJJZBgC",
            "IAEoCVIIcGxheWVySWQSHgoKdGltZVN1Ym1pdBgDIAEoA1IKdGltZVN1Ym1p",
            "dBIoCg9vcGVyYXRpb25TeXN0ZW0YBCABKAlSD29wZXJhdGlvblN5c3RlbRIe",
            "CgphcHBWZXJzaW9uGAUgASgJUgphcHBWZXJzaW9uEiAKC2lzUGxheUFnYWlu",
            "GAYgASgIUgtpc1BsYXlBZ2FpbhIUCgVtYXBJZBgHIAEoBVIFbWFwSWQSHgoK",
            "dGVhbTFTY29yZRgIIAEoBVIKdGVhbTFTY29yZRIeCgp0ZWFtMlNjb3JlGAkg",
            "ASgFUgp0ZWFtMlNjb3JlEiIKDHRyb3BoeVJld2FyZBgKIAEoBVIMdHJvcGh5",
            "UmV3YXJkEh4KCnRoZXRhbkNvaW4YCyABKAJSCnRoZXRhbkNvaW4SHgoKcG93",
            "ZXJQb2ludBgMIAEoBVIKcG93ZXJQb2ludBIQCgNleHAYDSABKAVSA2V4cBJR",
            "ChNwbGF5ZXJCYXR0bGVFbmREYXRhGA4gAygLMh8uY29yZS5wcm90by5QbGF5",
            "ZXJCYXR0bGVFbmREYXRhUhNwbGF5ZXJCYXR0bGVFbmREYXRhIokKChNQbGF5",
            "ZXJCYXR0bGVFbmREYXRhEhoKCHBsYXllcklkGAEgASgJUghwbGF5ZXJJZBIW",
            "CgZ0ZWFtSWQYAiABKAVSBnRlYW1JZBIiCgxiYXR0bGVTdGF0dXMYAyABKAVS",
            "DGJhdHRsZVN0YXR1cxIUCgVzY29yZRgEIAEoBVIFc2NvcmUSEgoEcmFuaxgF",
            "IAEoBVIEcmFuaxIWCgZoZXJvSWQYBiABKAlSBmhlcm9JZBIeCgpoZXJvVHlw",
            "ZUlkGAcgASgFUgpoZXJvVHlwZUlkEhYKBnNraWxsMRgIIAEoBVIGc2tpbGwx",
            "EhYKBnNraWxsMhgJIAEoBVIGc2tpbGwyEhIKBGtpbGwYCiABKAVSBGtpbGwS",
            "FAoFZGVhdGgYCyABKAVSBWRlYXRoEhYKBmFzc2lzdBgMIAEoBVIGYXNzaXN0",
            "EhwKCWhlcm9EbWdJbhgNIAEoBVIJaGVyb0RtZ0luEh4KCmhlcm9EbWdPdXQY",
            "DiABKAVSCmhlcm9EbWdPdXQSHAoJaGVyb1NwZWVkGA8gASgFUgloZXJvU3Bl",
            "ZWQSHAoJc2tpbGwxRG1nGBAgASgFUglza2lsbDFEbWcSHAoJc2tpbGwxVXNl",
            "GBEgASgFUglza2lsbDFVc2USHAoJc2tpbGwyRG1nGBIgASgFUglza2lsbDJE",
            "bWcSHAoJc2tpbGwyVXNlGBMgASgFUglza2lsbDJVc2USGAoHZnVyeVVzZRgU",
            "IAEoBVIHZnVyeVVzZRIeCgpmdXJ5RGFtYWdlGBUgASgFUgpmdXJ5RGFtYWdl",
            "EiIKDGJhdHRsZVJlc3VsdBgWIAEoBVIMYmF0dGxlUmVzdWx0EhAKA21WUBgX",
            "IAEoCFIDbVZQEiIKDHNlcmlhbEtpbGxlchgYIAEoCFIMc2VyaWFsS2lsbGVy",
            "EhgKB3RlYW1NVlAYGSABKAhSB3RlYW1NVlASFAoFbmFubnkYGiABKAhSBW5h",
            "bm55Eh4KCmRvdWJsZUtpbGwYGyABKAVSCmRvdWJsZUtpbGwSHgoKdHJpcGxl",
            "S2lsbBgcIAEoBVIKdHJpcGxlS2lsbBIaCghtZWdhS2lsbBgdIAEoBVIIbWVn",
            "YUtpbGwSIgoMYm94RGVzdHJveWVkGB4gASgFUgxib3hEZXN0cm95ZWQSLAoR",
            "Z2lhbnRCb3hEZXN0cm95ZWQYHyABKAVSEWdpYW50Qm94RGVzdHJveWVkEigK",
            "D2RlYXRoTWF0Y2hTY29yZRggIAEoBVIPZGVhdGhNYXRjaFNjb3JlEjIKFGRl",
            "YXRoTWF0Y2hNaW51c1Njb3JlGCEgASgFUhRkZWF0aE1hdGNoTWludXNTY29y",
            "ZRISCgRzdGFyGCIgASgFUgRzdGFyEjIKFGtlZXBpbmdUaW1lU3VwZXJTdGFy",
            "GCMgASgFUhRrZWVwaW5nVGltZVN1cGVyU3RhchIoCg9yb2JvdFN1bW1vblRp",
            "bWUYJCABKAVSD3JvYm90U3VtbW9uVGltZRIgCgt0b3dlckRhbWFnZRglIAEo",
            "BVILdG93ZXJEYW1hZ2USLAoRYmF0dGVyeVBpY2t1cFRpbWUYJiABKAVSEWJh",
            "dHRlcnlQaWNrdXBUaW1lEiYKDmlzU3BlY2lhbEV2ZW50GCcgASgIUg5pc1Nw",
            "ZWNpYWxFdmVudBIUCgVicmFpbhgoIAEoCVIFYnJhaW4SIgoMSGVyb0xldmVs",
            "RXhwGCkgASgFUgxIZXJvTGV2ZWxFeHBCkwEKDmNvbS5jb3JlLnByb3RvQg5C",
            "YXR0bGVFbmRQcm90b1ABWihnaXRodWIuY29tL1dvbGZmdW5TZXJ2aWNlL3Ro",
            "ZXRhbi1idWYvZ2VuogIDQ1BYqgIKQ29yZS5Qcm90b8oCCkNvcmVcUHJvdG/i",
            "AhZDb3JlXFByb3RvXEdQQk1ldGFkYXRh6gILQ29yZTo6UHJvdG9iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Core.Proto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Proto.BattleEndRequest), global::Core.Proto.BattleEndRequest.Parser, new[]{ "MatchId", "GameMode", "InGameMode", "IsMvp", "Rank", "HasTripleKill", "HasMegaKill", "PlayerBattleEndData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Proto.BattleLogMsg), global::Core.Proto.BattleLogMsg.Parser, new[]{ "MatchId", "PlayerId", "TimeSubmit", "OperationSystem", "AppVersion", "IsPlayAgain", "MapId", "Team1Score", "Team2Score", "TrophyReward", "ThetanCoin", "PowerPoint", "Exp", "PlayerBattleEndData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Proto.PlayerBattleEndData), global::Core.Proto.PlayerBattleEndData.Parser, new[]{ "PlayerId", "TeamId", "BattleStatus", "Score", "Rank", "HeroId", "HeroTypeId", "Skill1", "Skill2", "Kill", "Death", "Assist", "HeroDmgIn", "HeroDmgOut", "HeroSpeed", "Skill1Dmg", "Skill1Use", "Skill2Dmg", "Skill2Use", "FuryUse", "FuryDamage", "BattleResult", "MVP", "SerialKiller", "TeamMVP", "Nanny", "DoubleKill", "TripleKill", "MegaKill", "BoxDestroyed", "GiantBoxDestroyed", "DeathMatchScore", "DeathMatchMinusScore", "Star", "KeepingTimeSuperStar", "RobotSummonTime", "TowerDamage", "BatteryPickupTime", "IsSpecialEvent", "Brain", "HeroLevelExp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattleEndRequest : pb::IMessage<BattleEndRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleEndRequest> _parser = new pb::MessageParser<BattleEndRequest>(() => new BattleEndRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleEndRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Proto.BattleEndReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleEndRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleEndRequest(BattleEndRequest other) : this() {
      matchId_ = other.matchId_;
      gameMode_ = other.gameMode_;
      inGameMode_ = other.inGameMode_;
      isMvp_ = other.isMvp_;
      rank_ = other.rank_;
      hasTripleKill_ = other.hasTripleKill_;
      hasMegaKill_ = other.hasMegaKill_;
      playerBattleEndData_ = other.playerBattleEndData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleEndRequest Clone() {
      return new BattleEndRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameMode" field.</summary>
    public const int GameModeFieldNumber = 2;
    private global::Core.Proto.GameMode gameMode_ = global::Core.Proto.GameMode.Ranked;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Core.Proto.GameMode GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    /// <summary>Field number for the "inGameMode" field.</summary>
    public const int InGameModeFieldNumber = 3;
    private global::Core.Proto.InGameMode inGameMode_ = global::Core.Proto.InGameMode.TeamCollectStar;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Core.Proto.InGameMode InGameMode {
      get { return inGameMode_; }
      set {
        inGameMode_ = value;
      }
    }

    /// <summary>Field number for the "isMvp" field.</summary>
    public const int IsMvpFieldNumber = 4;
    private bool isMvp_;
    /// <summary>
    /// battleEndResult :
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMvp {
      get { return isMvp_; }
      set {
        isMvp_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 5;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "hasTripleKill" field.</summary>
    public const int HasTripleKillFieldNumber = 6;
    private bool hasTripleKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTripleKill {
      get { return hasTripleKill_; }
      set {
        hasTripleKill_ = value;
      }
    }

    /// <summary>Field number for the "hasMegaKill" field.</summary>
    public const int HasMegaKillFieldNumber = 7;
    private bool hasMegaKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMegaKill {
      get { return hasMegaKill_; }
      set {
        hasMegaKill_ = value;
      }
    }

    /// <summary>Field number for the "playerBattleEndData" field.</summary>
    public const int PlayerBattleEndDataFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Core.Proto.PlayerBattleEndData> _repeated_playerBattleEndData_codec
        = pb::FieldCodec.ForMessage(66, global::Core.Proto.PlayerBattleEndData.Parser);
    private readonly pbc::RepeatedField<global::Core.Proto.PlayerBattleEndData> playerBattleEndData_ = new pbc::RepeatedField<global::Core.Proto.PlayerBattleEndData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Core.Proto.PlayerBattleEndData> PlayerBattleEndData {
      get { return playerBattleEndData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleEndRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleEndRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameMode != other.GameMode) return false;
      if (InGameMode != other.InGameMode) return false;
      if (IsMvp != other.IsMvp) return false;
      if (Rank != other.Rank) return false;
      if (HasTripleKill != other.HasTripleKill) return false;
      if (HasMegaKill != other.HasMegaKill) return false;
      if(!playerBattleEndData_.Equals(other.playerBattleEndData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (GameMode != global::Core.Proto.GameMode.Ranked) hash ^= GameMode.GetHashCode();
      if (InGameMode != global::Core.Proto.InGameMode.TeamCollectStar) hash ^= InGameMode.GetHashCode();
      if (IsMvp != false) hash ^= IsMvp.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (HasTripleKill != false) hash ^= HasTripleKill.GetHashCode();
      if (HasMegaKill != false) hash ^= HasMegaKill.GetHashCode();
      hash ^= playerBattleEndData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (GameMode != global::Core.Proto.GameMode.Ranked) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameMode);
      }
      if (InGameMode != global::Core.Proto.InGameMode.TeamCollectStar) {
        output.WriteRawTag(24);
        output.WriteEnum((int) InGameMode);
      }
      if (IsMvp != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMvp);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (HasTripleKill != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasTripleKill);
      }
      if (HasMegaKill != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasMegaKill);
      }
      playerBattleEndData_.WriteTo(output, _repeated_playerBattleEndData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (GameMode != global::Core.Proto.GameMode.Ranked) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameMode);
      }
      if (InGameMode != global::Core.Proto.InGameMode.TeamCollectStar) {
        output.WriteRawTag(24);
        output.WriteEnum((int) InGameMode);
      }
      if (IsMvp != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMvp);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (HasTripleKill != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasTripleKill);
      }
      if (HasMegaKill != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasMegaKill);
      }
      playerBattleEndData_.WriteTo(ref output, _repeated_playerBattleEndData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (GameMode != global::Core.Proto.GameMode.Ranked) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (InGameMode != global::Core.Proto.InGameMode.TeamCollectStar) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InGameMode);
      }
      if (IsMvp != false) {
        size += 1 + 1;
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HasTripleKill != false) {
        size += 1 + 1;
      }
      if (HasMegaKill != false) {
        size += 1 + 1;
      }
      size += playerBattleEndData_.CalculateSize(_repeated_playerBattleEndData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleEndRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.GameMode != global::Core.Proto.GameMode.Ranked) {
        GameMode = other.GameMode;
      }
      if (other.InGameMode != global::Core.Proto.InGameMode.TeamCollectStar) {
        InGameMode = other.InGameMode;
      }
      if (other.IsMvp != false) {
        IsMvp = other.IsMvp;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.HasTripleKill != false) {
        HasTripleKill = other.HasTripleKill;
      }
      if (other.HasMegaKill != false) {
        HasMegaKill = other.HasMegaKill;
      }
      playerBattleEndData_.Add(other.playerBattleEndData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            GameMode = (global::Core.Proto.GameMode) input.ReadEnum();
            break;
          }
          case 24: {
            InGameMode = (global::Core.Proto.InGameMode) input.ReadEnum();
            break;
          }
          case 32: {
            IsMvp = input.ReadBool();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 48: {
            HasTripleKill = input.ReadBool();
            break;
          }
          case 56: {
            HasMegaKill = input.ReadBool();
            break;
          }
          case 66: {
            playerBattleEndData_.AddEntriesFrom(input, _repeated_playerBattleEndData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            GameMode = (global::Core.Proto.GameMode) input.ReadEnum();
            break;
          }
          case 24: {
            InGameMode = (global::Core.Proto.InGameMode) input.ReadEnum();
            break;
          }
          case 32: {
            IsMvp = input.ReadBool();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 48: {
            HasTripleKill = input.ReadBool();
            break;
          }
          case 56: {
            HasMegaKill = input.ReadBool();
            break;
          }
          case 66: {
            playerBattleEndData_.AddEntriesFrom(ref input, _repeated_playerBattleEndData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BattleLogMsg : pb::IMessage<BattleLogMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleLogMsg> _parser = new pb::MessageParser<BattleLogMsg>(() => new BattleLogMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleLogMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Proto.BattleEndReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleLogMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleLogMsg(BattleLogMsg other) : this() {
      matchId_ = other.matchId_;
      playerId_ = other.playerId_;
      timeSubmit_ = other.timeSubmit_;
      operationSystem_ = other.operationSystem_;
      appVersion_ = other.appVersion_;
      isPlayAgain_ = other.isPlayAgain_;
      mapId_ = other.mapId_;
      team1Score_ = other.team1Score_;
      team2Score_ = other.team2Score_;
      trophyReward_ = other.trophyReward_;
      thetanCoin_ = other.thetanCoin_;
      powerPoint_ = other.powerPoint_;
      exp_ = other.exp_;
      playerBattleEndData_ = other.playerBattleEndData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleLogMsg Clone() {
      return new BattleLogMsg(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeSubmit" field.</summary>
    public const int TimeSubmitFieldNumber = 3;
    private long timeSubmit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TimeSubmit {
      get { return timeSubmit_; }
      set {
        timeSubmit_ = value;
      }
    }

    /// <summary>Field number for the "operationSystem" field.</summary>
    public const int OperationSystemFieldNumber = 4;
    private string operationSystem_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OperationSystem {
      get { return operationSystem_; }
      set {
        operationSystem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appVersion" field.</summary>
    public const int AppVersionFieldNumber = 5;
    private string appVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AppVersion {
      get { return appVersion_; }
      set {
        appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isPlayAgain" field.</summary>
    public const int IsPlayAgainFieldNumber = 6;
    private bool isPlayAgain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPlayAgain {
      get { return isPlayAgain_; }
      set {
        isPlayAgain_ = value;
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 7;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "team1Score" field.</summary>
    public const int Team1ScoreFieldNumber = 8;
    private int team1Score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Team1Score {
      get { return team1Score_; }
      set {
        team1Score_ = value;
      }
    }

    /// <summary>Field number for the "team2Score" field.</summary>
    public const int Team2ScoreFieldNumber = 9;
    private int team2Score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Team2Score {
      get { return team2Score_; }
      set {
        team2Score_ = value;
      }
    }

    /// <summary>Field number for the "trophyReward" field.</summary>
    public const int TrophyRewardFieldNumber = 10;
    private int trophyReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrophyReward {
      get { return trophyReward_; }
      set {
        trophyReward_ = value;
      }
    }

    /// <summary>Field number for the "thetanCoin" field.</summary>
    public const int ThetanCoinFieldNumber = 11;
    private float thetanCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ThetanCoin {
      get { return thetanCoin_; }
      set {
        thetanCoin_ = value;
      }
    }

    /// <summary>Field number for the "powerPoint" field.</summary>
    public const int PowerPointFieldNumber = 12;
    private int powerPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PowerPoint {
      get { return powerPoint_; }
      set {
        powerPoint_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 13;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "playerBattleEndData" field.</summary>
    public const int PlayerBattleEndDataFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Core.Proto.PlayerBattleEndData> _repeated_playerBattleEndData_codec
        = pb::FieldCodec.ForMessage(114, global::Core.Proto.PlayerBattleEndData.Parser);
    private readonly pbc::RepeatedField<global::Core.Proto.PlayerBattleEndData> playerBattleEndData_ = new pbc::RepeatedField<global::Core.Proto.PlayerBattleEndData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Core.Proto.PlayerBattleEndData> PlayerBattleEndData {
      get { return playerBattleEndData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleLogMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleLogMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (TimeSubmit != other.TimeSubmit) return false;
      if (OperationSystem != other.OperationSystem) return false;
      if (AppVersion != other.AppVersion) return false;
      if (IsPlayAgain != other.IsPlayAgain) return false;
      if (MapId != other.MapId) return false;
      if (Team1Score != other.Team1Score) return false;
      if (Team2Score != other.Team2Score) return false;
      if (TrophyReward != other.TrophyReward) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThetanCoin, other.ThetanCoin)) return false;
      if (PowerPoint != other.PowerPoint) return false;
      if (Exp != other.Exp) return false;
      if(!playerBattleEndData_.Equals(other.playerBattleEndData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (TimeSubmit != 0L) hash ^= TimeSubmit.GetHashCode();
      if (OperationSystem.Length != 0) hash ^= OperationSystem.GetHashCode();
      if (AppVersion.Length != 0) hash ^= AppVersion.GetHashCode();
      if (IsPlayAgain != false) hash ^= IsPlayAgain.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (Team1Score != 0) hash ^= Team1Score.GetHashCode();
      if (Team2Score != 0) hash ^= Team2Score.GetHashCode();
      if (TrophyReward != 0) hash ^= TrophyReward.GetHashCode();
      if (ThetanCoin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThetanCoin);
      if (PowerPoint != 0) hash ^= PowerPoint.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      hash ^= playerBattleEndData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (TimeSubmit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeSubmit);
      }
      if (OperationSystem.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OperationSystem);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AppVersion);
      }
      if (IsPlayAgain != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsPlayAgain);
      }
      if (MapId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MapId);
      }
      if (Team1Score != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Team1Score);
      }
      if (Team2Score != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Team2Score);
      }
      if (TrophyReward != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TrophyReward);
      }
      if (ThetanCoin != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ThetanCoin);
      }
      if (PowerPoint != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PowerPoint);
      }
      if (Exp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Exp);
      }
      playerBattleEndData_.WriteTo(output, _repeated_playerBattleEndData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (TimeSubmit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeSubmit);
      }
      if (OperationSystem.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OperationSystem);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AppVersion);
      }
      if (IsPlayAgain != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsPlayAgain);
      }
      if (MapId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MapId);
      }
      if (Team1Score != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Team1Score);
      }
      if (Team2Score != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Team2Score);
      }
      if (TrophyReward != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TrophyReward);
      }
      if (ThetanCoin != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ThetanCoin);
      }
      if (PowerPoint != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PowerPoint);
      }
      if (Exp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Exp);
      }
      playerBattleEndData_.WriteTo(ref output, _repeated_playerBattleEndData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (TimeSubmit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeSubmit);
      }
      if (OperationSystem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationSystem);
      }
      if (AppVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVersion);
      }
      if (IsPlayAgain != false) {
        size += 1 + 1;
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (Team1Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team1Score);
      }
      if (Team2Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team2Score);
      }
      if (TrophyReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrophyReward);
      }
      if (ThetanCoin != 0F) {
        size += 1 + 4;
      }
      if (PowerPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerPoint);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      size += playerBattleEndData_.CalculateSize(_repeated_playerBattleEndData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleLogMsg other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TimeSubmit != 0L) {
        TimeSubmit = other.TimeSubmit;
      }
      if (other.OperationSystem.Length != 0) {
        OperationSystem = other.OperationSystem;
      }
      if (other.AppVersion.Length != 0) {
        AppVersion = other.AppVersion;
      }
      if (other.IsPlayAgain != false) {
        IsPlayAgain = other.IsPlayAgain;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      if (other.Team1Score != 0) {
        Team1Score = other.Team1Score;
      }
      if (other.Team2Score != 0) {
        Team2Score = other.Team2Score;
      }
      if (other.TrophyReward != 0) {
        TrophyReward = other.TrophyReward;
      }
      if (other.ThetanCoin != 0F) {
        ThetanCoin = other.ThetanCoin;
      }
      if (other.PowerPoint != 0) {
        PowerPoint = other.PowerPoint;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      playerBattleEndData_.Add(other.playerBattleEndData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            TimeSubmit = input.ReadInt64();
            break;
          }
          case 34: {
            OperationSystem = input.ReadString();
            break;
          }
          case 42: {
            AppVersion = input.ReadString();
            break;
          }
          case 48: {
            IsPlayAgain = input.ReadBool();
            break;
          }
          case 56: {
            MapId = input.ReadInt32();
            break;
          }
          case 64: {
            Team1Score = input.ReadInt32();
            break;
          }
          case 72: {
            Team2Score = input.ReadInt32();
            break;
          }
          case 80: {
            TrophyReward = input.ReadInt32();
            break;
          }
          case 93: {
            ThetanCoin = input.ReadFloat();
            break;
          }
          case 96: {
            PowerPoint = input.ReadInt32();
            break;
          }
          case 104: {
            Exp = input.ReadInt32();
            break;
          }
          case 114: {
            playerBattleEndData_.AddEntriesFrom(input, _repeated_playerBattleEndData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            TimeSubmit = input.ReadInt64();
            break;
          }
          case 34: {
            OperationSystem = input.ReadString();
            break;
          }
          case 42: {
            AppVersion = input.ReadString();
            break;
          }
          case 48: {
            IsPlayAgain = input.ReadBool();
            break;
          }
          case 56: {
            MapId = input.ReadInt32();
            break;
          }
          case 64: {
            Team1Score = input.ReadInt32();
            break;
          }
          case 72: {
            Team2Score = input.ReadInt32();
            break;
          }
          case 80: {
            TrophyReward = input.ReadInt32();
            break;
          }
          case 93: {
            ThetanCoin = input.ReadFloat();
            break;
          }
          case 96: {
            PowerPoint = input.ReadInt32();
            break;
          }
          case 104: {
            Exp = input.ReadInt32();
            break;
          }
          case 114: {
            playerBattleEndData_.AddEntriesFrom(ref input, _repeated_playerBattleEndData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerBattleEndData : pb::IMessage<PlayerBattleEndData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerBattleEndData> _parser = new pb::MessageParser<PlayerBattleEndData>(() => new PlayerBattleEndData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerBattleEndData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Proto.BattleEndReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerBattleEndData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerBattleEndData(PlayerBattleEndData other) : this() {
      playerId_ = other.playerId_;
      teamId_ = other.teamId_;
      battleStatus_ = other.battleStatus_;
      score_ = other.score_;
      rank_ = other.rank_;
      heroId_ = other.heroId_;
      heroTypeId_ = other.heroTypeId_;
      skill1_ = other.skill1_;
      skill2_ = other.skill2_;
      kill_ = other.kill_;
      death_ = other.death_;
      assist_ = other.assist_;
      heroDmgIn_ = other.heroDmgIn_;
      heroDmgOut_ = other.heroDmgOut_;
      heroSpeed_ = other.heroSpeed_;
      skill1Dmg_ = other.skill1Dmg_;
      skill1Use_ = other.skill1Use_;
      skill2Dmg_ = other.skill2Dmg_;
      skill2Use_ = other.skill2Use_;
      furyUse_ = other.furyUse_;
      furyDamage_ = other.furyDamage_;
      battleResult_ = other.battleResult_;
      mVP_ = other.mVP_;
      serialKiller_ = other.serialKiller_;
      teamMVP_ = other.teamMVP_;
      nanny_ = other.nanny_;
      doubleKill_ = other.doubleKill_;
      tripleKill_ = other.tripleKill_;
      megaKill_ = other.megaKill_;
      boxDestroyed_ = other.boxDestroyed_;
      giantBoxDestroyed_ = other.giantBoxDestroyed_;
      deathMatchScore_ = other.deathMatchScore_;
      deathMatchMinusScore_ = other.deathMatchMinusScore_;
      star_ = other.star_;
      keepingTimeSuperStar_ = other.keepingTimeSuperStar_;
      robotSummonTime_ = other.robotSummonTime_;
      towerDamage_ = other.towerDamage_;
      batteryPickupTime_ = other.batteryPickupTime_;
      isSpecialEvent_ = other.isSpecialEvent_;
      brain_ = other.brain_;
      heroLevelExp_ = other.heroLevelExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerBattleEndData Clone() {
      return new PlayerBattleEndData(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private int teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "battleStatus" field.</summary>
    public const int BattleStatusFieldNumber = 3;
    private int battleStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BattleStatus {
      get { return battleStatus_; }
      set {
        battleStatus_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 5;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private string heroId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HeroId {
      get { return heroId_; }
      set {
        heroId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroTypeId" field.</summary>
    public const int HeroTypeIdFieldNumber = 7;
    private int heroTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeroTypeId {
      get { return heroTypeId_; }
      set {
        heroTypeId_ = value;
      }
    }

    /// <summary>Field number for the "skill1" field.</summary>
    public const int Skill1FieldNumber = 8;
    private int skill1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Skill1 {
      get { return skill1_; }
      set {
        skill1_ = value;
      }
    }

    /// <summary>Field number for the "skill2" field.</summary>
    public const int Skill2FieldNumber = 9;
    private int skill2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Skill2 {
      get { return skill2_; }
      set {
        skill2_ = value;
      }
    }

    /// <summary>Field number for the "kill" field.</summary>
    public const int KillFieldNumber = 10;
    private int kill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Kill {
      get { return kill_; }
      set {
        kill_ = value;
      }
    }

    /// <summary>Field number for the "death" field.</summary>
    public const int DeathFieldNumber = 11;
    private int death_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Death {
      get { return death_; }
      set {
        death_ = value;
      }
    }

    /// <summary>Field number for the "assist" field.</summary>
    public const int AssistFieldNumber = 12;
    private int assist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Assist {
      get { return assist_; }
      set {
        assist_ = value;
      }
    }

    /// <summary>Field number for the "heroDmgIn" field.</summary>
    public const int HeroDmgInFieldNumber = 13;
    private int heroDmgIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeroDmgIn {
      get { return heroDmgIn_; }
      set {
        heroDmgIn_ = value;
      }
    }

    /// <summary>Field number for the "heroDmgOut" field.</summary>
    public const int HeroDmgOutFieldNumber = 14;
    private int heroDmgOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeroDmgOut {
      get { return heroDmgOut_; }
      set {
        heroDmgOut_ = value;
      }
    }

    /// <summary>Field number for the "heroSpeed" field.</summary>
    public const int HeroSpeedFieldNumber = 15;
    private int heroSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeroSpeed {
      get { return heroSpeed_; }
      set {
        heroSpeed_ = value;
      }
    }

    /// <summary>Field number for the "skill1Dmg" field.</summary>
    public const int Skill1DmgFieldNumber = 16;
    private int skill1Dmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Skill1Dmg {
      get { return skill1Dmg_; }
      set {
        skill1Dmg_ = value;
      }
    }

    /// <summary>Field number for the "skill1Use" field.</summary>
    public const int Skill1UseFieldNumber = 17;
    private int skill1Use_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Skill1Use {
      get { return skill1Use_; }
      set {
        skill1Use_ = value;
      }
    }

    /// <summary>Field number for the "skill2Dmg" field.</summary>
    public const int Skill2DmgFieldNumber = 18;
    private int skill2Dmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Skill2Dmg {
      get { return skill2Dmg_; }
      set {
        skill2Dmg_ = value;
      }
    }

    /// <summary>Field number for the "skill2Use" field.</summary>
    public const int Skill2UseFieldNumber = 19;
    private int skill2Use_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Skill2Use {
      get { return skill2Use_; }
      set {
        skill2Use_ = value;
      }
    }

    /// <summary>Field number for the "furyUse" field.</summary>
    public const int FuryUseFieldNumber = 20;
    private int furyUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FuryUse {
      get { return furyUse_; }
      set {
        furyUse_ = value;
      }
    }

    /// <summary>Field number for the "furyDamage" field.</summary>
    public const int FuryDamageFieldNumber = 21;
    private int furyDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FuryDamage {
      get { return furyDamage_; }
      set {
        furyDamage_ = value;
      }
    }

    /// <summary>Field number for the "battleResult" field.</summary>
    public const int BattleResultFieldNumber = 22;
    private int battleResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BattleResult {
      get { return battleResult_; }
      set {
        battleResult_ = value;
      }
    }

    /// <summary>Field number for the "mVP" field.</summary>
    public const int MVPFieldNumber = 23;
    private bool mVP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MVP {
      get { return mVP_; }
      set {
        mVP_ = value;
      }
    }

    /// <summary>Field number for the "serialKiller" field.</summary>
    public const int SerialKillerFieldNumber = 24;
    private bool serialKiller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SerialKiller {
      get { return serialKiller_; }
      set {
        serialKiller_ = value;
      }
    }

    /// <summary>Field number for the "teamMVP" field.</summary>
    public const int TeamMVPFieldNumber = 25;
    private bool teamMVP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TeamMVP {
      get { return teamMVP_; }
      set {
        teamMVP_ = value;
      }
    }

    /// <summary>Field number for the "nanny" field.</summary>
    public const int NannyFieldNumber = 26;
    private bool nanny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Nanny {
      get { return nanny_; }
      set {
        nanny_ = value;
      }
    }

    /// <summary>Field number for the "doubleKill" field.</summary>
    public const int DoubleKillFieldNumber = 27;
    private int doubleKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DoubleKill {
      get { return doubleKill_; }
      set {
        doubleKill_ = value;
      }
    }

    /// <summary>Field number for the "tripleKill" field.</summary>
    public const int TripleKillFieldNumber = 28;
    private int tripleKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TripleKill {
      get { return tripleKill_; }
      set {
        tripleKill_ = value;
      }
    }

    /// <summary>Field number for the "megaKill" field.</summary>
    public const int MegaKillFieldNumber = 29;
    private int megaKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MegaKill {
      get { return megaKill_; }
      set {
        megaKill_ = value;
      }
    }

    /// <summary>Field number for the "boxDestroyed" field.</summary>
    public const int BoxDestroyedFieldNumber = 30;
    private int boxDestroyed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoxDestroyed {
      get { return boxDestroyed_; }
      set {
        boxDestroyed_ = value;
      }
    }

    /// <summary>Field number for the "giantBoxDestroyed" field.</summary>
    public const int GiantBoxDestroyedFieldNumber = 31;
    private int giantBoxDestroyed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GiantBoxDestroyed {
      get { return giantBoxDestroyed_; }
      set {
        giantBoxDestroyed_ = value;
      }
    }

    /// <summary>Field number for the "deathMatchScore" field.</summary>
    public const int DeathMatchScoreFieldNumber = 32;
    private int deathMatchScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeathMatchScore {
      get { return deathMatchScore_; }
      set {
        deathMatchScore_ = value;
      }
    }

    /// <summary>Field number for the "deathMatchMinusScore" field.</summary>
    public const int DeathMatchMinusScoreFieldNumber = 33;
    private int deathMatchMinusScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeathMatchMinusScore {
      get { return deathMatchMinusScore_; }
      set {
        deathMatchMinusScore_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 34;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "keepingTimeSuperStar" field.</summary>
    public const int KeepingTimeSuperStarFieldNumber = 35;
    private int keepingTimeSuperStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KeepingTimeSuperStar {
      get { return keepingTimeSuperStar_; }
      set {
        keepingTimeSuperStar_ = value;
      }
    }

    /// <summary>Field number for the "robotSummonTime" field.</summary>
    public const int RobotSummonTimeFieldNumber = 36;
    private int robotSummonTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RobotSummonTime {
      get { return robotSummonTime_; }
      set {
        robotSummonTime_ = value;
      }
    }

    /// <summary>Field number for the "towerDamage" field.</summary>
    public const int TowerDamageFieldNumber = 37;
    private int towerDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TowerDamage {
      get { return towerDamage_; }
      set {
        towerDamage_ = value;
      }
    }

    /// <summary>Field number for the "batteryPickupTime" field.</summary>
    public const int BatteryPickupTimeFieldNumber = 38;
    private int batteryPickupTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BatteryPickupTime {
      get { return batteryPickupTime_; }
      set {
        batteryPickupTime_ = value;
      }
    }

    /// <summary>Field number for the "isSpecialEvent" field.</summary>
    public const int IsSpecialEventFieldNumber = 39;
    private bool isSpecialEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSpecialEvent {
      get { return isSpecialEvent_; }
      set {
        isSpecialEvent_ = value;
      }
    }

    /// <summary>Field number for the "brain" field.</summary>
    public const int BrainFieldNumber = 40;
    private string brain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Brain {
      get { return brain_; }
      set {
        brain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeroLevelExp" field.</summary>
    public const int HeroLevelExpFieldNumber = 41;
    private int heroLevelExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeroLevelExp {
      get { return heroLevelExp_; }
      set {
        heroLevelExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerBattleEndData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerBattleEndData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TeamId != other.TeamId) return false;
      if (BattleStatus != other.BattleStatus) return false;
      if (Score != other.Score) return false;
      if (Rank != other.Rank) return false;
      if (HeroId != other.HeroId) return false;
      if (HeroTypeId != other.HeroTypeId) return false;
      if (Skill1 != other.Skill1) return false;
      if (Skill2 != other.Skill2) return false;
      if (Kill != other.Kill) return false;
      if (Death != other.Death) return false;
      if (Assist != other.Assist) return false;
      if (HeroDmgIn != other.HeroDmgIn) return false;
      if (HeroDmgOut != other.HeroDmgOut) return false;
      if (HeroSpeed != other.HeroSpeed) return false;
      if (Skill1Dmg != other.Skill1Dmg) return false;
      if (Skill1Use != other.Skill1Use) return false;
      if (Skill2Dmg != other.Skill2Dmg) return false;
      if (Skill2Use != other.Skill2Use) return false;
      if (FuryUse != other.FuryUse) return false;
      if (FuryDamage != other.FuryDamage) return false;
      if (BattleResult != other.BattleResult) return false;
      if (MVP != other.MVP) return false;
      if (SerialKiller != other.SerialKiller) return false;
      if (TeamMVP != other.TeamMVP) return false;
      if (Nanny != other.Nanny) return false;
      if (DoubleKill != other.DoubleKill) return false;
      if (TripleKill != other.TripleKill) return false;
      if (MegaKill != other.MegaKill) return false;
      if (BoxDestroyed != other.BoxDestroyed) return false;
      if (GiantBoxDestroyed != other.GiantBoxDestroyed) return false;
      if (DeathMatchScore != other.DeathMatchScore) return false;
      if (DeathMatchMinusScore != other.DeathMatchMinusScore) return false;
      if (Star != other.Star) return false;
      if (KeepingTimeSuperStar != other.KeepingTimeSuperStar) return false;
      if (RobotSummonTime != other.RobotSummonTime) return false;
      if (TowerDamage != other.TowerDamage) return false;
      if (BatteryPickupTime != other.BatteryPickupTime) return false;
      if (IsSpecialEvent != other.IsSpecialEvent) return false;
      if (Brain != other.Brain) return false;
      if (HeroLevelExp != other.HeroLevelExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (BattleStatus != 0) hash ^= BattleStatus.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (HeroId.Length != 0) hash ^= HeroId.GetHashCode();
      if (HeroTypeId != 0) hash ^= HeroTypeId.GetHashCode();
      if (Skill1 != 0) hash ^= Skill1.GetHashCode();
      if (Skill2 != 0) hash ^= Skill2.GetHashCode();
      if (Kill != 0) hash ^= Kill.GetHashCode();
      if (Death != 0) hash ^= Death.GetHashCode();
      if (Assist != 0) hash ^= Assist.GetHashCode();
      if (HeroDmgIn != 0) hash ^= HeroDmgIn.GetHashCode();
      if (HeroDmgOut != 0) hash ^= HeroDmgOut.GetHashCode();
      if (HeroSpeed != 0) hash ^= HeroSpeed.GetHashCode();
      if (Skill1Dmg != 0) hash ^= Skill1Dmg.GetHashCode();
      if (Skill1Use != 0) hash ^= Skill1Use.GetHashCode();
      if (Skill2Dmg != 0) hash ^= Skill2Dmg.GetHashCode();
      if (Skill2Use != 0) hash ^= Skill2Use.GetHashCode();
      if (FuryUse != 0) hash ^= FuryUse.GetHashCode();
      if (FuryDamage != 0) hash ^= FuryDamage.GetHashCode();
      if (BattleResult != 0) hash ^= BattleResult.GetHashCode();
      if (MVP != false) hash ^= MVP.GetHashCode();
      if (SerialKiller != false) hash ^= SerialKiller.GetHashCode();
      if (TeamMVP != false) hash ^= TeamMVP.GetHashCode();
      if (Nanny != false) hash ^= Nanny.GetHashCode();
      if (DoubleKill != 0) hash ^= DoubleKill.GetHashCode();
      if (TripleKill != 0) hash ^= TripleKill.GetHashCode();
      if (MegaKill != 0) hash ^= MegaKill.GetHashCode();
      if (BoxDestroyed != 0) hash ^= BoxDestroyed.GetHashCode();
      if (GiantBoxDestroyed != 0) hash ^= GiantBoxDestroyed.GetHashCode();
      if (DeathMatchScore != 0) hash ^= DeathMatchScore.GetHashCode();
      if (DeathMatchMinusScore != 0) hash ^= DeathMatchMinusScore.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (KeepingTimeSuperStar != 0) hash ^= KeepingTimeSuperStar.GetHashCode();
      if (RobotSummonTime != 0) hash ^= RobotSummonTime.GetHashCode();
      if (TowerDamage != 0) hash ^= TowerDamage.GetHashCode();
      if (BatteryPickupTime != 0) hash ^= BatteryPickupTime.GetHashCode();
      if (IsSpecialEvent != false) hash ^= IsSpecialEvent.GetHashCode();
      if (Brain.Length != 0) hash ^= Brain.GetHashCode();
      if (HeroLevelExp != 0) hash ^= HeroLevelExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (TeamId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamId);
      }
      if (BattleStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BattleStatus);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (HeroId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HeroId);
      }
      if (HeroTypeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeroTypeId);
      }
      if (Skill1 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Skill1);
      }
      if (Skill2 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Skill2);
      }
      if (Kill != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Kill);
      }
      if (Death != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Death);
      }
      if (Assist != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Assist);
      }
      if (HeroDmgIn != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HeroDmgIn);
      }
      if (HeroDmgOut != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HeroDmgOut);
      }
      if (HeroSpeed != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HeroSpeed);
      }
      if (Skill1Dmg != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Skill1Dmg);
      }
      if (Skill1Use != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Skill1Use);
      }
      if (Skill2Dmg != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Skill2Dmg);
      }
      if (Skill2Use != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Skill2Use);
      }
      if (FuryUse != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(FuryUse);
      }
      if (FuryDamage != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FuryDamage);
      }
      if (BattleResult != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(BattleResult);
      }
      if (MVP != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(MVP);
      }
      if (SerialKiller != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(SerialKiller);
      }
      if (TeamMVP != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(TeamMVP);
      }
      if (Nanny != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Nanny);
      }
      if (DoubleKill != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(DoubleKill);
      }
      if (TripleKill != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(TripleKill);
      }
      if (MegaKill != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(MegaKill);
      }
      if (BoxDestroyed != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(BoxDestroyed);
      }
      if (GiantBoxDestroyed != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(GiantBoxDestroyed);
      }
      if (DeathMatchScore != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(DeathMatchScore);
      }
      if (DeathMatchMinusScore != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(DeathMatchMinusScore);
      }
      if (Star != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Star);
      }
      if (KeepingTimeSuperStar != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(KeepingTimeSuperStar);
      }
      if (RobotSummonTime != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(RobotSummonTime);
      }
      if (TowerDamage != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(TowerDamage);
      }
      if (BatteryPickupTime != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(BatteryPickupTime);
      }
      if (IsSpecialEvent != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsSpecialEvent);
      }
      if (Brain.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Brain);
      }
      if (HeroLevelExp != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(HeroLevelExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (TeamId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamId);
      }
      if (BattleStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BattleStatus);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (HeroId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HeroId);
      }
      if (HeroTypeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeroTypeId);
      }
      if (Skill1 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Skill1);
      }
      if (Skill2 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Skill2);
      }
      if (Kill != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Kill);
      }
      if (Death != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Death);
      }
      if (Assist != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Assist);
      }
      if (HeroDmgIn != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HeroDmgIn);
      }
      if (HeroDmgOut != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HeroDmgOut);
      }
      if (HeroSpeed != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HeroSpeed);
      }
      if (Skill1Dmg != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Skill1Dmg);
      }
      if (Skill1Use != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Skill1Use);
      }
      if (Skill2Dmg != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Skill2Dmg);
      }
      if (Skill2Use != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Skill2Use);
      }
      if (FuryUse != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(FuryUse);
      }
      if (FuryDamage != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FuryDamage);
      }
      if (BattleResult != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(BattleResult);
      }
      if (MVP != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(MVP);
      }
      if (SerialKiller != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(SerialKiller);
      }
      if (TeamMVP != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(TeamMVP);
      }
      if (Nanny != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Nanny);
      }
      if (DoubleKill != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(DoubleKill);
      }
      if (TripleKill != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(TripleKill);
      }
      if (MegaKill != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(MegaKill);
      }
      if (BoxDestroyed != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(BoxDestroyed);
      }
      if (GiantBoxDestroyed != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(GiantBoxDestroyed);
      }
      if (DeathMatchScore != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(DeathMatchScore);
      }
      if (DeathMatchMinusScore != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(DeathMatchMinusScore);
      }
      if (Star != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Star);
      }
      if (KeepingTimeSuperStar != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(KeepingTimeSuperStar);
      }
      if (RobotSummonTime != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(RobotSummonTime);
      }
      if (TowerDamage != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(TowerDamage);
      }
      if (BatteryPickupTime != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(BatteryPickupTime);
      }
      if (IsSpecialEvent != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsSpecialEvent);
      }
      if (Brain.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Brain);
      }
      if (HeroLevelExp != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(HeroLevelExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (BattleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleStatus);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HeroId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroId);
      }
      if (HeroTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroTypeId);
      }
      if (Skill1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skill1);
      }
      if (Skill2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skill2);
      }
      if (Kill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kill);
      }
      if (Death != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Death);
      }
      if (Assist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assist);
      }
      if (HeroDmgIn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroDmgIn);
      }
      if (HeroDmgOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroDmgOut);
      }
      if (HeroSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroSpeed);
      }
      if (Skill1Dmg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Skill1Dmg);
      }
      if (Skill1Use != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Skill1Use);
      }
      if (Skill2Dmg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Skill2Dmg);
      }
      if (Skill2Use != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Skill2Use);
      }
      if (FuryUse != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FuryUse);
      }
      if (FuryDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FuryDamage);
      }
      if (BattleResult != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattleResult);
      }
      if (MVP != false) {
        size += 2 + 1;
      }
      if (SerialKiller != false) {
        size += 2 + 1;
      }
      if (TeamMVP != false) {
        size += 2 + 1;
      }
      if (Nanny != false) {
        size += 2 + 1;
      }
      if (DoubleKill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DoubleKill);
      }
      if (TripleKill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TripleKill);
      }
      if (MegaKill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MegaKill);
      }
      if (BoxDestroyed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoxDestroyed);
      }
      if (GiantBoxDestroyed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GiantBoxDestroyed);
      }
      if (DeathMatchScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeathMatchScore);
      }
      if (DeathMatchMinusScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeathMatchMinusScore);
      }
      if (Star != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (KeepingTimeSuperStar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KeepingTimeSuperStar);
      }
      if (RobotSummonTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RobotSummonTime);
      }
      if (TowerDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TowerDamage);
      }
      if (BatteryPickupTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BatteryPickupTime);
      }
      if (IsSpecialEvent != false) {
        size += 2 + 1;
      }
      if (Brain.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Brain);
      }
      if (HeroLevelExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroLevelExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerBattleEndData other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.BattleStatus != 0) {
        BattleStatus = other.BattleStatus;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.HeroId.Length != 0) {
        HeroId = other.HeroId;
      }
      if (other.HeroTypeId != 0) {
        HeroTypeId = other.HeroTypeId;
      }
      if (other.Skill1 != 0) {
        Skill1 = other.Skill1;
      }
      if (other.Skill2 != 0) {
        Skill2 = other.Skill2;
      }
      if (other.Kill != 0) {
        Kill = other.Kill;
      }
      if (other.Death != 0) {
        Death = other.Death;
      }
      if (other.Assist != 0) {
        Assist = other.Assist;
      }
      if (other.HeroDmgIn != 0) {
        HeroDmgIn = other.HeroDmgIn;
      }
      if (other.HeroDmgOut != 0) {
        HeroDmgOut = other.HeroDmgOut;
      }
      if (other.HeroSpeed != 0) {
        HeroSpeed = other.HeroSpeed;
      }
      if (other.Skill1Dmg != 0) {
        Skill1Dmg = other.Skill1Dmg;
      }
      if (other.Skill1Use != 0) {
        Skill1Use = other.Skill1Use;
      }
      if (other.Skill2Dmg != 0) {
        Skill2Dmg = other.Skill2Dmg;
      }
      if (other.Skill2Use != 0) {
        Skill2Use = other.Skill2Use;
      }
      if (other.FuryUse != 0) {
        FuryUse = other.FuryUse;
      }
      if (other.FuryDamage != 0) {
        FuryDamage = other.FuryDamage;
      }
      if (other.BattleResult != 0) {
        BattleResult = other.BattleResult;
      }
      if (other.MVP != false) {
        MVP = other.MVP;
      }
      if (other.SerialKiller != false) {
        SerialKiller = other.SerialKiller;
      }
      if (other.TeamMVP != false) {
        TeamMVP = other.TeamMVP;
      }
      if (other.Nanny != false) {
        Nanny = other.Nanny;
      }
      if (other.DoubleKill != 0) {
        DoubleKill = other.DoubleKill;
      }
      if (other.TripleKill != 0) {
        TripleKill = other.TripleKill;
      }
      if (other.MegaKill != 0) {
        MegaKill = other.MegaKill;
      }
      if (other.BoxDestroyed != 0) {
        BoxDestroyed = other.BoxDestroyed;
      }
      if (other.GiantBoxDestroyed != 0) {
        GiantBoxDestroyed = other.GiantBoxDestroyed;
      }
      if (other.DeathMatchScore != 0) {
        DeathMatchScore = other.DeathMatchScore;
      }
      if (other.DeathMatchMinusScore != 0) {
        DeathMatchMinusScore = other.DeathMatchMinusScore;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.KeepingTimeSuperStar != 0) {
        KeepingTimeSuperStar = other.KeepingTimeSuperStar;
      }
      if (other.RobotSummonTime != 0) {
        RobotSummonTime = other.RobotSummonTime;
      }
      if (other.TowerDamage != 0) {
        TowerDamage = other.TowerDamage;
      }
      if (other.BatteryPickupTime != 0) {
        BatteryPickupTime = other.BatteryPickupTime;
      }
      if (other.IsSpecialEvent != false) {
        IsSpecialEvent = other.IsSpecialEvent;
      }
      if (other.Brain.Length != 0) {
        Brain = other.Brain;
      }
      if (other.HeroLevelExp != 0) {
        HeroLevelExp = other.HeroLevelExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            TeamId = input.ReadInt32();
            break;
          }
          case 24: {
            BattleStatus = input.ReadInt32();
            break;
          }
          case 32: {
            Score = input.ReadInt32();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 50: {
            HeroId = input.ReadString();
            break;
          }
          case 56: {
            HeroTypeId = input.ReadInt32();
            break;
          }
          case 64: {
            Skill1 = input.ReadInt32();
            break;
          }
          case 72: {
            Skill2 = input.ReadInt32();
            break;
          }
          case 80: {
            Kill = input.ReadInt32();
            break;
          }
          case 88: {
            Death = input.ReadInt32();
            break;
          }
          case 96: {
            Assist = input.ReadInt32();
            break;
          }
          case 104: {
            HeroDmgIn = input.ReadInt32();
            break;
          }
          case 112: {
            HeroDmgOut = input.ReadInt32();
            break;
          }
          case 120: {
            HeroSpeed = input.ReadInt32();
            break;
          }
          case 128: {
            Skill1Dmg = input.ReadInt32();
            break;
          }
          case 136: {
            Skill1Use = input.ReadInt32();
            break;
          }
          case 144: {
            Skill2Dmg = input.ReadInt32();
            break;
          }
          case 152: {
            Skill2Use = input.ReadInt32();
            break;
          }
          case 160: {
            FuryUse = input.ReadInt32();
            break;
          }
          case 168: {
            FuryDamage = input.ReadInt32();
            break;
          }
          case 176: {
            BattleResult = input.ReadInt32();
            break;
          }
          case 184: {
            MVP = input.ReadBool();
            break;
          }
          case 192: {
            SerialKiller = input.ReadBool();
            break;
          }
          case 200: {
            TeamMVP = input.ReadBool();
            break;
          }
          case 208: {
            Nanny = input.ReadBool();
            break;
          }
          case 216: {
            DoubleKill = input.ReadInt32();
            break;
          }
          case 224: {
            TripleKill = input.ReadInt32();
            break;
          }
          case 232: {
            MegaKill = input.ReadInt32();
            break;
          }
          case 240: {
            BoxDestroyed = input.ReadInt32();
            break;
          }
          case 248: {
            GiantBoxDestroyed = input.ReadInt32();
            break;
          }
          case 256: {
            DeathMatchScore = input.ReadInt32();
            break;
          }
          case 264: {
            DeathMatchMinusScore = input.ReadInt32();
            break;
          }
          case 272: {
            Star = input.ReadInt32();
            break;
          }
          case 280: {
            KeepingTimeSuperStar = input.ReadInt32();
            break;
          }
          case 288: {
            RobotSummonTime = input.ReadInt32();
            break;
          }
          case 296: {
            TowerDamage = input.ReadInt32();
            break;
          }
          case 304: {
            BatteryPickupTime = input.ReadInt32();
            break;
          }
          case 312: {
            IsSpecialEvent = input.ReadBool();
            break;
          }
          case 322: {
            Brain = input.ReadString();
            break;
          }
          case 328: {
            HeroLevelExp = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            TeamId = input.ReadInt32();
            break;
          }
          case 24: {
            BattleStatus = input.ReadInt32();
            break;
          }
          case 32: {
            Score = input.ReadInt32();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 50: {
            HeroId = input.ReadString();
            break;
          }
          case 56: {
            HeroTypeId = input.ReadInt32();
            break;
          }
          case 64: {
            Skill1 = input.ReadInt32();
            break;
          }
          case 72: {
            Skill2 = input.ReadInt32();
            break;
          }
          case 80: {
            Kill = input.ReadInt32();
            break;
          }
          case 88: {
            Death = input.ReadInt32();
            break;
          }
          case 96: {
            Assist = input.ReadInt32();
            break;
          }
          case 104: {
            HeroDmgIn = input.ReadInt32();
            break;
          }
          case 112: {
            HeroDmgOut = input.ReadInt32();
            break;
          }
          case 120: {
            HeroSpeed = input.ReadInt32();
            break;
          }
          case 128: {
            Skill1Dmg = input.ReadInt32();
            break;
          }
          case 136: {
            Skill1Use = input.ReadInt32();
            break;
          }
          case 144: {
            Skill2Dmg = input.ReadInt32();
            break;
          }
          case 152: {
            Skill2Use = input.ReadInt32();
            break;
          }
          case 160: {
            FuryUse = input.ReadInt32();
            break;
          }
          case 168: {
            FuryDamage = input.ReadInt32();
            break;
          }
          case 176: {
            BattleResult = input.ReadInt32();
            break;
          }
          case 184: {
            MVP = input.ReadBool();
            break;
          }
          case 192: {
            SerialKiller = input.ReadBool();
            break;
          }
          case 200: {
            TeamMVP = input.ReadBool();
            break;
          }
          case 208: {
            Nanny = input.ReadBool();
            break;
          }
          case 216: {
            DoubleKill = input.ReadInt32();
            break;
          }
          case 224: {
            TripleKill = input.ReadInt32();
            break;
          }
          case 232: {
            MegaKill = input.ReadInt32();
            break;
          }
          case 240: {
            BoxDestroyed = input.ReadInt32();
            break;
          }
          case 248: {
            GiantBoxDestroyed = input.ReadInt32();
            break;
          }
          case 256: {
            DeathMatchScore = input.ReadInt32();
            break;
          }
          case 264: {
            DeathMatchMinusScore = input.ReadInt32();
            break;
          }
          case 272: {
            Star = input.ReadInt32();
            break;
          }
          case 280: {
            KeepingTimeSuperStar = input.ReadInt32();
            break;
          }
          case 288: {
            RobotSummonTime = input.ReadInt32();
            break;
          }
          case 296: {
            TowerDamage = input.ReadInt32();
            break;
          }
          case 304: {
            BatteryPickupTime = input.ReadInt32();
            break;
          }
          case 312: {
            IsSpecialEvent = input.ReadBool();
            break;
          }
          case 322: {
            Brain = input.ReadString();
            break;
          }
          case 328: {
            HeroLevelExp = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
