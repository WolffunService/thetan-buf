// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: aog_match.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Aog {

  /// <summary>Holder for reflection information generated from aog_match.proto</summary>
  public static partial class AogMatchReflection {

    #region Descriptor
    /// <summary>File descriptor for aog_match.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AogMatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9hb2dfbWF0Y2gucHJvdG8SA2FvZyJuChpBb2dNYXRjaEZvdW5kUmVzcG9u",
            "c2VQcm90bxIYCgdtYXRjaElEGAEgASgJUgdtYXRjaElEEjYKB3BsYXllcnMY",
            "AiADKAsyHC5hb2cuQW9nUGxheWVySW5mb01hdGNoUHJvdG9SB3BsYXllcnMi",
            "8wMKF0FvZ1BsYXllckluZm9NYXRjaFByb3RvEhoKCHBsYXllcklEGAEgASgJ",
            "UghwbGF5ZXJJRBIYCgdwYXJ0eUlEGAIgASgJUgdwYXJ0eUlEEhYKBnNraW5J",
            "RBgDIAEoBVIGc2tpbklEEhoKCHRyb3BoaWVzGAQgASgFUgh0cm9waGllcxIc",
            "CgloZXJvTGV2ZWwYBSABKAVSCWhlcm9MZXZlbBIYCgdyZWdpb25zGAYgAygF",
            "UgdyZWdpb25zEh4KCnBsYXllck5hbWUYByABKAlSCnBsYXllck5hbWUSGgoI",
            "YXZhdGFySUQYCCABKAVSCGF2YXRhcklEEhgKB2ZyYW1lSUQYCSABKAVSB2Zy",
            "YW1lSUQSFgoGaGVyb0lEGAogASgJUgZoZXJvSUQSIgoMdHJvcGh5U2VhcmNo",
            "GAsgASgFUgx0cm9waHlTZWFyY2gSHAoJYnJhaW5UeXBlGAwgASgFUglicmFp",
            "blR5cGUSFgoGdGVhbUlEGA0gASgFUgZ0ZWFtSUQSIAoLYmF0dGxlQ291bnQY",
            "DiABKAVSC2JhdHRsZUNvdW50EiAKC25hbWVDb2xvcklEGA8gASgFUgtuYW1l",
            "Q29sb3JJRBISCgRyYW5rGBAgASgFUgRyYW5rEhYKBnNraWxscxgRIAMoDVIG",
            "c2tpbGxzImoKFkFvZ0NhbmNlbFRpY2tldFJlcXVlc3QSGgoIcGxheWVySUQY",
            "ASABKAVSCHBsYXllcklEEhgKB3BhcnR5SUQYAiABKAVSB3BhcnR5SUQSGgoI",
            "dGlja2V0SUQYAyABKAVSCHRpY2tldElEImsKF0FvZ0NhbmNlbFRpY2tldFJl",
            "c3BvbnNlEhoKCHBsYXllcklEGAEgASgFUghwbGF5ZXJJRBIYCgdwYXJ0eUlE",
            "GAIgASgFUgdwYXJ0eUlEEhoKCHRpY2tldElEGAMgASgFUgh0aWNrZXRJRDJm",
            "ChdBb2dNYXRjaERpcmVjdG9yU2VydmljZRJLCgxDYW5jZWxUaWNrZXQSGy5h",
            "b2cuQW9nQ2FuY2VsVGlja2V0UmVxdWVzdBocLmFvZy5Bb2dDYW5jZWxUaWNr",
            "ZXRSZXNwb25zZSIAQksKB2NvbS5hb2dCDUFvZ01hdGNoUHJvdG9QAVoFLi9h",
            "b2eiAgNBWFiqAgNBb2fKAgNBb2fiAg9Bb2dcR1BCTWV0YWRhdGHqAgNBb2di",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Aog.AogMatchFoundResponseProto), global::Aog.AogMatchFoundResponseProto.Parser, new[]{ "MatchID", "Players" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aog.AogPlayerInfoMatchProto), global::Aog.AogPlayerInfoMatchProto.Parser, new[]{ "PlayerID", "PartyID", "SkinID", "Trophies", "HeroLevel", "Regions", "PlayerName", "AvatarID", "FrameID", "HeroID", "TrophySearch", "BrainType", "TeamID", "BattleCount", "NameColorID", "Rank", "Skills" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aog.AogCancelTicketRequest), global::Aog.AogCancelTicketRequest.Parser, new[]{ "PlayerID", "PartyID", "TicketID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aog.AogCancelTicketResponse), global::Aog.AogCancelTicketResponse.Parser, new[]{ "PlayerID", "PartyID", "TicketID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AogMatchFoundResponseProto : pb::IMessage<AogMatchFoundResponseProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AogMatchFoundResponseProto> _parser = new pb::MessageParser<AogMatchFoundResponseProto>(() => new AogMatchFoundResponseProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AogMatchFoundResponseProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aog.AogMatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogMatchFoundResponseProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogMatchFoundResponseProto(AogMatchFoundResponseProto other) : this() {
      matchID_ = other.matchID_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogMatchFoundResponseProto Clone() {
      return new AogMatchFoundResponseProto(this);
    }

    /// <summary>Field number for the "matchID" field.</summary>
    public const int MatchIDFieldNumber = 1;
    private string matchID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MatchID {
      get { return matchID_; }
      set {
        matchID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Aog.AogPlayerInfoMatchProto> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Aog.AogPlayerInfoMatchProto.Parser);
    private readonly pbc::RepeatedField<global::Aog.AogPlayerInfoMatchProto> players_ = new pbc::RepeatedField<global::Aog.AogPlayerInfoMatchProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aog.AogPlayerInfoMatchProto> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AogMatchFoundResponseProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AogMatchFoundResponseProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchID != other.MatchID) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchID.Length != 0) hash ^= MatchID.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchID);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchID);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MatchID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchID);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AogMatchFoundResponseProto other) {
      if (other == null) {
        return;
      }
      if (other.MatchID.Length != 0) {
        MatchID = other.MatchID;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchID = input.ReadString();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchID = input.ReadString();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AogPlayerInfoMatchProto : pb::IMessage<AogPlayerInfoMatchProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AogPlayerInfoMatchProto> _parser = new pb::MessageParser<AogPlayerInfoMatchProto>(() => new AogPlayerInfoMatchProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AogPlayerInfoMatchProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aog.AogMatchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogPlayerInfoMatchProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogPlayerInfoMatchProto(AogPlayerInfoMatchProto other) : this() {
      playerID_ = other.playerID_;
      partyID_ = other.partyID_;
      skinID_ = other.skinID_;
      trophies_ = other.trophies_;
      heroLevel_ = other.heroLevel_;
      regions_ = other.regions_.Clone();
      playerName_ = other.playerName_;
      avatarID_ = other.avatarID_;
      frameID_ = other.frameID_;
      heroID_ = other.heroID_;
      trophySearch_ = other.trophySearch_;
      brainType_ = other.brainType_;
      teamID_ = other.teamID_;
      battleCount_ = other.battleCount_;
      nameColorID_ = other.nameColorID_;
      rank_ = other.rank_;
      skills_ = other.skills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogPlayerInfoMatchProto Clone() {
      return new AogPlayerInfoMatchProto(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partyID" field.</summary>
    public const int PartyIDFieldNumber = 2;
    private string partyID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PartyID {
      get { return partyID_; }
      set {
        partyID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skinID" field.</summary>
    public const int SkinIDFieldNumber = 3;
    private int skinID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkinID {
      get { return skinID_; }
      set {
        skinID_ = value;
      }
    }

    /// <summary>Field number for the "trophies" field.</summary>
    public const int TrophiesFieldNumber = 4;
    private int trophies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Trophies {
      get { return trophies_; }
      set {
        trophies_ = value;
      }
    }

    /// <summary>Field number for the "heroLevel" field.</summary>
    public const int HeroLevelFieldNumber = 5;
    private int heroLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeroLevel {
      get { return heroLevel_; }
      set {
        heroLevel_ = value;
      }
    }

    /// <summary>Field number for the "regions" field.</summary>
    public const int RegionsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_regions_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> regions_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Regions {
      get { return regions_; }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 7;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarID" field.</summary>
    public const int AvatarIDFieldNumber = 8;
    private int avatarID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AvatarID {
      get { return avatarID_; }
      set {
        avatarID_ = value;
      }
    }

    /// <summary>Field number for the "frameID" field.</summary>
    public const int FrameIDFieldNumber = 9;
    private int frameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrameID {
      get { return frameID_; }
      set {
        frameID_ = value;
      }
    }

    /// <summary>Field number for the "heroID" field.</summary>
    public const int HeroIDFieldNumber = 10;
    private string heroID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HeroID {
      get { return heroID_; }
      set {
        heroID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trophySearch" field.</summary>
    public const int TrophySearchFieldNumber = 11;
    private int trophySearch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrophySearch {
      get { return trophySearch_; }
      set {
        trophySearch_ = value;
      }
    }

    /// <summary>Field number for the "brainType" field.</summary>
    public const int BrainTypeFieldNumber = 12;
    private int brainType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BrainType {
      get { return brainType_; }
      set {
        brainType_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 13;
    private int teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "battleCount" field.</summary>
    public const int BattleCountFieldNumber = 14;
    private int battleCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BattleCount {
      get { return battleCount_; }
      set {
        battleCount_ = value;
      }
    }

    /// <summary>Field number for the "nameColorID" field.</summary>
    public const int NameColorIDFieldNumber = 15;
    private int nameColorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NameColorID {
      get { return nameColorID_; }
      set {
        nameColorID_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 16;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 17;
    private static readonly pb::FieldCodec<uint> _repeated_skills_codec
        = pb::FieldCodec.ForUInt32(138);
    private readonly pbc::RepeatedField<uint> skills_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AogPlayerInfoMatchProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AogPlayerInfoMatchProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (PartyID != other.PartyID) return false;
      if (SkinID != other.SkinID) return false;
      if (Trophies != other.Trophies) return false;
      if (HeroLevel != other.HeroLevel) return false;
      if(!regions_.Equals(other.regions_)) return false;
      if (PlayerName != other.PlayerName) return false;
      if (AvatarID != other.AvatarID) return false;
      if (FrameID != other.FrameID) return false;
      if (HeroID != other.HeroID) return false;
      if (TrophySearch != other.TrophySearch) return false;
      if (BrainType != other.BrainType) return false;
      if (TeamID != other.TeamID) return false;
      if (BattleCount != other.BattleCount) return false;
      if (NameColorID != other.NameColorID) return false;
      if (Rank != other.Rank) return false;
      if(!skills_.Equals(other.skills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (PartyID.Length != 0) hash ^= PartyID.GetHashCode();
      if (SkinID != 0) hash ^= SkinID.GetHashCode();
      if (Trophies != 0) hash ^= Trophies.GetHashCode();
      if (HeroLevel != 0) hash ^= HeroLevel.GetHashCode();
      hash ^= regions_.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (AvatarID != 0) hash ^= AvatarID.GetHashCode();
      if (FrameID != 0) hash ^= FrameID.GetHashCode();
      if (HeroID.Length != 0) hash ^= HeroID.GetHashCode();
      if (TrophySearch != 0) hash ^= TrophySearch.GetHashCode();
      if (BrainType != 0) hash ^= BrainType.GetHashCode();
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (BattleCount != 0) hash ^= BattleCount.GetHashCode();
      if (NameColorID != 0) hash ^= NameColorID.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (PartyID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PartyID);
      }
      if (SkinID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkinID);
      }
      if (Trophies != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Trophies);
      }
      if (HeroLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HeroLevel);
      }
      regions_.WriteTo(output, _repeated_regions_codec);
      if (PlayerName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PlayerName);
      }
      if (AvatarID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AvatarID);
      }
      if (FrameID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FrameID);
      }
      if (HeroID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(HeroID);
      }
      if (TrophySearch != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TrophySearch);
      }
      if (BrainType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BrainType);
      }
      if (TeamID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TeamID);
      }
      if (BattleCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BattleCount);
      }
      if (NameColorID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NameColorID);
      }
      if (Rank != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Rank);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (PartyID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PartyID);
      }
      if (SkinID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkinID);
      }
      if (Trophies != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Trophies);
      }
      if (HeroLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HeroLevel);
      }
      regions_.WriteTo(ref output, _repeated_regions_codec);
      if (PlayerName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PlayerName);
      }
      if (AvatarID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AvatarID);
      }
      if (FrameID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FrameID);
      }
      if (HeroID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(HeroID);
      }
      if (TrophySearch != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TrophySearch);
      }
      if (BrainType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BrainType);
      }
      if (TeamID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TeamID);
      }
      if (BattleCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BattleCount);
      }
      if (NameColorID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NameColorID);
      }
      if (Rank != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Rank);
      }
      skills_.WriteTo(ref output, _repeated_skills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (PartyID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartyID);
      }
      if (SkinID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinID);
      }
      if (Trophies != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trophies);
      }
      if (HeroLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroLevel);
      }
      size += regions_.CalculateSize(_repeated_regions_codec);
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (AvatarID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarID);
      }
      if (FrameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameID);
      }
      if (HeroID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroID);
      }
      if (TrophySearch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrophySearch);
      }
      if (BrainType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrainType);
      }
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (BattleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleCount);
      }
      if (NameColorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameColorID);
      }
      if (Rank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AogPlayerInfoMatchProto other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.PartyID.Length != 0) {
        PartyID = other.PartyID;
      }
      if (other.SkinID != 0) {
        SkinID = other.SkinID;
      }
      if (other.Trophies != 0) {
        Trophies = other.Trophies;
      }
      if (other.HeroLevel != 0) {
        HeroLevel = other.HeroLevel;
      }
      regions_.Add(other.regions_);
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.AvatarID != 0) {
        AvatarID = other.AvatarID;
      }
      if (other.FrameID != 0) {
        FrameID = other.FrameID;
      }
      if (other.HeroID.Length != 0) {
        HeroID = other.HeroID;
      }
      if (other.TrophySearch != 0) {
        TrophySearch = other.TrophySearch;
      }
      if (other.BrainType != 0) {
        BrainType = other.BrainType;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.BattleCount != 0) {
        BattleCount = other.BattleCount;
      }
      if (other.NameColorID != 0) {
        NameColorID = other.NameColorID;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      skills_.Add(other.skills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 18: {
            PartyID = input.ReadString();
            break;
          }
          case 24: {
            SkinID = input.ReadInt32();
            break;
          }
          case 32: {
            Trophies = input.ReadInt32();
            break;
          }
          case 40: {
            HeroLevel = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            regions_.AddEntriesFrom(input, _repeated_regions_codec);
            break;
          }
          case 58: {
            PlayerName = input.ReadString();
            break;
          }
          case 64: {
            AvatarID = input.ReadInt32();
            break;
          }
          case 72: {
            FrameID = input.ReadInt32();
            break;
          }
          case 82: {
            HeroID = input.ReadString();
            break;
          }
          case 88: {
            TrophySearch = input.ReadInt32();
            break;
          }
          case 96: {
            BrainType = input.ReadInt32();
            break;
          }
          case 104: {
            TeamID = input.ReadInt32();
            break;
          }
          case 112: {
            BattleCount = input.ReadInt32();
            break;
          }
          case 120: {
            NameColorID = input.ReadInt32();
            break;
          }
          case 128: {
            Rank = input.ReadInt32();
            break;
          }
          case 138:
          case 136: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 18: {
            PartyID = input.ReadString();
            break;
          }
          case 24: {
            SkinID = input.ReadInt32();
            break;
          }
          case 32: {
            Trophies = input.ReadInt32();
            break;
          }
          case 40: {
            HeroLevel = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            regions_.AddEntriesFrom(ref input, _repeated_regions_codec);
            break;
          }
          case 58: {
            PlayerName = input.ReadString();
            break;
          }
          case 64: {
            AvatarID = input.ReadInt32();
            break;
          }
          case 72: {
            FrameID = input.ReadInt32();
            break;
          }
          case 82: {
            HeroID = input.ReadString();
            break;
          }
          case 88: {
            TrophySearch = input.ReadInt32();
            break;
          }
          case 96: {
            BrainType = input.ReadInt32();
            break;
          }
          case 104: {
            TeamID = input.ReadInt32();
            break;
          }
          case 112: {
            BattleCount = input.ReadInt32();
            break;
          }
          case 120: {
            NameColorID = input.ReadInt32();
            break;
          }
          case 128: {
            Rank = input.ReadInt32();
            break;
          }
          case 138:
          case 136: {
            skills_.AddEntriesFrom(ref input, _repeated_skills_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AogCancelTicketRequest : pb::IMessage<AogCancelTicketRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AogCancelTicketRequest> _parser = new pb::MessageParser<AogCancelTicketRequest>(() => new AogCancelTicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AogCancelTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aog.AogMatchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogCancelTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogCancelTicketRequest(AogCancelTicketRequest other) : this() {
      playerID_ = other.playerID_;
      partyID_ = other.partyID_;
      ticketID_ = other.ticketID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogCancelTicketRequest Clone() {
      return new AogCancelTicketRequest(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "partyID" field.</summary>
    public const int PartyIDFieldNumber = 2;
    private int partyID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PartyID {
      get { return partyID_; }
      set {
        partyID_ = value;
      }
    }

    /// <summary>Field number for the "ticketID" field.</summary>
    public const int TicketIDFieldNumber = 3;
    private int ticketID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TicketID {
      get { return ticketID_; }
      set {
        ticketID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AogCancelTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AogCancelTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (PartyID != other.PartyID) return false;
      if (TicketID != other.TicketID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (PartyID != 0) hash ^= PartyID.GetHashCode();
      if (TicketID != 0) hash ^= TicketID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (PartyID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PartyID);
      }
      if (TicketID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TicketID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (PartyID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PartyID);
      }
      if (TicketID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TicketID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (PartyID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartyID);
      }
      if (TicketID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AogCancelTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.PartyID != 0) {
        PartyID = other.PartyID;
      }
      if (other.TicketID != 0) {
        TicketID = other.TicketID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 16: {
            PartyID = input.ReadInt32();
            break;
          }
          case 24: {
            TicketID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 16: {
            PartyID = input.ReadInt32();
            break;
          }
          case 24: {
            TicketID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AogCancelTicketResponse : pb::IMessage<AogCancelTicketResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AogCancelTicketResponse> _parser = new pb::MessageParser<AogCancelTicketResponse>(() => new AogCancelTicketResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AogCancelTicketResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aog.AogMatchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogCancelTicketResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogCancelTicketResponse(AogCancelTicketResponse other) : this() {
      playerID_ = other.playerID_;
      partyID_ = other.partyID_;
      ticketID_ = other.ticketID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AogCancelTicketResponse Clone() {
      return new AogCancelTicketResponse(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "partyID" field.</summary>
    public const int PartyIDFieldNumber = 2;
    private int partyID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PartyID {
      get { return partyID_; }
      set {
        partyID_ = value;
      }
    }

    /// <summary>Field number for the "ticketID" field.</summary>
    public const int TicketIDFieldNumber = 3;
    private int ticketID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TicketID {
      get { return ticketID_; }
      set {
        ticketID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AogCancelTicketResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AogCancelTicketResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (PartyID != other.PartyID) return false;
      if (TicketID != other.TicketID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (PartyID != 0) hash ^= PartyID.GetHashCode();
      if (TicketID != 0) hash ^= TicketID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (PartyID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PartyID);
      }
      if (TicketID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TicketID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (PartyID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PartyID);
      }
      if (TicketID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TicketID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (PartyID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartyID);
      }
      if (TicketID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AogCancelTicketResponse other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.PartyID != 0) {
        PartyID = other.PartyID;
      }
      if (other.TicketID != 0) {
        TicketID = other.TicketID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 16: {
            PartyID = input.ReadInt32();
            break;
          }
          case 24: {
            TicketID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 16: {
            PartyID = input.ReadInt32();
            break;
          }
          case 24: {
            TicketID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
